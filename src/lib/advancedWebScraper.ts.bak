// üöÄ ADVANCED WEB SCRAPER - Bypass Anti-Bot Protection
// Scraper professionale con Puppeteer + Stealth + Proxy Rotation

import puppeteer, { Browser, Page } from 'puppeteer';
import puppeteerExtra from 'puppeteer-extra';
import StealthPlugin from 'puppeteer-extra-plugin-stealth';
import AdblockerPlugin from 'puppeteer-extra-plugin-adblocker';
import { ScrapedLand, LandSearchCriteria } from '../../src/types/land';

// Configura Puppeteer Extra con plugin stealth
puppeteerExtra.use(StealthPlugin());
puppeteerExtra.use(AdblockerPlugin({ blockTrackers: true }));

export class AdvancedWebScraper {
  private browser: Browser | null = null;
  private isInitialized = false;

  // User agents realistici per rotazione
  private userAgents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (iPhone; CPU iPhone OS 17_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Mobile/15E148 Safari/604.1',
    'Mozilla/5.0 (Android 14; Mobile; rv:109.0) Gecko/121.0 Firefox/121.0',
  ];

  // Proxy list (puoi aggiungere proxy reali qui)
  private proxies = [
    // 'http://proxy1:port',
    // 'http://proxy2:port',
    // Aggiungi proxy reali se disponibili
  ];

  async initialize(): Promise<void> {
    if (this.isInitialized) return;

    console.log('üöÄ Inizializzazione Advanced Web Scraper...');

    try {
      // Configurazione browser avanzata
      this.browser = await puppeteerExtra.launch({
        headless: true, // Modalit√† headless
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--disable-gpu',
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding',
          '--disable-field-trial-config',
          '--disable-back-forward-cache',
          '--disable-ipc-flooding-protection',
          '--disable-hang-monitor',
          '--disable-prompt-on-repost',
          '--disable-sync',
          '--disable-translate',
          '--disable-windows10-custom-titlebar',
          '--disable-extensions',
          '--disable-plugins',
          '--disable-images', // Carica pi√π velocemente
          '--disable-javascript', // Solo per alcuni siti
          '--user-agent=' + this.getRandomUserAgent(),
        ],
        ignoreDefaultArgs: ['--disable-extensions'],
        timeout: 30000,
      });

      this.isInitialized = true;
      console.log('‚úÖ Advanced Web Scraper inizializzato con successo');
    } catch (error) {
      console.error('‚ùå Errore inizializzazione Advanced Web Scraper:', error);
      throw error;
    }
  }

  private getRandomUserAgent(): string {
    return this.userAgents[Math.floor(Math.random() * this.userAgents.length)]!;
  }

  private getRandomProxy(): string | undefined {
    if (this.proxies.length === 0) return undefined;
    return this.proxies[Math.floor(Math.random() * this.proxies.length)];
  }

  async scrapeLands(criteria: LandSearchCriteria): Promise<ScrapedLand[]> {
    console.log('üîç Advanced scraping con bypass anti-bot...');
    
    await this.initialize();
    
    const results: ScrapedLand[] = [];
    
    try {
      // Fonti con strategie specifiche per ogni sito
      const sources = [
        { 
          name: 'Immobiliare.it', 
          scraper: () => this.scrapeImmobiliareAdvanced(criteria) 
        },
        { 
          name: 'Casa.it', 
          scraper: () => this.scrapeCasaAdvanced(criteria) 
        },
        { 
          name: 'Idealista.it', 
          scraper: () => this.scrapeIdealistaAdvanced(criteria) 
        },
        { 
          name: 'BorsinoImmobiliare.it', 
          scraper: () => this.scrapeBorsinoAdvanced(criteria) 
        },
      ];

      // Scraping parallelo per velocit√†
      const promises = sources.map(async (source) => {
        try {
          console.log(`üîç Scraping ${source.name} con browser automation...`);
          const sourceResults = await source.scraper();
          
          if (sourceResults.length > 0) {
            console.log(`‚úÖ ${source.name}: ${sourceResults.length} terreni trovati`);
            return sourceResults;
          } else {
            console.log(`‚ùå ${source.name}: nessun risultato`);
            return [];
          }
        } catch (error) {
          console.error(`‚ùå Errore ${source.name}:`, error);
          return [];
        }
      });

      const allResults = await Promise.all(promises);
      results.push(...allResults.flat());

      console.log(`‚úÖ Advanced scraping completato: ${results.length} terreni totali`);
      return results;

    } catch (error) {
      console.error('‚ùå Errore advanced scraping:', error);
      return [];
    }
  }

  // IMMOBILIARE.IT - Strategia avanzata
  private async scrapeImmobiliareAdvanced(criteria: LandSearchCriteria): Promise<ScrapedLand[]> {
    const results: ScrapedLand[] = [];
    
    try {
      const page = await this.createStealthPage();
      
      // Clean location
      const location = this.cleanLocation(criteria.location);
      const url = `https://www.immobiliare.it/vendita-terreni/${location}/`;
      
      console.log(`üì° Navigando su Immobiliare.it: ${url}`);
      
      // Naviga con strategia anti-detection
      await page.goto(url, { 
        waitUntil: 'networkidle2',
        timeout: 30000 
      });

      // Aspetta che la pagina carichi completamente
      await new Promise(resolve => setTimeout(resolve, 3000));

      // Controlla se siamo stati bloccati
      const isBlocked = await page.evaluate(() => {
        return document.body.textContent?.includes('Please enable JS') || 
               document.body.textContent?.includes('captcha') ||
               document.body.textContent?.includes('blocked');
      });

      if (isBlocked) {
        console.log('üö´ Immobiliare.it: Rilevato blocco, provo strategia alternativa...');
        await page.close();
        return this.scrapeImmobiliareAlternative(criteria);
      }

      // Estrai dati con selettori aggiornati
      const lands = await page.evaluate((criteria) => {
        const results: any[] = [];
        
        // Selettori aggiornati per Immobiliare.it 2024
        const listings = document.querySelectorAll('[data-testid="listing"]') || 
                        document.querySelectorAll('.listing-item') ||
                        document.querySelectorAll('[class*="listing"]');
        
        listings.forEach((listing, index) => {
          try {
            const titleEl = listing.querySelector('h2, h3, [class*="title"], [class*="Title"]');
            const priceEl = listing.querySelector('[class*="price"], [class*="Price"], .price');
            const areaEl = listing.querySelector('[class*="area"], [class*="Area"], [class*="surface"]');
            const locationEl = listing.querySelector('[class*="location"], [class*="Location"], [class*="address"]');
            const linkEl = listing.querySelector('a[href]');
            const imageEl = listing.querySelector('img');
            
            if (titleEl && priceEl) {
              const title = titleEl.textContent?.trim() || '';
              const priceText = priceEl.textContent?.trim() || '';
              const areaText = areaEl?.textContent?.trim() || '';
              const location = locationEl?.textContent?.trim() || criteria.location;
              
              // Parse price
              const priceMatch = priceText.match(/[\d.,]+/);
              const price = priceMatch ? parseInt(priceMatch[0]!.replace(/[.,]/g, '')) : 0;
              
              // Parse area
              const areaMatch = areaText.match(/[\d.,]+/);
              const area = areaMatch ? parseInt(areaMatch[0]!.replace(/[.,]/g, '')) : 0;
              
              if (price > 0 && area > 0) {
                results.push({
                  id: `immobiliare_${index}`,
                  title: title,
                  location: location,
                  price: price,
                  area: area,
                  pricePerSqm: Math.floor(price / area),
                  description: title,
                  url: linkEl ? (linkEl as HTMLAnchorElement).href : '',
                  source: 'Immobiliare.it',
                  imageUrl: imageEl ? (imageEl as HTMLImageElement).src : '',
                  features: ['Edificabile'],
                  coordinates: { lat: 41.9028, lng: 12.4964 },
                  lastUpdated: new Date(),
                  isDemo: false
                });
              }
            }
          } catch (e) {
            console.error('Errore parsing listing:', e);
          }
        });
        
        return results;
      }, criteria);

      results.push(...lands);
      await page.close();

    } catch (error) {
      console.error('‚ùå Errore scraping Immobiliare.it:', error);
    }

    return results;
  }

  // Strategia alternativa per Immobiliare.it
  private async scrapeImmobiliareAlternative(criteria: LandSearchCriteria): Promise<ScrapedLand[]> {
    const results: ScrapedLand[] = [];
    
    try {
      const page = await this.createStealthPage();
      
      // Prova con URL diverso
      const location = this.cleanLocation(criteria.location);
      const url = `https://www.immobiliare.it/vendita-terreni/${location}/?criterio=rilevanza`;
      
      console.log(`üì° Strategia alternativa Immobiliare.it: ${url}`);
      
      // Simula comportamento umano
      await page.setViewport({ width: 1366, height: 768 });
      await page.goto(url, { waitUntil: 'domcontentloaded' });
      
      // Simula scroll umano
      await page.evaluate(() => {
        window.scrollTo(0, document.body.scrollHeight / 2);
      });
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      await page.evaluate(() => {
        window.scrollTo(0, document.body.scrollHeight);
      });
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Estrai con selettori pi√π generici
      const lands = await page.evaluate(() => {
        const results: any[] = [];
        const elements = document.querySelectorAll('div, article, section');
        
        elements.forEach((el, index) => {
          const text = el.textContent || '';
          if (text.includes('‚Ç¨') && text.includes('m¬≤') && text.length > 50 && text.length < 500) {
            const priceMatch = text.match(/‚Ç¨\s*([\d.,]+)/);
            const areaMatch = text.match(/([\d.,]+)\s*m¬≤/);
            
            if (priceMatch && areaMatch) {
              const price = parseInt(priceMatch[1]!.replace(/[.,]/g, ''));
              const area = parseInt(areaMatch[1]!.replace(/[.,]/g, ''));
              
              if (price > 10000 && area > 100) {
                results.push({
                  id: `immobiliare_alt_${index}`,
                  title: text.substring(0, 100),
                  location: 'Roma, Italia',
                  price: price,
                  area: area,
                  pricePerSqm: Math.floor(price / area),
                  description: text,
                  url: `https://www.immobiliare.it/terreno-${index}`,
                  source: 'Immobiliare.it',
                  imageUrl: '',
                  features: ['Edificabile'],
                  coordinates: { lat: 41.9028, lng: 12.4964 },
                  lastUpdated: new Date(),
                  isDemo: false
                });
              }
            }
          }
        });
        
        return results.slice(0, 10); // Limita a 10 risultati
      });

      results.push(...lands);
      await page.close();

    } catch (error) {
      console.error('‚ùå Errore strategia alternativa Immobiliare.it:', error);
    }

    return results;
  }

  // CASA.IT - Strategia avanzata
  private async scrapeCasaAdvanced(criteria: LandSearchCriteria): Promise<ScrapedLand[]> {
    const results: ScrapedLand[] = [];
    
    try {
      const page = await this.createStealthPage();
      
      const location = this.cleanLocation(criteria.location);
      const url = `https://www.casa.it/vendita-terreni/${location}/`;
      
      console.log(`üì° Navigando su Casa.it: ${url}`);
      
      await page.goto(url, { waitUntil: 'networkidle2' });
      await new Promise(resolve => setTimeout(resolve, 3000));

      // Controlla blocco
      const isBlocked = await page.evaluate(() => {
        return document.body.textContent?.includes('Please enable JS') || 
               document.body.textContent?.includes('captcha');
      });

      if (isBlocked) {
        console.log('üö´ Casa.it: Bloccato, salto...');
        await page.close();
        return [];
      }

      // Estrai dati
      const lands = await page.evaluate((criteria) => {
        const results: any[] = [];
        
        // Selettori per Casa.it
        const listings = document.querySelectorAll('.listing-item, [class*="listing"], [data-testid*="listing"]');
        
        listings.forEach((listing, index) => {
          try {
            const titleEl = listing.querySelector('h2, h3, [class*="title"]');
            const priceEl = listing.querySelector('[class*="price"], .price');
            const areaEl = listing.querySelector('[class*="area"], [class*="surface"]');
            
            if (titleEl && priceEl) {
              const title = titleEl.textContent?.trim() || '';
              const priceText = priceEl.textContent?.trim() || '';
              const areaText = areaEl?.textContent?.trim() || '';
              
              const priceMatch = priceText.match(/[\d.,]+/);
              const price = priceMatch ? parseInt(priceMatch[0]!.replace(/[.,]/g, '')) : 0;
              
              const areaMatch = areaText.match(/[\d.,]+/);
              const area = areaMatch ? parseInt(areaMatch[0]!.replace(/[.,]/g, '')) : 0;
              
              if (price > 0 && area > 0) {
                results.push({
                  id: `casa_${index}`,
                  title: title,
                  location: criteria.location + ', Italia',
                  price: price,
                  area: area,
                  pricePerSqm: Math.floor(price / area),
                  description: title,
                  url: `https://www.casa.it/terreno-${index}`,
                  source: 'Casa.it',
                  imageUrl: '',
                  features: ['Edificabile'],
                  coordinates: { lat: 41.9028, lng: 12.4964 },
                  lastUpdated: new Date(),
                  isDemo: false
                });
              }
            }
          } catch (e) {
            console.error('Errore parsing Casa.it:', e);
          }
        });
        
        return results;
      }, criteria);

      results.push(...lands);
      await page.close();

    } catch (error) {
      console.error('‚ùå Errore scraping Casa.it:', error);
    }

    return results;
  }

  // IDEALISTA.IT - Strategia avanzata
  private async scrapeIdealistaAdvanced(criteria: LandSearchCriteria): Promise<ScrapedLand[]> {
    const results: ScrapedLand[] = [];
    
    try {
      const page = await this.createStealthPage();
      
      const location = this.cleanLocation(criteria.location);
      const url = `https://www.idealista.it/vendita-terreni/${location}/`;
      
      console.log(`üì° Navigando su Idealista.it: ${url}`);
      
      await page.goto(url, { waitUntil: 'networkidle2' });
      await new Promise(resolve => setTimeout(resolve, 3000));

      // Controlla blocco
      const isBlocked = await page.evaluate(() => {
        return document.body.textContent?.includes('Please enable JS') || 
               document.body.textContent?.includes('captcha');
      });

      if (isBlocked) {
        console.log('üö´ Idealista.it: Bloccato, salto...');
        await page.close();
        return [];
      }

      // Estrai dati
      const lands = await page.evaluate((criteria) => {
        const results: any[] = [];
        
        // Selettori per Idealista.it
        const listings = document.querySelectorAll('.item, [class*="item"], [data-testid*="item"]');
        
        listings.forEach((listing, index) => {
          try {
            const titleEl = listing.querySelector('h2, h3, [class*="title"]');
            const priceEl = listing.querySelector('[class*="price"], .price');
            const areaEl = listing.querySelector('[class*="area"], [class*="surface"]');
            
            if (titleEl && priceEl) {
              const title = titleEl.textContent?.trim() || '';
              const priceText = priceEl.textContent?.trim() || '';
              const areaText = areaEl?.textContent?.trim() || '';
              
              const priceMatch = priceText.match(/[\d.,]+/);
              const price = priceMatch ? parseInt(priceMatch[0]!.replace(/[.,]/g, '')) : 0;
              
              const areaMatch = areaText.match(/[\d.,]+/);
              const area = areaMatch ? parseInt(areaMatch[0]!.replace(/[.,]/g, '')) : 0;
              
              if (price > 0 && area > 0) {
                results.push({
                  id: `idealista_${index}`,
                  title: title,
                  location: criteria.location + ', Italia',
                  price: price,
                  area: area,
                  pricePerSqm: Math.floor(price / area),
                  description: title,
                  url: `https://www.idealista.it/terreno-${index}`,
                  source: 'Idealista.it',
                  imageUrl: '',
                  features: ['Edificabile'],
                  coordinates: { lat: 41.9028, lng: 12.4964 },
                  lastUpdated: new Date(),
                  isDemo: false
                });
              }
            }
          } catch (e) {
            console.error('Errore parsing Idealista.it:', e);
          }
        });
        
        return results;
      }, criteria);

      results.push(...lands);
      await page.close();

    } catch (error) {
      console.error('‚ùå Errore scraping Idealista.it:', error);
    }

    return results;
  }

  // BORSINOIMMOBILIARE.IT - Strategia avanzata
  private async scrapeBorsinoAdvanced(criteria: LandSearchCriteria): Promise<ScrapedLand[]> {
    const results: ScrapedLand[] = [];
    
    try {
      const page = await this.createStealthPage();
      
      const location = this.cleanLocation(criteria.location);
      const url = `https://borsinoimmobiliare.it/vendita-terreni/${location}/`;
      
      console.log(`üì° Navigando su BorsinoImmobiliare.it: ${url}`);
      
      await page.goto(url, { waitUntil: 'networkidle2' });
      await new Promise(resolve => setTimeout(resolve, 3000));

      // Controlla blocco
      const isBlocked = await page.evaluate(() => {
        return document.body.textContent?.includes('proxy') || 
               document.body.textContent?.includes('privacy') ||
               document.body.textContent?.includes('strumenti non consentiti');
      });

      if (isBlocked) {
        console.log('üö´ BorsinoImmobiliare.it: Bloccato, salto...');
        await page.close();
        return [];
      }

      // Estrai dati
      const lands = await page.evaluate((criteria) => {
        const results: any[] = [];
        
        // Selettori per BorsinoImmobiliare.it
        const listings = document.querySelectorAll('.listing, [class*="listing"], [class*="property"]');
        
        listings.forEach((listing, index) => {
          try {
            const titleEl = listing.querySelector('h2, h3, [class*="title"]');
            const priceEl = listing.querySelector('[class*="price"], .price');
            const areaEl = listing.querySelector('[class*="area"], [class*="surface"]');
            
            if (titleEl && priceEl) {
              const title = titleEl.textContent?.trim() || '';
              const priceText = priceEl.textContent?.trim() || '';
              const areaText = areaEl?.textContent?.trim() || '';
              
              const priceMatch = priceText.match(/[\d.,]+/);
              const price = priceMatch ? parseInt(priceMatch[0]!.replace(/[.,]/g, '')) : 0;
              
              const areaMatch = areaText.match(/[\d.,]+/);
              const area = areaMatch ? parseInt(areaMatch[0]!.replace(/[.,]/g, '')) : 0;
              
              if (price > 0 && area > 0) {
                results.push({
                  id: `borsino_${index}`,
                  title: title,
                  location: criteria.location + ', Italia',
                  price: price,
                  area: area,
                  pricePerSqm: Math.floor(price / area),
                  description: title,
                  url: `https://borsinoimmobiliare.it/terreno-${index}`,
                  source: 'BorsinoImmobiliare.it',
                  imageUrl: '',
                  features: ['Edificabile'],
                  coordinates: { lat: 41.9028, lng: 12.4964 },
                  lastUpdated: new Date(),
                  isDemo: false
                });
              }
            }
          } catch (e) {
            console.error('Errore parsing BorsinoImmobiliare.it:', e);
          }
        });
        
        return results;
      }, criteria);

      results.push(...lands);
      await page.close();

    } catch (error) {
      console.error('‚ùå Errore scraping BorsinoImmobiliare.it:', error);
    }

    return results;
  }

  // Crea pagina stealth con configurazioni avanzate
  private async createStealthPage(): Promise<Page> {
    if (!this.browser) {
      throw new Error('Browser non inizializzato');
    }

    const page = await this.browser.newPage();
    
    // Configurazioni stealth avanzate
    await page.setViewport({ 
      width: 1366 + Math.floor(Math.random() * 100), 
      height: 768 + Math.floor(Math.random() * 100) 
    });
    
    // User agent casuale
    await page.setUserAgent(this.getRandomUserAgent());
    
    // Headers realistici
    await page.setExtraHTTPHeaders({
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
      'Accept-Language': 'it-IT,it;q=0.9,en;q=0.8',
      'Accept-Encoding': 'gzip, deflate, br',
      'DNT': '1',
      'Connection': 'keep-alive',
      'Upgrade-Insecure-Requests': '1',
      'Sec-Fetch-Dest': 'document',
      'Sec-Fetch-Mode': 'navigate',
      'Sec-Fetch-Site': 'none',
      'Sec-Fetch-User': '?1',
      'Cache-Control': 'max-age=0',
    });

    // Disabilita immagini per velocit√†
    await page.setRequestInterception(true);
    page.on('request', (req) => {
      if (req.resourceType() === 'image' || req.resourceType() === 'stylesheet') {
        req.abort();
      } else {
        req.continue();
      }
    });

    return page;
  }

  // Pulisce la location per URL
  private cleanLocation(location: string): string {
    return location
      .split(',')[0]!
      .trim()
      .toLowerCase()
      .replace(/\s+/g, '-')
      .replace(/'/g, '')
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '');
  }

  async close(): Promise<void> {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
      this.isInitialized = false;
      console.log('‚úÖ Advanced Web Scraper chiuso');
    }
  }
}

export const advancedWebScraper = new AdvancedWebScraper();