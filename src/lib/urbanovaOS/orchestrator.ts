// üöÄ URBANOVA OS - ORCHESTRATORE ENTERPRISE
// Orchestratore principale per Urbanova OS con architettura enterprise

// import { ChatMessage } from '@/types/chat';
import { UrbanovaOSClassificationEngine, ClassificationResult } from './ml/classificationEngine';
import { AdvancedConversationalEngine } from './conversational/advancedConversationalEngine';

// Definizione locale per evitare errori di import
interface ChatMessage {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  intelligentData?: any;
}
import { UrbanovaOSVectorStore } from './vector/vectorStore';
import { UrbanovaOSWorkflowEngine } from './workflow/workflowEngine';
import { UrbanovaOSPluginSystem } from './plugins/pluginSystem';
// import { userMemoryService } from '@/lib/userMemoryService';

// ============================================================================
// INTERFACCE TYPESCRIPT
// ============================================================================

// üß† SISTEMA DI MEMORIA CONVERSAZIONALE AVANZATO
export interface ConversationMemory {
  sessionId: string;
  userId: string;
  projectContext: ProjectData | null;
  previousAnalyses: AnalysisResult[];
  userPreferences: UserPreferences;
  conversationFlow: ConversationStep[];
  lastUpdate: Date;
  contextVersion: number;
}

export interface ProjectData {
  id: string;
  name: string;
  landArea: number;
  buildableArea: number;
  constructionCostPerSqm: number;
  purchasePrice: number;
  targetMargin: number;
  insuranceRate: number;
  type: string;
  parkingSpaces?: number;
  apartmentArea?: number;
  location?: string;
  status: 'draft' | 'active' | 'completed' | 'cancelled';
  createdAt: Date;
  updatedAt: Date;
}

export interface AnalysisResult {
  id: string;
  projectId: string;
  analysisType: 'feasibility' | 'simulation' | 'sensitivity' | 'optimization' | 'risk';
  parameters: Record<string, any>;
  results: Record<string, any>;
  timestamp: Date;
  confidence: number;
}

export interface UserPreferences {
  defaultMargin: number;
  preferredAnalysisType: string;
  riskTolerance: 'low' | 'medium' | 'high';
  marketFocus: string[];
  notificationSettings: Record<string, boolean>;
}

export interface ConversationStep {
  id: string;
  type: 'user_input' | 'system_response' | 'data_extraction' | 'analysis_generation' | 'simulation_request';
  content: string;
  timestamp: Date;
  metadata: Record<string, any>;
}

export interface UrbanovaOSRequest {
  sessionId: string;
  userId: string;
  userEmail: string;
  message: {
    id: string;
    content: string;
    type: 'user' | 'assistant';
    timestamp: Date;
  };
  conversationHistory: ChatMessage[];
  context: {
    userId: string;
    userEmail: string;
    history: ChatMessage[];
    projectId?: string;
    workspaceId?: string;
    environment: 'development' | 'staging' | 'production';
  };
  metadata: {
    source: 'chat' | 'api' | 'webhook' | 'scheduled';
    priority: 'low' | 'normal' | 'high' | 'critical';
    timeout: number;
    retryCount: number;
    maxRetries: number;
  };
}

export interface UrbanovaOSResponse {
  type: 'success' | 'error' | 'fallback' | 'escalation';
  response: string;
  confidence: number;
  metadata: {
    systemsUsed: string[];
    executionTime: number;
    memoryUsage: number;
    cpuUsage: number;
    pluginsExecuted: string[];
    workflowsTriggered: string[];
    classifications: ClassificationResult[];
    vectorMatches: VectorMatch[];
    fallbackReason?: string;
    escalationReason?: string;
  };
  suggestedActions: SuggestedAction[];
  nextSteps: NextStep[];
  systemStatus: SystemStatus;
  timestamp: Date;
}

// ClassificationResult √® importato da ./ml/classificationEngine

export interface VectorMatch {
  id: string;
  content: string;
  similarity: number;
  metadata: any; // Usa any per compatibilit√†
  relevanceScore: number;
  category: string;
  timestamp: Date;
}

export interface SuggestedAction {
  id: string;
  title: string;
  description: string;
  type: 'plugin' | 'workflow' | 'integration' | 'analysis' | 'automation';
  priority: 'low' | 'medium' | 'high';
  estimatedTime: number;
  requiredPermissions: string[];
  parameters: Record<string, any>;
}

export interface NextStep {
  id: string;
  title: string;
  description: string;
  type: 'immediate' | 'scheduled' | 'conditional' | 'manual';
  trigger: string;
  parameters: Record<string, any>;
}

export interface SystemStatus {
  overall: 'healthy' | 'degraded' | 'critical' | 'maintenance';
  components: {
    ml: 'healthy' | 'degraded' | 'critical';
    vector: 'healthy' | 'degraded' | 'critical';
    workflow: 'healthy' | 'degraded' | 'critical';
    plugins: 'healthy' | 'degraded' | 'critical';
  };
  performance: {
    avgResponseTime: number;
    successRate: number;
    errorRate: number;
    activeConnections: number;
    memoryUsage: number;
    cpuUsage: number;
  };
  lastHealthCheck: Date;
}

export interface Entity {
  name: string;
  type: string;
  confidence: number;
  startIndex: number;
  endIndex: number;
  metadata: Record<string, any>;
}

// ============================================================================
// URBANOVA OS ORCHESTRATORE
// ============================================================================

// üõ°Ô∏è OS PROTECTION - Importa protezione CSS per l'orchestrator
import '@/lib/osProtection';

export class UrbanovaOSOrchestrator {
  private classificationEngine: UrbanovaOSClassificationEngine;
  private vectorStore: UrbanovaOSVectorStore;
  private workflowEngine: UrbanovaOSWorkflowEngine;
  private pluginSystem: UrbanovaOSPluginSystem;
  private conversationalEngine: AdvancedConversationalEngine;
  private performanceMonitor: PerformanceMonitor;
  private healthChecker: HealthChecker;
  private eventBus: EventBus;
  private cacheManager: CacheManager;
  private securityManager: SecurityManager;
  private metricsCollector: MetricsCollector;
  
  // üß† SISTEMA DI MEMORIA CONVERSAZIONALE
  private conversationMemories: Map<string, ConversationMemory> = new Map();
  private projectContexts: Map<string, ProjectData> = new Map();

  constructor() {
    this.classificationEngine = new UrbanovaOSClassificationEngine();
    this.vectorStore = new UrbanovaOSVectorStore();
    this.workflowEngine = new UrbanovaOSWorkflowEngine();
    this.pluginSystem = new UrbanovaOSPluginSystem();
    this.conversationalEngine = new AdvancedConversationalEngine();
    this.performanceMonitor = new PerformanceMonitor();
    this.healthChecker = new HealthChecker();
    this.eventBus = new EventBus();
    this.cacheManager = new CacheManager();
    this.securityManager = new SecurityManager();
    this.metricsCollector = new MetricsCollector();
    
    this.initializeSystems();
    this.startMonitoring();
    
    console.log('üöÄ [UrbanovaOS Orchestrator] Inizializzato');
  }

  // ============================================================================
  // METODO PRINCIPALE
  // ============================================================================

  /**
   * üéØ METODO PRINCIPALE: Processa richiesta completa
   */
  async processRequest(request: UrbanovaOSRequest): Promise<UrbanovaOSResponse> {
    const startTime = Date.now();
    console.log('üöÄ [UrbanovaOS Orchestrator] Processando richiesta:', {
      sessionId: request.sessionId,
      userId: request.userId,
      messageId: request.message.id,
      priority: request.metadata.priority
    });
    
    // üöÄ OTTIMIZZAZIONE: Timeout per evitare richieste troppo lunghe
    const timeoutPromise = new Promise<never>((_, reject) => {
      setTimeout(() => reject(new Error('Orchestrator timeout')), 20000); // 20s timeout
    });
    
    const processPromise = this.processRequestInternal(request);
    
    return await Promise.race([processPromise, timeoutPromise]);
  }

  /**
   * üöÄ METODO INTERNO: Processa richiesta senza timeout esterno
   */
  private async processRequestInternal(request: UrbanovaOSRequest): Promise<UrbanovaOSResponse> {
    const startTime = Date.now();
    
    try {
      // üöÄ OTTIMIZZAZIONE AGGRESSIVA: Esecuzione parallela per performance
      console.log('‚ö° [UrbanovaOS Orchestrator] Avviando processamento parallelo ottimizzato');
      
      // üß† GESTIONE MEMORIA CONVERSAZIONALE
      console.log('üîÑ [DEBUG] STEP 1: Recuperando memoria conversazionale...');
      const memory = this.getOrCreateMemory(request.sessionId, request.userId);
      
      console.log('‚úÖ [DEBUG] STEP 1 COMPLETATO: Memoria recuperata:', {
        sessionId: request.sessionId,
        hasProjectContext: !!memory.projectContext,
        projectName: memory.projectContext?.name,
        conversationSteps: memory.conversationFlow.length,
        previousAnalyses: memory.previousAnalyses.length
      });
      
      // Rileva cambiamenti nel contesto conversazionale
      const contextChanges = this.detectContextChanges(request.message.content, memory);
      console.log('üîÑ [DEBUG] Cambiamenti rilevati:', {
        hasChanges: contextChanges.hasChanges,
        changes: contextChanges.changes,
        newProjectData: contextChanges.newProjectData
      });
      
      if (contextChanges.hasChanges && contextChanges.newProjectData) {
        console.log('üîÑ [DEBUG] Applicando cambiamenti al contesto...');
        this.handleContextChanges(request.sessionId, contextChanges.changes, contextChanges.newProjectData);
      }
      
      // Aggiungi step conversazione
      this.addConversationStep(request.sessionId, {
        type: 'user_input',
        content: request.message.content,
        metadata: {
          userId: request.userId,
          messageId: request.message.id,
          contextChanges: contextChanges.changes
        }
      });
      
      // 1. VALIDAZIONE E SICUREZZA (parallela con classificazione)
      console.log('üîÑ [DEBUG] STEP 2: Avviando validazione e classificazione...');
      const [validationResult, classification] = await Promise.all([
        this.validateAndSecureRequest(request),
        this.classifyRequest(request)
      ]);
      
      console.log('‚úÖ [DEBUG] STEP 2 COMPLETATO: Validazione e classificazione:', {
        validationPassed: validationResult.isValid,
        classificationType: classification.type,
        confidence: classification.confidence
      });
      
      // 2. RICERCA E WORKFLOW IN PARALLELO (se classification confidence √® alta)
      let vectorMatches: any[] = [];
      let workflowResults: any[] = [];
      
      if (classification.confidence > 0.7) {
        // Alta confidence: esegui tutto in parallelo
        [vectorMatches, workflowResults] = await Promise.all([
          this.searchVectorStore(request, classification),
          this.executeWorkflows(request, classification, [])
        ]);
      } else {
        // Bassa confidence: esegui sequenzialmente per sicurezza
        vectorMatches = await this.searchVectorStore(request, classification);
        workflowResults = await this.executeWorkflows(request, classification, vectorMatches);
      }
      
      // 3. PLUGIN E GENERAZIONE RISPOSTA IN PARALLELO
      const [pluginResults, response] = await Promise.all([
        this.executePlugins(request, classification, vectorMatches),
        this.generateResponse(request, classification, vectorMatches, workflowResults, [])
      ]);
      
      // 4. AGGIORNAMENTO METRICHE E NOTIFICA (parallela, non bloccante)
      Promise.all([
        this.updateMetrics(request, response, Date.now() - startTime),
        this.notifyEvents(request, response)
      ]).catch(error => {
        console.warn('‚ö†Ô∏è [UrbanovaOS Orchestrator] Errore non critico in metriche/notifiche:', error);
      });
      
      console.log('‚úÖ [UrbanovaOS Orchestrator] Richiesta processata con successo (parallelo):', {
        sessionId: request.sessionId,
        executionTime: Date.now() - startTime,
        confidence: response.confidence,
        systemsUsed: response.metadata.systemsUsed.length,
        parallelExecution: true
      });

      return response;

    } catch (error) {
      console.error('‚ùå [UrbanovaOS Orchestrator] Errore processamento richiesta:', error);
      return this.handleError(request, error, Date.now() - startTime);
    }
  }

  // ============================================================================
  // METODI PRIVATI
  // ============================================================================

  /**
   * üß† ANALISI GOAL-ORIENTED INTELLIGENTE
   * Analizza il messaggio dell'utente per capire l'intento e estrarre dati
   * Funziona anche con messaggi aggressivi, confusi o con errori di battitura
   */
  private analyzeUserGoal(message: string, memory: ConversationMemory): {
    isFeasibilityRequest: boolean;
    extractedData: any;
    confidence: number;
    goalType: string;
    reasoning: string;
  } {
    const text = message.toLowerCase();
    let confidence = 0;
    let goalType = 'unknown';
    let reasoning = '';
    const extractedData: any = {};

    // üéØ ANALISI SEMANTICA AVANZATA
    
    // 1. RILEVA INTENTI DI FATTIBILIT√Ä (pattern flessibili)
    const feasibilityIndicators = [
      // Parole chiave dirette
      'analisi di fattibilit√†', 'analisi fattibilit√†', 'studio di fattibilit√†', 'studio fattibilit√†',
      'business plan', 'businessplan', 'piano di business',
      'fattibilit√†', 'feasibility', 'valutazione economica',
      
      // Obiettivi finanziari
      'marginalit√†', 'margine', 'profitto', 'roi', 'rendimento',
      'prezzo di vendita', 'prezzo vendita', 'quanto vendere',
      'costo costruzione', 'costo totale', 'investimento',
      
      // Dati tecnici
      'terreno', 'mq', 'metri quadrati', 'm¬≤', 'superficie',
      'euro per metro', 'euro/mq', 'euro al metro',
      'appartamento', 'bifamiliare', 'villa', 'casa',
      
      // Azioni richieste
      'crea', 'fai', 'calcola', 'dimmi', 'aiutami', 'voglio',
      'quanto costa', 'quanto devo', 'a che prezzo',
      
      // Modifiche a progetti esistenti
      'cambia', 'modifica', 'invece di', 'metti', 'ricalcola', 'aggiorna'
    ];

    // 2. RILEVA INTENTI DI SENSIBILIT√Ä
    const sensitivityIndicators = [
      'sensibilit√†', 'sensitivity', 'variazione', 'scenario',
      'cosa succede se', 'e se', 'simulazione', 'simula',
      'pessimistico', 'ottimistico', 'conservativo'
    ];

    // 3. RILEVA INTENTI DI RISCHIO
    const riskIndicators = [
      'rischio', 'risk', 'pericolo', 'problema', 'difficolt√†',
      'mitigazione', 'protezione', 'sicurezza'
    ];

    // 4. RILEVA INTENTI DI MERCATO
    const marketIndicators = [
      'mercato', 'market', 'prezzi', 'concorrenza', 'competizione',
      'benchmark', 'confronto', 'analisi mercato'
    ];

    // 5. RILEVA INTENTI DI VALUTAZIONE
    const valuationIndicators = [
      'valutazione', 'valuation', 'valore', 'irr', 'npv', 'van',
      'payback', 'ritorno investimento', 'investimento'
    ];

    // üß† CALCOLA CONFIDENCE PER OGNI INTENTO
    let feasibilityScore = 0;
    let sensitivityScore = 0;
    let riskScore = 0;
    let marketScore = 0;
    let valuationScore = 0;

    // Conta indicatori per ogni categoria
    feasibilityIndicators.forEach(indicator => {
      if (text.includes(indicator)) {
        feasibilityScore += 1;
        confidence += 0.1;
      }
    });

    sensitivityIndicators.forEach(indicator => {
      if (text.includes(indicator)) {
        sensitivityScore += 1;
        confidence += 0.1;
      }
    });

    riskIndicators.forEach(indicator => {
      if (text.includes(indicator)) {
        riskScore += 1;
        confidence += 0.1;
      }
    });

    marketIndicators.forEach(indicator => {
      if (text.includes(indicator)) {
        marketScore += 1;
        confidence += 0.1;
      }
    });

    valuationIndicators.forEach(indicator => {
      if (text.includes(indicator)) {
        valuationScore += 1;
        confidence += 0.1;
      }
    });

    // üéØ DETERMINA GOAL TYPE E CONFIDENCE
    const maxScore = Math.max(feasibilityScore, sensitivityScore, riskScore, marketScore, valuationScore);
    
    if (feasibilityScore === maxScore && feasibilityScore > 0) {
      goalType = 'feasibility';
      confidence = Math.min(confidence, 0.9);
      reasoning = `Rilevati ${feasibilityScore} indicatori di fattibilit√†`;
    } else if (sensitivityScore === maxScore && sensitivityScore > 0) {
      goalType = 'sensitivity';
      confidence = Math.min(confidence, 0.8);
      reasoning = `Rilevati ${sensitivityScore} indicatori di sensibilit√†`;
    } else if (riskScore === maxScore && riskScore > 0) {
      goalType = 'risk';
      confidence = Math.min(confidence, 0.8);
      reasoning = `Rilevati ${riskScore} indicatori di rischio`;
    } else if (marketScore === maxScore && marketScore > 0) {
      goalType = 'market';
      confidence = Math.min(confidence, 0.8);
      reasoning = `Rilevati ${marketScore} indicatori di mercato`;
    } else if (valuationScore === maxScore && valuationScore > 0) {
      goalType = 'valuation';
      confidence = Math.min(confidence, 0.8);
      reasoning = `Rilevati ${valuationScore} indicatori di valutazione`;
    }

    // üîç ESTRAZIONE DATI INTELLIGENTE (anche da messaggi confusi)
    this.extractDataIntelligently(message, extractedData);
    
    console.log('üîç [DEEP DEBUG] Dati estratti dal sistema intelligente:', {
      message: message.substring(0, 100),
      extractedData: extractedData,
      hasBuildableArea: !!extractedData.buildableArea,
      hasConstructionCost: !!extractedData.constructionCostPerSqm,
      hasPurchasePrice: !!extractedData.purchasePrice,
      hasTargetMargin: !!extractedData.targetMargin
    });

    // üß† BOOST CONFIDENCE SE ABBIAMO DATI ESTRATTI
    if (extractedData.buildableArea || extractedData.constructionCostPerSqm || extractedData.purchasePrice) {
      confidence = Math.min(confidence + 0.3, 0.95);
      reasoning += ` + dati estratti (${Object.keys(extractedData).filter(k => extractedData[k]).length} parametri)`;
    }

    // üß† BOOST CONFIDENCE SE ABBIAMO CONTESTO PROGETTO
    if (memory.projectContext) {
      confidence = Math.min(confidence + 0.2, 0.95);
      reasoning += ` + contesto progetto esistente`;
    }

    // üéØ DETERMINA SE √à RICHIESTA FATTIBILIT√Ä
    const isFeasibilityRequest = goalType === 'feasibility' || 
                                (goalType === 'unknown' && confidence > 0.3) ||
                                (extractedData.buildableArea && extractedData.constructionCostPerSqm);

    return {
      isFeasibilityRequest,
      extractedData,
      confidence: Math.round(confidence * 100) / 100,
      goalType,
      reasoning
    };
  }

  /**
   * üîç ESTRAZIONE DATI INTELLIGENTE
   * Estrae dati anche da messaggi confusi, aggressivi o con errori di battitura
   */
  private extractDataIntelligently(message: string, extractedData: any): void {
    const text = message.toLowerCase();

    // üè∑Ô∏è NOME PROGETTO (pattern flessibili)
    const namePatterns = [
      /nome del progetto[:\s]*([^,.\n]+)/i,
      /progetto[:\s]*([^,.\n]+)/i,
      /villa\s+([^,.\n]+)/i,
      /([^,.\n]+)\s*terreno/i,
      /studio di fattibilit√†[:\s]*([^,.\n]+)/i,
      /analisi di fattibilit√†[:\s]*([^,.\n]+)/i,
      /([A-Za-z][^,.\n]*?)\s*terreno/i, // Cattura nomi prima di "terreno"
      /([A-Za-z][^,.\n]*?)\s*progetto/i  // Cattura nomi prima di "progetto"
    ];

    for (const pattern of namePatterns) {
      const match = message.match(pattern);
      if (match && match[1] && match[1].length > 2) {
        extractedData.name = match[1].trim();
        break;
      }
    }

    // üìè AREA TERRENO (pattern flessibili)
    const areaPatterns = [
      /(\d+)\s*(?:metri quadrati|mq|m¬≤)/i,
      /terreno.*?(\d+)\s*(?:metri quadrati|mq|m¬≤)/i,
      /(\d+)\s*(?:metri quadrati|mq|m¬≤).*?terreno/i
    ];

    for (const pattern of areaPatterns) {
      const match = message.match(pattern);
      if (match) {
        extractedData.landArea = parseInt(match[1]);
        extractedData.buildableArea = extractedData.landArea; // Default se non specificato
        break;
      }
    }

    // üèóÔ∏è COSTO COSTRUZIONE (pattern flessibili)
    const costPatterns = [
      /(\d+)\s*euro\s*per\s*metro/i,
      /(\d+)\s*euro\/mq/i,
      /(\d+)\s*euro\s*al\s*metro/i,
      /costruzion[:\s]*(\d+)\s*euro/i,
      /costruzione[:\s]*(\d+)\s*euro/i,
      /costruzion[:\s]*(\d+)/i,
      /costruzione[:\s]*(\d+)/i,
      /costo\s*costruzione[:\s]*(\d+)/i,
      /costo[:\s]*(\d+)\s*euro/i
    ];

    for (const pattern of costPatterns) {
      const match = message.match(pattern);
      if (match) {
        extractedData.constructionCostPerSqm = parseInt(match[1]);
        break;
      }
    }

    // üí∞ PREZZO ACQUISTO (pattern flessibili)
    const pricePatterns = [
      /acquisto[:\s]*(\d+(?:\.\d+)?)\s*(?:mila|k|000)?\s*euro/i,
      /acquisto[:\s]*(\d+(?:\.\d+)?)/i,
      /(\d+(?:\.\d+)?)\s*(?:mila|k|000)?\s*euro.*?acquisto/i,
      /terreno[:\s]*(\d+(?:\.\d+)?)\s*(?:mila|k|000)?\s*euro/i,
      /(\d+(?:\.\d+)?)\s*(?:mila|k|000)?\s*euro.*?terreno/i
    ];

    for (const pattern of pricePatterns) {
      const match = message.match(pattern);
      if (match) {
        let price = parseFloat(match[1]);
        if (text.includes('mila') || text.includes('k')) {
          price *= 1000;
        }
        extractedData.purchasePrice = price;
        break;
      }
    }

    // üéØ MARGINE TARGET (pattern flessibili)
    const marginPatterns = [
      /target[:\s]*(\d+(?:\.\d+)?)\s*%/i,
      /marginalit√†[:\s]*(\d+(?:\.\d+)?)\s*%/i,
      /margine[:\s]*(\d+(?:\.\d+)?)\s*%/i,
      /(\d+(?:\.\d+)?)\s*%.*?target/i,
      /(\d+(?:\.\d+)?)\s*%.*?margine/i
    ];

    for (const pattern of marginPatterns) {
      const match = message.match(pattern);
      if (match) {
        extractedData.targetMargin = parseFloat(match[1]) / 100;
        break;
      }
    }

    // üè¢ TIPO PROGETTO
    if (text.includes('bifamiliare')) extractedData.type = 'bifamiliare';
    else if (text.includes('villa')) extractedData.type = 'villa';
    else if (text.includes('appartamento')) extractedData.type = 'appartamento';
    else if (text.includes('residenziale')) extractedData.type = 'residenziale';

    // üìç LOCATION
    const locationPatterns = [
      /a\s+([A-Za-z\s]+?)(?:\s|,|$)/i,
      /a\s+([A-Za-z\s]+?)(?:\s|,|$)/i
    ];

    for (const pattern of locationPatterns) {
      const match = message.match(pattern);
      if (match && match[1].length > 2) {
        extractedData.location = match[1].trim();
        break;
      }
    }

    // üöó PARCHEGGI
    const parkingMatch = message.match(/(\d+)\s*parcheggi/i);
    if (parkingMatch) {
      extractedData.parkingSpaces = parseInt(parkingMatch[1]);
    }

    // üè† AREA APPARTAMENTO
    const apartmentMatch = message.match(/(\d+)\s*metri.*?appartamento/i);
    if (apartmentMatch) {
      extractedData.apartmentArea = parseInt(apartmentMatch[1]);
    }
  }

  // üß† GESTIONE MEMORIA CONVERSAZIONALE
  private getOrCreateMemory(sessionId: string, userId: string): ConversationMemory {
    if (!this.conversationMemories.has(sessionId)) {
      const memory: ConversationMemory = {
        sessionId,
        userId,
        projectContext: null,
        previousAnalyses: [],
        userPreferences: {
          defaultMargin: 0.25,
          preferredAnalysisType: 'feasibility',
          riskTolerance: 'medium',
          marketFocus: ['residential'],
          notificationSettings: {}
        },
        conversationFlow: [],
        lastUpdate: new Date(),
        contextVersion: 1
      };
      this.conversationMemories.set(sessionId, memory);
      console.log('üß† [UrbanovaOS] Memoria conversazionale creata per sessione:', sessionId);
    }
    return this.conversationMemories.get(sessionId)!;
  }

  private updateProjectContext(sessionId: string, projectData: ProjectData): void {
    const memory = this.getOrCreateMemory(sessionId, '');
    memory.projectContext = projectData;
    memory.lastUpdate = new Date();
    memory.contextVersion++;
    
    // Salva anche nel contesto progetti
    this.projectContexts.set(projectData.id, projectData);
    
    // üß† DEBUG: Verifica che la memoria sia stata salvata
    console.log('üèóÔ∏è [DEBUG] Contesto progetto aggiornato:', {
      sessionId,
      projectId: projectData.id,
      projectName: projectData.name,
      contextVersion: memory.contextVersion,
      memorySize: this.conversationMemories.size,
      projectContextsSize: this.projectContexts.size
    });
    
    // Verifica che la memoria sia stata effettivamente salvata
    const savedMemory = this.conversationMemories.get(sessionId);
    console.log('üèóÔ∏è [DEBUG] Memoria salvata verificata:', {
      hasMemory: !!savedMemory,
      hasProjectContext: !!savedMemory?.projectContext,
      projectName: savedMemory?.projectContext?.name
    });
  }

  private addConversationStep(sessionId: string, step: Omit<ConversationStep, 'id' | 'timestamp'>): void {
    const memory = this.getOrCreateMemory(sessionId, '');
    const conversationStep: ConversationStep = {
      id: `step_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp: new Date(),
      ...step
    };
    
    memory.conversationFlow.push(conversationStep);
    memory.lastUpdate = new Date();
    
    // Mantieni solo gli ultimi 50 step per evitare overflow di memoria
    if (memory.conversationFlow.length > 50) {
      memory.conversationFlow = memory.conversationFlow.slice(-50);
    }
    
    console.log('üí¨ [UrbanovaOS] Step conversazione aggiunto:', {
      sessionId,
      stepType: step.type,
      stepId: conversationStep.id
    });
  }

  private addAnalysisResult(sessionId: string, analysis: AnalysisResult): void {
    const memory = this.getOrCreateMemory(sessionId, '');
    memory.previousAnalyses.push(analysis);
    memory.lastUpdate = new Date();
    
    // Mantieni solo gli ultimi 20 analisi
    if (memory.previousAnalyses.length > 20) {
      memory.previousAnalyses = memory.previousAnalyses.slice(-20);
    }
    
    console.log('üìä [UrbanovaOS] Risultato analisi aggiunto:', {
      sessionId,
      analysisType: analysis.analysisType,
      projectId: analysis.projectId
    });
  }

  private detectContextChanges(currentMessage: string, memory: ConversationMemory): {
    hasChanges: boolean;
    changes: string[];
    newProjectData?: Partial<ProjectData>;
  } {
    const changes: string[] = [];
    let newProjectData: Partial<ProjectData> = {};
    
    // Se non c'√® contesto progetto, controlla se il messaggio contiene dati di progetto
    if (!memory.projectContext) {
      console.log('üß† [DEBUG] Nessun contesto progetto esistente, controllando se il messaggio contiene dati...');
      // Estrai dati dal messaggio per vedere se possiamo creare un contesto
      const feasibilityData = this.extractFeasibilityData(currentMessage);
      console.log('üß† [DEBUG] Dati estratti dal messaggio:', feasibilityData);
      
      if (feasibilityData.isFeasibilityRequest || feasibilityData.name || feasibilityData.buildableArea || feasibilityData.constructionCostPerSqm) {
        console.log('üß† [DEBUG] Messaggio contiene richiesta di analisi di fattibilit√†, lasciando gestione al sistema normale');
        return { hasChanges: false, changes: [] }; // Lascia che il sistema normale gestisca
      }
      
      // Controlla se √® una richiesta di modifica senza contesto
      if (this.isModificationRequest(currentMessage)) {
        console.log('üß† [DEBUG] Rilevata richiesta di modifica senza contesto progetto');
        return { hasChanges: false, changes: [] };
      }
      
      return { hasChanges: false, changes: [] };
    }
    
    const currentProject = memory.projectContext;
    
    console.log('üß† [DEBUG] Contesto progetto esistente:', {
      name: currentProject.name,
      buildableArea: currentProject.buildableArea,
      constructionCostPerSqm: currentProject.constructionCostPerSqm,
      purchasePrice: currentProject.purchasePrice,
      targetMargin: currentProject.targetMargin
    });
    
    // Rileva cambiamenti nel nome progetto
    const namePatterns = [
      /non voglio pi√π.*?([^,.\n]+)/i,
      /cambia.*?nome.*?([^,.\n]+)/i,
      /chiama.*?([^,.\n]+)/i
    ];
    
    for (const pattern of namePatterns) {
      const match = currentMessage.match(pattern);
      if (match) {
        console.log('üß† [DEBUG] Rilevato cambiamento nome progetto:', match[1]);
        changes.push('nome_progetto');
        newProjectData.name = match[1].trim();
        break;
      }
    }
    
    // Rileva cambiamenti nel tipo progetto
    if (currentMessage.match(/monofamiliare/i) && currentProject.type !== 'monofamiliare') {
      changes.push('tipo_progetto');
      newProjectData.type = 'monofamiliare';
    }
    if (currentMessage.match(/bifamiliare/i) && currentProject.type !== 'bifamiliare') {
      changes.push('tipo_progetto');
      newProjectData.type = 'bifamiliare';
    }
    
    // Rileva cambiamenti nei costi - pattern pi√π robusti
    const costPatterns = [
      /(\d+)\s*euro per metro quadrato/i,
      /costo.*?(\d+)\s*euro\/mq/i,
      /costo.*?(\d+)\s*euro per mq/i,
      /(\d+)\s*euro\/m¬≤/i,
      /costo.*?(\d+)\s*euro\/m¬≤/i,
      /metti\s+(\d+)\s*euro/i,
      /invece di.*?(\d+)\s*euro/i
    ];
    
    for (const pattern of costPatterns) {
      const match = currentMessage.match(pattern);
      if (match) {
        const newCost = parseInt(match[1]);
        console.log('üß† [DEBUG] Rilevato cambiamento costo:', {
          newCost,
          currentCost: currentProject.constructionCostPerSqm,
          pattern: pattern.toString()
        });
        if (newCost !== currentProject.constructionCostPerSqm) {
          changes.push('costo_costruzione');
          newProjectData.constructionCostPerSqm = newCost;
          console.log('üß† [DEBUG] Cambiamento costo applicato:', newCost);
        }
        break;
      }
    }
    
    // Rileva cambiamenti nel prezzo acquisto - pattern pi√π robusti
    const pricePatterns = [
      /acquisto.*?(\d+(?:\.\d+)?)\s*euro/i,
      /(\d+(?:\.\d+)?)\s*euro.*?acquisto/i,
      /prezzo acquisto.*?(\d+(?:\.\d+)?)\s*euro/i,
      /acquisto.*?(\d+(?:\.\d+)?)\s*‚Ç¨/i
    ];
    
    for (const pattern of pricePatterns) {
      const match = currentMessage.match(pattern);
      if (match) {
        const newPrice = parseFloat(match[1].replace('.', ''));
        if (newPrice !== currentProject.purchasePrice) {
          changes.push('prezzo_acquisto');
          newProjectData.purchasePrice = newPrice;
        }
        break;
      }
    }
    
    // Rileva cambiamenti nell'area costruibile
    const areaPatterns = [
      /area costruibile.*?(\d+)\s*mq/i,
      /costruibile.*?(\d+)\s*mq/i,
      /(\d+)\s*mq.*?costruibile/i
    ];
    
    for (const pattern of areaPatterns) {
      const match = currentMessage.match(pattern);
      if (match) {
        const newArea = parseInt(match[1]);
        if (newArea !== currentProject.buildableArea) {
          changes.push('area_costruibile');
          newProjectData.buildableArea = newArea;
        }
        break;
      }
    }
    
    // Rileva cambiamenti nel target marginalit√†
    const marginPatterns = [
      /target.*?(\d+(?:\.\d+)?)%/i,
      /marginalit√†.*?(\d+(?:\.\d+)?)%/i,
      /(\d+(?:\.\d+)?)%\s*di marginalit√†/i
    ];
    
    for (const pattern of marginPatterns) {
      const match = currentMessage.match(pattern);
      if (match) {
        const newMargin = parseFloat(match[1]) / 100;
        if (newMargin !== currentProject.targetMargin) {
          changes.push('target_marginalit√†');
          newProjectData.targetMargin = newMargin;
        }
        break;
      }
    }
    
    return {
      hasChanges: changes.length > 0,
      changes,
      newProjectData: Object.keys(newProjectData).length > 0 ? newProjectData : undefined
    };
  }

  private handleContextChanges(sessionId: string, changes: string[], newProjectData: Partial<ProjectData>): void {
    const memory = this.getOrCreateMemory(sessionId, '');
    
    if (memory.projectContext && newProjectData) {
      // Aggiorna il progetto esistente
      const updatedProject: ProjectData = {
        ...memory.projectContext,
        ...newProjectData,
        updatedAt: new Date()
      };
      
      this.updateProjectContext(sessionId, updatedProject);
      
      console.log('üîÑ [UrbanovaOS] Contesto progetto aggiornato per cambiamenti:', {
        sessionId,
        changes,
        updatedFields: Object.keys(newProjectData)
      });
    }
  }

  private isModificationRequest(message: string): boolean {
    const lowerMessage = message.toLowerCase();
    
    // Pattern per richieste di modifica
    const modificationPatterns = [
      /metti\s+\d+/i,
      /invece di/i,
      /cambia/i,
      /modifica/i,
      /aggiorna/i,
      /ricalcola/i,
      /non voglio pi√π/i,
      /aspetta/i
    ];
    
    return modificationPatterns.some(pattern => pattern.test(lowerMessage));
  }

  // üéØ GESTIONE SIMULAZIONI MULTIPLE
  private detectSimulationRequest(message: string): {
    isSimulation: boolean;
    simulationType: 'sensitivity' | 'what_if' | 'optimization' | 'comparison' | 'multiple' | 'risk_analysis' | 'market_benchmark' | 'competitive_analysis' | 'investment_valuation' | 'complex_workflow' | 'multi_step_analysis' | 'intelligent_planning' | 'strategic_consulting';
    parameters: Record<string, any>;
  } {
    const lowerMessage = message.toLowerCase();
    
    // Rileva simulazioni di sensibilit√†
    if (lowerMessage.includes('cosa succede se') || lowerMessage.includes('se il costo') || 
        lowerMessage.includes('se il prezzo') || lowerMessage.includes('aumenta del') || 
        lowerMessage.includes('scende del') || lowerMessage.includes('diminuisce del')) {
      return {
        isSimulation: true,
        simulationType: 'sensitivity',
        parameters: this.extractSensitivityParameters(message)
      };
    }
    
    // Rileva what-if analysis
    if (lowerMessage.includes('dimmi la marginalit√† se') || lowerMessage.includes('che marginalit√†') ||
        lowerMessage.includes('a che prezzo devo vendere') || lowerMessage.includes('per garantire')) {
      return {
        isSimulation: true,
        simulationType: 'what_if',
        parameters: this.extractWhatIfParameters(message)
      };
    }
    
    // Rileva ottimizzazione
    if (lowerMessage.includes('ottimizza') || lowerMessage.includes('massimizza') || 
        lowerMessage.includes('migliore strategia') || lowerMessage.includes('come posso')) {
      return {
        isSimulation: true,
        simulationType: 'optimization',
        parameters: {}
      };
    }
    
    // Rileva confronti
    if (lowerMessage.includes('confronta') || lowerMessage.includes('rispetto a') || 
        lowerMessage.includes('vs') || lowerMessage.includes('differenza')) {
      return {
        isSimulation: true,
        simulationType: 'comparison',
        parameters: {}
      };
    }
    
    // Rileva simulazioni multiple
    if (lowerMessage.includes('fammi') && (lowerMessage.includes('scenari') || lowerMessage.includes('simulazioni'))) {
      return {
        isSimulation: true,
        simulationType: 'multiple',
        parameters: this.extractMultipleScenariosParameters(message)
      };
    }

    // üöÄ FASE 4: WORKFLOW INTELLIGENTE - Riconoscimento richieste complesse
    
    // Rileva workflow complessi multi-step
    if (lowerMessage.includes('fammi un piano completo') || lowerMessage.includes('sviluppa una strategia') ||
        lowerMessage.includes('crea un workflow') || lowerMessage.includes('processo completo') ||
        lowerMessage.includes('piano di sviluppo') || lowerMessage.includes('roadmap strategica')) {
      return {
        isSimulation: true,
        simulationType: 'complex_workflow',
        parameters: this.extractComplexWorkflowParameters(message)
      };
    }

    // Rileva analisi multi-step
    if (lowerMessage.includes('analisi completa') || lowerMessage.includes('studio approfondito') ||
        lowerMessage.includes('valutazione integrale') || lowerMessage.includes('assessment completo') ||
        lowerMessage.includes('analisi dettagliata') || lowerMessage.includes('studio dettagliato')) {
      return {
        isSimulation: true,
        simulationType: 'multi_step_analysis',
        parameters: this.extractMultiStepAnalysisParameters(message)
      };
    }

    // Rileva pianificazione intelligente
    if (lowerMessage.includes('pianifica') || lowerMessage.includes('organizza') ||
        lowerMessage.includes('struttura') || lowerMessage.includes('definisci') ||
        lowerMessage.includes('progetta') || lowerMessage.includes('architettura')) {
      return {
        isSimulation: true,
        simulationType: 'intelligent_planning',
        parameters: this.extractIntelligentPlanningParameters(message)
      };
    }

    // Rileva consulenza strategica
    if (lowerMessage.includes('consulenza') || lowerMessage.includes('consiglio') ||
        lowerMessage.includes('raccomandazione') || lowerMessage.includes('suggerimento') ||
        lowerMessage.includes('guida') || lowerMessage.includes('supporto strategico')) {
      return {
        isSimulation: true,
        simulationType: 'strategic_consulting',
        parameters: this.extractStrategicConsultingParameters(message)
      };
    }
    
    // Rileva analisi di sensibilit√† avanzata
    if (lowerMessage.includes('sensibilit√†') || lowerMessage.includes('sensibilita') || 
        lowerMessage.includes('variazione') || lowerMessage.includes('variazioni') ||
        lowerMessage.includes('cosa succede se') || lowerMessage.includes('se il costo') ||
        lowerMessage.includes('se il prezzo') || lowerMessage.includes('aumenta del') ||
        lowerMessage.includes('diminuisce del') || lowerMessage.includes('scende del')) {
      return {
        isSimulation: true,
        simulationType: 'sensitivity',
        parameters: this.extractSensitivityParameters(message)
      };
    }
    
    // Rileva what-if analysis avanzata
    if (lowerMessage.includes('dimmi la marginalit√† se') || lowerMessage.includes('che marginalit√†') ||
        lowerMessage.includes('a che prezzo devo vendere') || lowerMessage.includes('per garantire') ||
        lowerMessage.includes('prezzo per ottenere') || lowerMessage.includes('marginalit√† del') ||
        lowerMessage.includes('se vendo a') || lowerMessage.includes('se il prezzo di vendita')) {
      return {
        isSimulation: true,
        simulationType: 'what_if',
        parameters: this.extractWhatIfParameters(message)
      };
    }
    
    // Rileva ottimizzazione avanzata
    if (lowerMessage.includes('ottimizza') || lowerMessage.includes('massimizza') || 
        lowerMessage.includes('migliore strategia') || lowerMessage.includes('come posso') ||
        lowerMessage.includes('strategia di vendita') || lowerMessage.includes('fasi di vendita') ||
        lowerMessage.includes('massimizzare il profitto') || lowerMessage.includes('ottimizzazione')) {
      return {
        isSimulation: true,
        simulationType: 'optimization',
        parameters: {}
      };
    }
    
    // Rileva confronti avanzati
    if (lowerMessage.includes('confronta') || lowerMessage.includes('rispetto a') || 
        lowerMessage.includes('vs') || lowerMessage.includes('differenza') ||
        lowerMessage.includes('confronto con') || lowerMessage.includes('benchmark') ||
        lowerMessage.includes('mercato') || lowerMessage.includes('competitivo')) {
      return {
        isSimulation: true,
        simulationType: 'comparison',
        parameters: {}
      };
    }
    
    // Rileva analisi di rischio
    if (lowerMessage.includes('analisi di rischio') || lowerMessage.includes('rischio') ||
        lowerMessage.includes('valutazione rischio') || lowerMessage.includes('mitigazione') ||
        lowerMessage.includes('scenari di rischio') || lowerMessage.includes('risk analysis')) {
      return {
        isSimulation: true,
        simulationType: 'risk_analysis',
        parameters: this.extractRiskAnalysisParameters(message)
      };
    }
    
    // Rileva benchmark di mercato
    if (lowerMessage.includes('benchmark') || lowerMessage.includes('mercato') ||
        lowerMessage.includes('trend di mercato') || lowerMessage.includes('andamento') ||
        lowerMessage.includes('dati di mercato') || lowerMessage.includes('market intelligence')) {
      return {
        isSimulation: true,
        simulationType: 'market_benchmark',
        parameters: this.extractMarketBenchmarkParameters(message)
      };
    }
    
    // Rileva analisi competitiva
    if (lowerMessage.includes('analisi competitiva') || lowerMessage.includes('competizione') ||
        lowerMessage.includes('posizionamento') || lowerMessage.includes('strategia competitiva') ||
        lowerMessage.includes('vantaggio competitivo') || lowerMessage.includes('competitive analysis')) {
      return {
        isSimulation: true,
        simulationType: 'competitive_analysis',
        parameters: this.extractCompetitiveAnalysisParameters(message)
      };
    }
    
    // Rileva valutazione investimento
    if (lowerMessage.includes('valutazione investimento') || lowerMessage.includes('investment analysis') ||
        lowerMessage.includes('valutazione progetto') || lowerMessage.includes('project valuation') ||
        lowerMessage.includes('valore progetto') || lowerMessage.includes('valutazione economica')) {
      return {
        isSimulation: true,
        simulationType: 'investment_valuation',
        parameters: this.extractInvestmentValuationParameters(message)
      };
    }
    
    return { isSimulation: false, simulationType: 'sensitivity', parameters: {} };
  }

  private extractSensitivityParameters(message: string): Record<string, any> {
    const params: Record<string, any> = {};
    
    // Estrai variazioni percentuali
    const percentageMatch = message.match(/(\d+(?:\.\d+)?)%/g);
    if (percentageMatch) {
      params.percentageChanges = percentageMatch.map(p => parseFloat(p));
    }
    
    // Estrai parametri specifici
    if (message.match(/costo costruzione/i)) params.parameter = 'construction_cost';
    if (message.match(/prezzo vendita/i)) params.parameter = 'selling_price';
    if (message.match(/prezzo acquisto/i)) params.parameter = 'purchase_price';
    
    return params;
  }

  private extractWhatIfParameters(message: string): Record<string, any> {
    const params: Record<string, any> = {};
    
    // Estrai target marginalit√†
    const marginMatch = message.match(/(\d+(?:\.\d+)?)%\s*di marginalit√†/i);
    if (marginMatch) {
      params.targetMargin = parseFloat(marginMatch[1]) / 100;
    }
    
    // Estrai prezzo acquisto specifico
    const priceMatch = message.match(/(\d+(?:\.\d+)?)\s*euro/i);
    if (priceMatch) {
      params.purchasePrice = parseFloat(priceMatch[1].replace('.', ''));
    }
    
    return params;
  }

  private extractMultipleScenariosParameters(message: string): Record<string, any> {
    const params: Record<string, any> = {};
    
    // Estrai numero di scenari
    const scenarioMatch = message.match(/(\d+)\s*scenari/i);
    if (scenarioMatch) {
      params.scenarioCount = parseInt(scenarioMatch[1]);
    }
    
    return params;
  }

  private extractRiskAnalysisParameters(message: string): Record<string, any> {
    const params: Record<string, any> = {};
    
    // Estrai tipi di rischio
    if (message.match(/rischio di mercato/i)) params.marketRisk = true;
    if (message.match(/rischio finanziario/i)) params.financialRisk = true;
    if (message.match(/rischio operativo/i)) params.operationalRisk = true;
    if (message.match(/rischio normativo/i)) params.regulatoryRisk = true;
    if (message.match(/rischio ambientale/i)) params.environmentalRisk = true;
    
    // Estrai livello di rischio
    if (message.match(/alto/i)) params.riskLevel = 'high';
    if (message.match(/medio/i)) params.riskLevel = 'medium';
    if (message.match(/basso/i)) params.riskLevel = 'low';
    
    return params;
  }

  private extractMarketBenchmarkParameters(message: string): Record<string, any> {
    const params: Record<string, any> = {};
    
    // Estrai localizzazione
    const locationMatch = message.match(/a\s+([^,.\n]+)/i);
    if (locationMatch) {
      params.location = locationMatch[1].trim();
    }
    
    // Estrai tipologia
    if (message.match(/residenziale/i)) params.propertyType = 'residential';
    if (message.match(/commerciale/i)) params.propertyType = 'commercial';
    if (message.match(/uffici/i)) params.propertyType = 'office';
    if (message.match(/industriale/i)) params.propertyType = 'industrial';
    
    // Estrai periodo di analisi
    if (message.match(/ultimi\s+(\d+)\s*mesi/i)) {
      const months = message.match(/ultimi\s+(\d+)\s*mesi/i);
      if (months) params.analysisPeriod = parseInt(months[1]);
    }
    
    return params;
  }

  private extractCompetitiveAnalysisParameters(message: string): Record<string, any> {
    const params: Record<string, any> = {};
    
    // Estrai area geografica
    const areaMatch = message.match(/nella\s+zona\s+([^,.\n]+)/i);
    if (areaMatch) {
      params.area = areaMatch[1].trim();
    }
    
    // Estrai tipologia di confronto
    if (message.match(/progetti simili/i)) params.similarProjects = true;
    if (message.match(/concorrenti/i)) params.competitors = true;
    if (message.match(/benchmark/i)) params.benchmark = true;
    
    return params;
  }

  private extractInvestmentValuationParameters(message: string): Record<string, any> {
    const params: Record<string, any> = {};
    
    // Estrai metodo di valutazione
    if (message.match(/DCF/i) || message.match(/flussi di cassa/i)) params.method = 'DCF';
    if (message.match(/comparativo/i)) params.method = 'comparative';
    if (message.match(/reddituale/i)) params.method = 'income';
    if (message.match(/costo/i)) params.method = 'cost';
    
    // Estrai orizzonte temporale
    const horizonMatch = message.match(/(\d+)\s*anni/i);
    if (horizonMatch) {
      params.timeHorizon = parseInt(horizonMatch[1]);
    }
    
    return params;
  }

  // üöÄ FASE 4: WORKFLOW INTELLIGENTE - Metodi di estrazione parametri

  private extractComplexWorkflowParameters(message: string): Record<string, any> {
    const params: Record<string, any> = {};
    
    // Estrai tipo di workflow
    if (message.match(/sviluppo/i)) params.workflowType = 'development';
    if (message.match(/costruzione/i)) params.workflowType = 'construction';
    if (message.match(/commercializzazione/i)) params.workflowType = 'commercialization';
    if (message.match(/gestione/i)) params.workflowType = 'management';
    
    // Estrai fasi specifiche
    const phases = [];
    if (message.match(/progettazione/i)) phases.push('design');
    if (message.match(/permessi/i)) phases.push('permits');
    if (message.match(/finanziamento/i)) phases.push('financing');
    if (message.match(/vendita/i)) phases.push('sales');
    if (phases.length > 0) params.phases = phases;
    
    // Estrai timeline
    const timelineMatch = message.match(/(\d+)\s*(mesi|anni)/i);
    if (timelineMatch) {
      params.timeline = {
        value: parseInt(timelineMatch[1]),
        unit: timelineMatch[2]
      };
    }
    
    return params;
  }

  private extractMultiStepAnalysisParameters(message: string): Record<string, any> {
    const params: Record<string, any> = {};
    
    // Estrai tipo di analisi
    if (message.match(/fattibilit√†/i)) params.analysisType = 'feasibility';
    if (message.match(/rischio/i)) params.analysisType = 'risk';
    if (message.match(/mercato/i)) params.analysisType = 'market';
    if (message.match(/finanziaria/i)) params.analysisType = 'financial';
    
    // Estrai livello di dettaglio
    if (message.match(/dettagliata/i)) params.detailLevel = 'detailed';
    if (message.match(/approfondita/i)) params.detailLevel = 'deep';
    if (message.match(/completa/i)) params.detailLevel = 'complete';
    
    // Estrai componenti specifici
    const components = [];
    if (message.match(/tecnica/i)) components.push('technical');
    if (message.match(/economica/i)) components.push('economic');
    if (message.match(/legale/i)) components.push('legal');
    if (message.match(/ambientale/i)) components.push('environmental');
    if (components.length > 0) params.components = components;
    
    return params;
  }

  private extractIntelligentPlanningParameters(message: string): Record<string, any> {
    const params: Record<string, any> = {};
    
    // Estrai tipo di pianificazione
    if (message.match(/strategica/i)) params.planningType = 'strategic';
    if (message.match(/operativa/i)) params.planningType = 'operational';
    if (message.match(/finanziaria/i)) params.planningType = 'financial';
    if (message.match(/temporale/i)) params.planningType = 'temporal';
    
    // Estrai obiettivi
    const objectives = [];
    if (message.match(/efficienza/i)) objectives.push('efficiency');
    if (message.match(/redditivit√†/i)) objectives.push('profitability');
    if (message.match(/crescita/i)) objectives.push('growth');
    if (message.match(/sostenibilit√†/i)) objectives.push('sustainability');
    if (objectives.length > 0) params.objectives = objectives;
    
    // Estrai orizzonte temporale
    const horizonMatch = message.match(/(\d+)\s*(mesi|anni)/i);
    if (horizonMatch) {
      params.horizon = {
        value: parseInt(horizonMatch[1]),
        unit: horizonMatch[2]
      };
    }
    
    return params;
  }

  private extractStrategicConsultingParameters(message: string): Record<string, any> {
    const params: Record<string, any> = {};
    
    // Estrai area di consulenza
    if (message.match(/investimenti/i)) params.consultingArea = 'investments';
    if (message.match(/sviluppo/i)) params.consultingArea = 'development';
    if (message.match(/mercato/i)) params.consultingArea = 'market';
    if (message.match(/finanziaria/i)) params.consultingArea = 'financial';
    
    // Estrai tipo di supporto
    if (message.match(/decisione/i)) params.supportType = 'decision_support';
    if (message.match(/valutazione/i)) params.supportType = 'evaluation';
    if (message.match(/ottimizzazione/i)) params.supportType = 'optimization';
    if (message.match(/risoluzione/i)) params.supportType = 'problem_solving';
    
    // Estrai urgenza
    if (message.match(/urgente/i)) params.urgency = 'high';
    if (message.match(/priorit√†/i)) params.urgency = 'medium';
    if (message.match(/normale/i)) params.urgency = 'low';
    
    return params;
  }

  private async generateSimulationAnalysis(
    projectData: ProjectData,
    simulationType: string,
    parameters: Record<string, any>,
    request: UrbanovaOSRequest
  ): Promise<string> {
    console.log('üéØ [UrbanovaOS] Generando simulazione:', { simulationType, parameters });
    
    let analysis = `# üéØ Simulazione ${simulationType.toUpperCase()} - ${projectData.name}\n\n`;
    
    switch (simulationType) {
      case 'sensitivity':
        analysis += await this.generateSensitivityAnalysis(projectData, parameters);
        break;
      case 'what_if':
        analysis += await this.generateWhatIfAnalysis(projectData, parameters);
        break;
      case 'optimization':
        analysis += await this.generateOptimizationAnalysis(projectData, parameters);
        break;
      case 'comparison':
        analysis += await this.generateComparisonAnalysis(projectData, parameters);
        break;
      case 'multiple':
        analysis += await this.generateMultipleScenariosAnalysis(projectData, parameters);
        break;
      case 'risk_analysis':
        analysis += await this.generateRiskAnalysis(projectData, parameters);
        break;
      case 'market_benchmark':
        analysis += await this.generateMarketBenchmark(projectData, parameters);
        break;
      case 'competitive_analysis':
        analysis += await this.generateCompetitiveAnalysis(projectData, parameters);
        break;
      case 'investment_valuation':
        analysis += await this.generateInvestmentValuation(projectData, parameters);
        break;
      case 'complex_workflow':
        analysis += await this.generateComplexWorkflow(projectData, parameters);
        break;
      case 'multi_step_analysis':
        analysis += await this.generateMultiStepAnalysis(projectData, parameters);
        break;
      case 'intelligent_planning':
        analysis += await this.generateIntelligentPlanning(projectData, parameters);
        break;
      case 'strategic_consulting':
        analysis += await this.generateStrategicConsulting(projectData, parameters);
        break;
      default:
        analysis += 'Tipo di simulazione non riconosciuto.';
    }
    
    return analysis;
  }

  private async generateSensitivityAnalysis(projectData: ProjectData, parameters: Record<string, any>): Promise<string> {
    let analysis = '## üìä Analisi di Sensibilit√† Avanzata\n\n';
    
    const baseCost = projectData.buildableArea * projectData.constructionCostPerSqm;
    const baseRevenue = (projectData.purchasePrice + baseCost * 1.015) / (1 - projectData.targetMargin);
    const basePricePerSqm = baseRevenue / projectData.buildableArea;
    const baseProfit = baseRevenue - (projectData.purchasePrice + baseCost * 1.015);
    
    analysis += `**üìà Scenario Base:**\n`;
    analysis += `- Prezzo per m¬≤: ‚Ç¨${basePricePerSqm.toLocaleString()}\n`;
    analysis += `- Marginalit√†: ${(projectData.targetMargin * 100).toFixed(1)}%\n`;
    analysis += `- Profitto totale: ‚Ç¨${baseProfit.toLocaleString()}\n`;
    analysis += `- ROI: ${((baseProfit / (projectData.purchasePrice + baseCost)) * 100).toFixed(1)}%\n\n`;
    
    // üéØ ANALISI SENSIBILIT√Ä COSTO COSTRUZIONE
    analysis += '### üèóÔ∏è Sensibilit√† Costo Costruzione\n';
    const costVariations = [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30];
    analysis += '| Variazione | Costo/m¬≤ | Prezzo/m¬≤ | Profitto | ROI | Marginalit√† |\n';
    analysis += '|------------|----------|-----------|----------|-----|-------------|\n';
    
    costVariations.forEach(variation => {
      const newCost = projectData.constructionCostPerSqm * (1 + variation / 100);
      const newRevenue = (projectData.purchasePrice + projectData.buildableArea * newCost * 1.015) / (1 - projectData.targetMargin);
      const newPricePerSqm = newRevenue / projectData.buildableArea;
      const newProfit = newRevenue - (projectData.purchasePrice + projectData.buildableArea * newCost * 1.015);
      const newROI = (newProfit / (projectData.purchasePrice + projectData.buildableArea * newCost)) * 100;
      
      analysis += `| ${variation > 0 ? '+' : ''}${variation}% | ‚Ç¨${newCost.toLocaleString()} | ‚Ç¨${newPricePerSqm.toLocaleString()} | ‚Ç¨${newProfit.toLocaleString()} | ${newROI.toFixed(1)}% | ${(projectData.targetMargin * 100).toFixed(1)}% |\n`;
    });
    
    // üéØ ANALISI SENSIBILIT√Ä PREZZO ACQUISTO
    analysis += '\n### üí∞ Sensibilit√† Prezzo Acquisto\n';
    const purchaseVariations = [-30, -20, -10, -5, 0, 5, 10, 15, 20];
    analysis += '| Variazione | Prezzo Acquisto | Prezzo/m¬≤ | Profitto | ROI | Marginalit√† |\n';
    analysis += '|------------|-----------------|-----------|----------|-----|-------------|\n';
    
    purchaseVariations.forEach(variation => {
      const newPurchasePrice = projectData.purchasePrice * (1 + variation / 100);
      const newRevenue = (newPurchasePrice + baseCost * 1.015) / (1 - projectData.targetMargin);
      const newPricePerSqm = newRevenue / projectData.buildableArea;
      const newProfit = newRevenue - (newPurchasePrice + baseCost * 1.015);
      const newROI = (newProfit / (newPurchasePrice + baseCost)) * 100;
      
      analysis += `| ${variation > 0 ? '+' : ''}${variation}% | ‚Ç¨${newPurchasePrice.toLocaleString()} | ‚Ç¨${newPricePerSqm.toLocaleString()} | ‚Ç¨${newProfit.toLocaleString()} | ${newROI.toFixed(1)}% | ${(projectData.targetMargin * 100).toFixed(1)}% |\n`;
    });
    
    // üéØ ANALISI SENSIBILIT√Ä MARGINALIT√Ä TARGET
    analysis += '\n### üéØ Sensibilit√† Marginalit√† Target\n';
    const marginVariations = [0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50];
    analysis += '| Marginalit√† | Prezzo/m¬≤ | Profitto | ROI | Differenza Prezzo |\n';
    analysis += '|-------------|-----------|----------|-----|------------------|\n';
    
    marginVariations.forEach(margin => {
      const newRevenue = (projectData.purchasePrice + baseCost * 1.015) / (1 - margin);
      const newPricePerSqm = newRevenue / projectData.buildableArea;
      const newProfit = newRevenue - (projectData.purchasePrice + baseCost * 1.015);
      const newROI = (newProfit / (projectData.purchasePrice + baseCost)) * 100;
      const priceDiff = newPricePerSqm - basePricePerSqm;
      
      analysis += `| ${(margin * 100).toFixed(0)}% | ‚Ç¨${newPricePerSqm.toLocaleString()} | ‚Ç¨${newProfit.toLocaleString()} | ${newROI.toFixed(1)}% | ${priceDiff > 0 ? '+' : ''}‚Ç¨${priceDiff.toLocaleString()} |\n`;
    });
    
    // üéØ RACCOMANDAZIONI STRATEGICHE
    analysis += '\n### üöÄ Raccomandazioni Strategiche\n';
    analysis += '**üìä Punti di Rottura Critici:**\n';
    analysis += `- Costo costruzione massimo sostenibile: ‚Ç¨${(projectData.constructionCostPerSqm * 1.15).toLocaleString()}/m¬≤ (+15%)\n`;
    analysis += `- Prezzo acquisto massimo sostenibile: ‚Ç¨${(projectData.purchasePrice * 1.20).toLocaleString()} (+20%)\n`;
    analysis += `- Marginalit√† minima per sostenibilit√†: ${(projectData.targetMargin * 0.8 * 100).toFixed(0)}%\n\n`;
    
    analysis += '**üéØ Ottimizzazioni Consigliate:**\n';
    analysis += `- Riduzione costo costruzione del 5%: +‚Ç¨${(baseProfit * 0.05).toLocaleString()} profitto\n`;
    analysis += `- Aumento marginalit√† al 30%: +‚Ç¨${((baseRevenue * 1.05) - baseRevenue).toLocaleString()} ricavo\n`;
    analysis += `- Negoziazione prezzo acquisto -10%: +‚Ç¨${(projectData.purchasePrice * 0.1).toLocaleString()} profitto\n`;
    
    return analysis;
  }

  private async generateWhatIfAnalysis(projectData: ProjectData, parameters: Record<string, any>): Promise<string> {
    let analysis = '## üéØ Analisi What-If Avanzata\n\n';
    
    const baseCost = projectData.buildableArea * projectData.constructionCostPerSqm;
    const baseRevenue = (projectData.purchasePrice + baseCost * 1.015) / (1 - projectData.targetMargin);
    const basePricePerSqm = baseRevenue / projectData.buildableArea;
    const baseProfit = baseRevenue - (projectData.purchasePrice + baseCost * 1.015);
    
    analysis += `**üìä Scenario Attuale:**\n`;
    analysis += `- Prezzo per m¬≤: ‚Ç¨${basePricePerSqm.toLocaleString()}\n`;
    analysis += `- Marginalit√†: ${(projectData.targetMargin * 100).toFixed(1)}%\n`;
    analysis += `- Profitto: ‚Ç¨${baseProfit.toLocaleString()}\n\n`;
    
    // üéØ SCENARI WHAT-IF MARGINALIT√Ä
    analysis += '### üéØ Scenari Marginalit√† Target\n';
    const targetMargins = [0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50];
    analysis += '| Marginalit√† | Prezzo/m¬≤ | Profitto | ROI | Differenza Prezzo |\n';
    analysis += '|-------------|-----------|----------|-----|------------------|\n';
    
    targetMargins.forEach(margin => {
      const requiredRevenue = (projectData.purchasePrice + baseCost * 1.015) / (1 - margin);
      const pricePerSqm = requiredRevenue / projectData.buildableArea;
      const profit = requiredRevenue - (projectData.purchasePrice + baseCost * 1.015);
      const roi = (profit / (projectData.purchasePrice + baseCost)) * 100;
      const priceDiff = pricePerSqm - basePricePerSqm;
      
      analysis += `| ${(margin * 100).toFixed(0)}% | ‚Ç¨${pricePerSqm.toLocaleString()} | ‚Ç¨${profit.toLocaleString()} | ${roi.toFixed(1)}% | ${priceDiff > 0 ? '+' : ''}‚Ç¨${priceDiff.toLocaleString()} |\n`;
    });
    
    // üéØ SCENARI WHAT-IF COSTO COSTRUZIONE
    analysis += '\n### üèóÔ∏è Scenari Costo Costruzione\n';
    const constructionCosts = [1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800, 3000];
    analysis += '| Costo/m¬≤ | Prezzo/m¬≤ | Profitto | ROI | Marginalit√† |\n';
    analysis += '|-----------|-----------|----------|-----|-------------|\n';
    
    constructionCosts.forEach(cost => {
      const totalCost = projectData.buildableArea * cost;
      const requiredRevenue = (projectData.purchasePrice + totalCost * 1.015) / (1 - projectData.targetMargin);
      const pricePerSqm = requiredRevenue / projectData.buildableArea;
      const profit = requiredRevenue - (projectData.purchasePrice + totalCost * 1.015);
      const roi = (profit / (projectData.purchasePrice + totalCost)) * 100;
      
      analysis += `| ‚Ç¨${cost.toLocaleString()} | ‚Ç¨${pricePerSqm.toLocaleString()} | ‚Ç¨${profit.toLocaleString()} | ${roi.toFixed(1)}% | ${(projectData.targetMargin * 100).toFixed(1)}% |\n`;
    });
    
    // üéØ SCENARI WHAT-IF PREZZO ACQUISTO
    analysis += '\n### üí∞ Scenari Prezzo Acquisto\n';
    const purchasePrices = [200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000];
    analysis += '| Prezzo Acquisto | Prezzo/m¬≤ | Profitto | ROI | Marginalit√† |\n';
    analysis += '|-----------------|-----------|----------|-----|-------------|\n';
    
    purchasePrices.forEach(price => {
      const requiredRevenue = (price + baseCost * 1.015) / (1 - projectData.targetMargin);
      const pricePerSqm = requiredRevenue / projectData.buildableArea;
      const profit = requiredRevenue - (price + baseCost * 1.015);
      const roi = (profit / (price + baseCost)) * 100;
      
      analysis += `| ‚Ç¨${price.toLocaleString()} | ‚Ç¨${pricePerSqm.toLocaleString()} | ‚Ç¨${profit.toLocaleString()} | ${roi.toFixed(1)}% | ${(projectData.targetMargin * 100).toFixed(1)}% |\n`;
    });
    
    // üéØ SCENARI WHAT-IF AREA COSTRUIBILE
    analysis += '\n### üìê Scenari Area Costruibile\n';
    const buildableAreas = [300, 400, 500, 600, 700, 800, 900, 1000];
    analysis += '| Area (m¬≤) | Prezzo/m¬≤ | Profitto | ROI | Marginalit√† |\n';
    analysis += '|-----------|-----------|----------|-----|-------------|\n';
    
    buildableAreas.forEach(area => {
      const totalCost = area * projectData.constructionCostPerSqm;
      const requiredRevenue = (projectData.purchasePrice + totalCost * 1.015) / (1 - projectData.targetMargin);
      const pricePerSqm = requiredRevenue / area;
      const profit = requiredRevenue - (projectData.purchasePrice + totalCost * 1.015);
      const roi = (profit / (projectData.purchasePrice + totalCost)) * 100;
      
      analysis += `| ${area} | ‚Ç¨${pricePerSqm.toLocaleString()} | ‚Ç¨${profit.toLocaleString()} | ${roi.toFixed(1)}% | ${(projectData.targetMargin * 100).toFixed(1)}% |\n`;
    });
    
    // üéØ RACCOMANDAZIONI WHAT-IF
    analysis += '\n### üöÄ Raccomandazioni What-If\n';
    analysis += '**üìä Scenari Ottimali:**\n';
    
    // Trova il miglior scenario per marginalit√†
    const bestMargin = targetMargins.reduce((best, margin) => {
      const requiredRevenue = (projectData.purchasePrice + baseCost * 1.015) / (1 - margin);
      const pricePerSqm = requiredRevenue / projectData.buildableArea;
      const profit = requiredRevenue - (projectData.purchasePrice + baseCost * 1.015);
      const roi = (profit / (projectData.purchasePrice + baseCost)) * 100;
      
      if (roi > best.roi) {
        return { margin, pricePerSqm, profit, roi };
      }
      return best;
    }, { margin: 0, pricePerSqm: 0, profit: 0, roi: 0 });
    
    analysis += `- **Miglior marginalit√†**: ${(bestMargin.margin * 100).toFixed(0)}% (ROI: ${bestMargin.roi.toFixed(1)}%)\n`;
    analysis += `- **Prezzo ottimale**: ‚Ç¨${bestMargin.pricePerSqm.toLocaleString()}/m¬≤\n`;
    analysis += `- **Profitto massimo**: ‚Ç¨${bestMargin.profit.toLocaleString()}\n\n`;
    
    analysis += '**üéØ Strategie Consigliate:**\n';
    analysis += `- Per marginalit√† 25%: ‚Ç¨${((projectData.purchasePrice + baseCost * 1.015) / 0.75 / projectData.buildableArea).toLocaleString()}/m¬≤\n`;
    analysis += `- Per marginalit√† 30%: ‚Ç¨${((projectData.purchasePrice + baseCost * 1.015) / 0.70 / projectData.buildableArea).toLocaleString()}/m¬≤\n`;
    analysis += `- Per marginalit√† 35%: ‚Ç¨${((projectData.purchasePrice + baseCost * 1.015) / 0.65 / projectData.buildableArea).toLocaleString()}/m¬≤\n`;
    
    return analysis;
  }

  private async generateOptimizationAnalysis(projectData: ProjectData, parameters: Record<string, any>): Promise<string> {
    let analysis = '## üöÄ Strategia di Ottimizzazione Avanzata\n\n';
    
    const baseCost = projectData.buildableArea * projectData.constructionCostPerSqm;
    const baseRevenue = (projectData.purchasePrice + baseCost * 1.015) / (1 - projectData.targetMargin);
    const basePricePerSqm = baseRevenue / projectData.buildableArea;
    const baseProfit = baseRevenue - (projectData.purchasePrice + baseCost * 1.015);
    
    analysis += `**üìä Situazione Attuale:**\n`;
    analysis += `- Prezzo per m¬≤: ‚Ç¨${basePricePerSqm.toLocaleString()}\n`;
    analysis += `- Profitto totale: ‚Ç¨${baseProfit.toLocaleString()}\n`;
    analysis += `- ROI: ${((baseProfit / (projectData.purchasePrice + baseCost)) * 100).toFixed(1)}%\n\n`;
    
    // üéØ OTTIMIZZAZIONE COSTI
    analysis += '### üèóÔ∏è Ottimizzazione Costi di Costruzione\n';
    const costOptimizations = [
      { reduction: 0.05, description: 'Riduzione 5% - Materiali standard' },
      { reduction: 0.10, description: 'Riduzione 10% - Fornitori locali' },
      { reduction: 0.15, description: 'Riduzione 15% - Progettazione ottimizzata' },
      { reduction: 0.20, description: 'Riduzione 20% - Prefabbricati' }
    ];
    
    analysis += '| Riduzione | Costo/m¬≤ | Risparmio | Profitto Aggiuntivo | ROI Migliorato |\n';
    analysis += '|-----------|----------|-----------|---------------------|----------------|\n';
    
    costOptimizations.forEach(opt => {
      const newCost = projectData.constructionCostPerSqm * (1 - opt.reduction);
      const newTotalCost = projectData.buildableArea * newCost;
      const newRevenue = (projectData.purchasePrice + newTotalCost * 1.015) / (1 - projectData.targetMargin);
      const newProfit = newRevenue - (projectData.purchasePrice + newTotalCost * 1.015);
      const savings = baseCost - newTotalCost;
      const profitIncrease = newProfit - baseProfit;
      const newROI = (newProfit / (projectData.purchasePrice + newTotalCost)) * 100;
      
      analysis += `| ${(opt.reduction * 100).toFixed(0)}% | ‚Ç¨${newCost.toLocaleString()} | ‚Ç¨${savings.toLocaleString()} | ‚Ç¨${profitIncrease.toLocaleString()} | ${newROI.toFixed(1)}% |\n`;
    });
    
    // üéØ OTTIMIZZAZIONE PREZZI
    analysis += '\n### üí∞ Ottimizzazione Prezzi di Vendita\n';
    const priceOptimizations = [
      { margin: 0.25, description: 'Marginalit√† 25% - Mercato competitivo' },
      { margin: 0.30, description: 'Marginalit√† 30% - Mercato premium' },
      { margin: 0.35, description: 'Marginalit√† 35% - Mercato luxury' },
      { margin: 0.40, description: 'Marginalit√† 40% - Mercato esclusivo' }
    ];
    
    analysis += '| Marginalit√† | Prezzo/m¬≤ | Profitto | ROI | Differenza Profitto |\n';
    analysis += '|-------------|-----------|----------|-----|-------------------|\n';
    
    priceOptimizations.forEach(opt => {
      const requiredRevenue = (projectData.purchasePrice + baseCost * 1.015) / (1 - opt.margin);
      const pricePerSqm = requiredRevenue / projectData.buildableArea;
      const profit = requiredRevenue - (projectData.purchasePrice + baseCost * 1.015);
      const roi = (profit / (projectData.purchasePrice + baseCost)) * 100;
      const profitDiff = profit - baseProfit;
      
      analysis += `| ${(opt.margin * 100).toFixed(0)}% | ‚Ç¨${pricePerSqm.toLocaleString()} | ‚Ç¨${profit.toLocaleString()} | ${roi.toFixed(1)}% | ${profitDiff > 0 ? '+' : ''}‚Ç¨${profitDiff.toLocaleString()} |\n`;
    });
    
    // üéØ OTTIMIZZAZIONE AREA
    analysis += '\n### üìê Ottimizzazione Area Costruibile\n';
    const areaOptimizations = [
      { factor: 0.9, description: 'Riduzione 10% - Zona verde' },
      { factor: 1.0, description: 'Area attuale' },
      { factor: 1.1, description: 'Aumento 10% - Piano aggiuntivo' },
      { factor: 1.2, description: 'Aumento 20% - Soppalco' }
    ];
    
    analysis += '| Fattore | Area (m¬≤) | Prezzo/m¬≤ | Profitto | ROI |\n';
    analysis += '|---------|-----------|-----------|----------|-----|\n';
    
    areaOptimizations.forEach(opt => {
      const newArea = projectData.buildableArea * opt.factor;
      const newTotalCost = newArea * projectData.constructionCostPerSqm;
      const requiredRevenue = (projectData.purchasePrice + newTotalCost * 1.015) / (1 - projectData.targetMargin);
      const pricePerSqm = requiredRevenue / newArea;
      const profit = requiredRevenue - (projectData.purchasePrice + newTotalCost * 1.015);
      const roi = (profit / (projectData.purchasePrice + newTotalCost)) * 100;
      
      analysis += `| ${opt.factor}x | ${newArea.toFixed(0)} | ‚Ç¨${pricePerSqm.toLocaleString()} | ‚Ç¨${profit.toLocaleString()} | ${roi.toFixed(1)}% |\n`;
    });
    
    // üéØ STRATEGIA DI VENDITA OTTIMIZZATA
    analysis += '\n### üéØ Strategia di Vendita Ottimizzata\n';
    analysis += '**üìä Fasi di Vendita Consigliate:**\n\n';
    
    // Calcola strategia ottimale
    const optimalMargin = 0.30; // 30% marginalit√† ottimale
    const optimalRevenue = (projectData.purchasePrice + baseCost * 1.015) / (1 - optimalMargin);
    const optimalPricePerSqm = optimalRevenue / projectData.buildableArea;
    
    analysis += `**Fase 1 - Lancio Premium (40% dell\'area):**\n`;
    analysis += `- Prezzo: ‚Ç¨${(optimalPricePerSqm * 1.1).toLocaleString()}/m¬≤ (+10%)\n`;
    analysis += `- Area: ${(projectData.buildableArea * 0.4).toFixed(0)} m¬≤\n`;
    analysis += `- Ricavo: ‚Ç¨${(optimalRevenue * 0.4 * 1.1).toLocaleString()}\n\n`;
    
    analysis += `**Fase 2 - Vendita Standard (40% dell\'area):**\n`;
    analysis += `- Prezzo: ‚Ç¨${optimalPricePerSqm.toLocaleString()}/m¬≤ (prezzo target)\n`;
    analysis += `- Area: ${(projectData.buildableArea * 0.4).toFixed(0)} m¬≤\n`;
    analysis += `- Ricavo: ‚Ç¨${(optimalRevenue * 0.4).toLocaleString()}\n\n`;
    
    analysis += `**Fase 3 - Liquidazione (20% dell\'area):**\n`;
    analysis += `- Prezzo: ‚Ç¨${(optimalPricePerSqm * 0.9).toLocaleString()}/m¬≤ (-10%)\n`;
    analysis += `- Area: ${(projectData.buildableArea * 0.2).toFixed(0)} m¬≤\n`;
    analysis += `- Ricavo: ‚Ç¨${(optimalRevenue * 0.2 * 0.9).toLocaleString()}\n\n`;
    
    const totalRevenue = optimalRevenue * 0.4 * 1.1 + optimalRevenue * 0.4 + optimalRevenue * 0.2 * 0.9;
    const totalProfit = totalRevenue - (projectData.purchasePrice + baseCost * 1.015);
    const totalROI = (totalProfit / (projectData.purchasePrice + baseCost)) * 100;
    
    analysis += `**üìà Risultati Strategia Ottimizzata:**\n`;
    analysis += `- Ricavo totale: ‚Ç¨${totalRevenue.toLocaleString()}\n`;
    analysis += `- Profitto totale: ‚Ç¨${totalProfit.toLocaleString()}\n`;
    analysis += `- ROI: ${totalROI.toFixed(1)}%\n`;
    analysis += `- Miglioramento profitto: +‚Ç¨${(totalProfit - baseProfit).toLocaleString()}\n`;
    
    return analysis;
  }

  private async generateComparisonAnalysis(projectData: ProjectData, parameters: Record<string, any>): Promise<string> {
    let analysis = '## üìà Analisi Comparativa Avanzata\n\n';
    
    const baseCost = projectData.buildableArea * projectData.constructionCostPerSqm;
    const baseRevenue = (projectData.purchasePrice + baseCost * 1.015) / (1 - projectData.targetMargin);
    const basePricePerSqm = baseRevenue / projectData.buildableArea;
    const baseProfit = baseRevenue - (projectData.purchasePrice + baseCost * 1.015);
    
    // üéØ CONFRONTO CON MERCATO
    analysis += '### üèòÔ∏è Confronto con Mercato Immobiliare\n';
    
    // Dati di mercato realistici per diverse tipologie
    const marketData = {
      'residenziale': { price: 3200, margin: 0.22, roi: 0.18 },
      'bifamiliare': { price: 3500, margin: 0.25, roi: 0.20 },
      'monofamiliare': { price: 3800, margin: 0.28, roi: 0.22 },
      'luxury': { price: 4500, margin: 0.35, roi: 0.25 }
    };
    
    const projectType = projectData.type || 'residenziale';
    const marketPrice = marketData[projectType as keyof typeof marketData]?.price || 3500;
    const marketMargin = marketData[projectType as keyof typeof marketData]?.margin || 0.25;
    const marketROI = marketData[projectType as keyof typeof marketData]?.roi || 0.20;
    
    analysis += `**üìä Benchmark di Mercato (${projectType}):**\n`;
    analysis += `- Prezzo medio mercato: ‚Ç¨${marketPrice.toLocaleString()}/m¬≤\n`;
    analysis += `- Marginalit√† media: ${(marketMargin * 100).toFixed(1)}%\n`;
    analysis += `- ROI medio: ${(marketROI * 100).toFixed(1)}%\n\n`;
    
    analysis += `**üéØ Il Tuo Progetto:**\n`;
    analysis += `- Prezzo target: ‚Ç¨${basePricePerSqm.toLocaleString()}/m¬≤\n`;
    analysis += `- Marginalit√†: ${(projectData.targetMargin * 100).toFixed(1)}%\n`;
    analysis += `- ROI: ${((baseProfit / (projectData.purchasePrice + baseCost)) * 100).toFixed(1)}%\n\n`;
    
    const priceDiff = basePricePerSqm - marketPrice;
    const marginDiff = projectData.targetMargin - marketMargin;
    const roiDiff = (baseProfit / (projectData.purchasePrice + baseCost)) - marketROI;
    
    analysis += `**üìà Differenziali:**\n`;
    analysis += `- Prezzo: ${priceDiff > 0 ? '+' : ''}‚Ç¨${priceDiff.toLocaleString()}/m¬≤ (${((priceDiff / marketPrice) * 100).toFixed(1)}%)\n`;
    analysis += `- Marginalit√†: ${marginDiff > 0 ? '+' : ''}${(marginDiff * 100).toFixed(1)}% punti\n`;
    analysis += `- ROI: ${roiDiff > 0 ? '+' : ''}${(roiDiff * 100).toFixed(1)}% punti\n\n`;
    
    // üéØ CONFRONTO CON PROGETTI SIMILI
    analysis += '### üèóÔ∏è Confronto con Progetti Simili\n';
    
    const similarProjects = [
      { name: 'Progetto A - Zona Centro', area: projectData.buildableArea * 0.9, cost: projectData.constructionCostPerSqm * 1.1, price: basePricePerSqm * 1.05 },
      { name: 'Progetto B - Zona Periferia', area: projectData.buildableArea * 1.1, cost: projectData.constructionCostPerSqm * 0.9, price: basePricePerSqm * 0.95 },
      { name: 'Progetto C - Zona Premium', area: projectData.buildableArea, cost: projectData.constructionCostPerSqm * 1.2, price: basePricePerSqm * 1.15 },
      { name: 'Progetto D - Zona Economica', area: projectData.buildableArea * 1.2, cost: projectData.constructionCostPerSqm * 0.8, price: basePricePerSqm * 0.85 }
    ];
    
    analysis += '| Progetto | Area (m¬≤) | Costo/m¬≤ | Prezzo/m¬≤ | Profitto | ROI |\n';
    analysis += '|----------|-----------|----------|-----------|----------|-----|\n';
    
    similarProjects.forEach(project => {
      const totalCost = project.area * project.cost;
      const totalRevenue = project.area * project.price;
      const profit = totalRevenue - (projectData.purchasePrice + totalCost * 1.015);
      const roi = (profit / (projectData.purchasePrice + totalCost)) * 100;
      
      analysis += `| ${project.name} | ${project.area.toFixed(0)} | ‚Ç¨${project.cost.toLocaleString()} | ‚Ç¨${project.price.toLocaleString()} | ‚Ç¨${profit.toLocaleString()} | ${roi.toFixed(1)}% |\n`;
    });
    
    // üéØ ANALISI COMPETITIVA
    analysis += '\n### üèÜ Analisi Competitiva\n';
    
    const competitiveAnalysis = {
      'prezzo': {
        'molto_competitivo': basePricePerSqm < marketPrice * 0.9,
        'competitivo': basePricePerSqm >= marketPrice * 0.9 && basePricePerSqm <= marketPrice * 1.1,
        'premium': basePricePerSqm > marketPrice * 1.1
      },
      'marginalita': {
        'bassa': projectData.targetMargin < marketMargin * 0.8,
        'media': projectData.targetMargin >= marketMargin * 0.8 && projectData.targetMargin <= marketMargin * 1.2,
        'alta': projectData.targetMargin > marketMargin * 1.2
      },
      'roi': {
        'basso': (baseProfit / (projectData.purchasePrice + baseCost)) < marketROI * 0.8,
        'medio': (baseProfit / (projectData.purchasePrice + baseCost)) >= marketROI * 0.8 && (baseProfit / (projectData.purchasePrice + baseCost)) <= marketROI * 1.2,
        'alto': (baseProfit / (projectData.purchasePrice + baseCost)) > marketROI * 1.2
      }
    };
    
    analysis += '**üéØ Posizionamento Competitivo:**\n';
    
    // Analisi prezzo
    if (competitiveAnalysis.prezzo.molto_competitivo) {
      analysis += `- **Prezzo**: Molto competitivo (${((priceDiff / marketPrice) * 100).toFixed(1)}% sotto mercato) ‚úÖ\n`;
    } else if (competitiveAnalysis.prezzo.competitivo) {
      analysis += `- **Prezzo**: Competitivo (${((priceDiff / marketPrice) * 100).toFixed(1)}% vs mercato) ‚úÖ\n`;
    } else {
      analysis += `- **Prezzo**: Premium (${((priceDiff / marketPrice) * 100).toFixed(1)}% sopra mercato) ‚ö†Ô∏è\n`;
    }
    
    // Analisi marginalit√†
    if (competitiveAnalysis.marginalita.bassa) {
      analysis += `- **Marginalit√†**: Bassa (${(marginDiff * 100).toFixed(1)}% punti sotto mercato) ‚ö†Ô∏è\n`;
    } else if (competitiveAnalysis.marginalita.media) {
      analysis += `- **Marginalit√†**: Media (${(marginDiff * 100).toFixed(1)}% punti vs mercato) ‚úÖ\n`;
    } else {
      analysis += `- **Marginalit√†**: Alta (${(marginDiff * 100).toFixed(1)}% punti sopra mercato) ‚úÖ\n`;
    }
    
    // Analisi ROI
    if (competitiveAnalysis.roi.basso) {
      analysis += `- **ROI**: Basso (${(roiDiff * 100).toFixed(1)}% punti sotto mercato) ‚ö†Ô∏è\n`;
    } else if (competitiveAnalysis.roi.medio) {
      analysis += `- **ROI**: Medio (${(roiDiff * 100).toFixed(1)}% punti vs mercato) ‚úÖ\n`;
    } else {
      analysis += `- **ROI**: Alto (${(roiDiff * 100).toFixed(1)}% punti sopra mercato) ‚úÖ\n`;
    }
    
    // üéØ RACCOMANDAZIONI COMPETITIVE
    analysis += '\n### üöÄ Raccomandazioni Competitive\n';
    
    if (priceDiff > marketPrice * 0.1) {
      analysis += '**üìâ Prezzo troppo alto:**\n';
      analysis += `- Riduci prezzo del ${((priceDiff / marketPrice) * 100).toFixed(0)}% per essere competitivo\n`;
      analysis += `- Prezzo consigliato: ‚Ç¨${(basePricePerSqm * 0.9).toLocaleString()}/m¬≤\n`;
    } else if (priceDiff < -marketPrice * 0.1) {
      analysis += '**üìà Prezzo troppo basso:**\n';
      analysis += `- Aumenta prezzo del ${Math.abs((priceDiff / marketPrice) * 100).toFixed(0)}% per massimizzare profitto\n`;
      analysis += `- Prezzo consigliato: ‚Ç¨${(basePricePerSqm * 1.1).toLocaleString()}/m¬≤\n`;
    } else {
      analysis += '**‚úÖ Prezzo ottimale:**\n';
      analysis += '- Il prezzo √® ben posizionato nel mercato\n';
    }
    
    if (marginDiff < -0.05) {
      analysis += '\n**üìä Marginalit√† bassa:**\n';
      analysis += '- Considera di ridurre i costi o aumentare il prezzo\n';
      analysis += '- Target marginalit√†: 25-30%\n';
    } else if (marginDiff > 0.1) {
      analysis += '\n**üìà Marginalit√† alta:**\n';
      analysis += '- Ottima marginalit√†, mantieni la strategia\n';
    } else {
      analysis += '\n**‚úÖ Marginalit√† ottimale:**\n';
      analysis += '- La marginalit√† √® ben bilanciata\n';
    }
    
    return analysis;
  }

  private async generateMultipleScenariosAnalysis(projectData: ProjectData, parameters: Record<string, any>): Promise<string> {
    let analysis = '## üé≠ Scenari Multipli Avanzati\n\n';
    
    const baseCost = projectData.buildableArea * projectData.constructionCostPerSqm;
    const baseRevenue = (projectData.purchasePrice + baseCost * 1.015) / (1 - projectData.targetMargin);
    const basePricePerSqm = baseRevenue / projectData.buildableArea;
    const baseProfit = baseRevenue - (projectData.purchasePrice + baseCost * 1.015);
    
    // üéØ SCENARI PRINCIPALI
    const scenarios = [
      { 
        name: 'Scenario Pessimistico', 
        margin: projectData.targetMargin * 0.7, 
        cost: projectData.constructionCostPerSqm * 1.15,
        purchase: projectData.purchasePrice * 1.1,
        description: 'Costi alti, marginalit√† bassa, mercato difficile'
      },
      { 
        name: 'Scenario Conservativo', 
        margin: projectData.targetMargin * 0.85, 
        cost: projectData.constructionCostPerSqm * 1.05,
        purchase: projectData.purchasePrice * 1.02,
        description: 'Costi leggermente alti, marginalit√† ridotta'
      },
      { 
        name: 'Scenario Base', 
        margin: projectData.targetMargin, 
        cost: projectData.constructionCostPerSqm,
        purchase: projectData.purchasePrice,
        description: 'Parametri attuali, situazione normale'
      },
      { 
        name: 'Scenario Ottimistico', 
        margin: projectData.targetMargin * 1.15, 
        cost: projectData.constructionCostPerSqm * 0.95,
        purchase: projectData.purchasePrice * 0.98,
        description: 'Costi ridotti, marginalit√† migliorata'
      },
      { 
        name: 'Scenario Ideale', 
        margin: projectData.targetMargin * 1.3, 
        cost: projectData.constructionCostPerSqm * 0.9,
        purchase: projectData.purchasePrice * 0.95,
        description: 'Tutto favorevole, massimo profitto'
      }
    ];
    
    analysis += '### üìä Tabella Comparativa Scenari\n';
    analysis += '| Scenario | Marginalit√† | Costo/m¬≤ | Prezzo/m¬≤ | Profitto | ROI | Probabilit√† |\n';
    analysis += '|----------|-------------|----------|-----------|----------|-----|-------------|\n';
    
    scenarios.forEach((scenario, index) => {
      const totalCost = projectData.buildableArea * scenario.cost;
      const requiredRevenue = (scenario.purchase + totalCost * 1.015) / (1 - scenario.margin);
      const pricePerSqm = requiredRevenue / projectData.buildableArea;
      const profit = requiredRevenue - (scenario.purchase + totalCost * 1.015);
      const roi = (profit / (scenario.purchase + totalCost)) * 100;
      const probability = [10, 20, 40, 25, 5][index]; // Probabilit√† realistiche
      
      analysis += `| ${scenario.name} | ${(scenario.margin * 100).toFixed(1)}% | ‚Ç¨${scenario.cost.toLocaleString()} | ‚Ç¨${pricePerSqm.toLocaleString()} | ‚Ç¨${profit.toLocaleString()} | ${roi.toFixed(1)}% | ${probability}% |\n`;
    });
    
    // üéØ ANALISI DETTAGLIATA PER SCENARIO
    analysis += '\n### üîç Analisi Dettagliata per Scenario\n\n';
    
    scenarios.forEach((scenario, index) => {
      const totalCost = projectData.buildableArea * scenario.cost;
      const requiredRevenue = (scenario.purchase + totalCost * 1.015) / (1 - scenario.margin);
      const pricePerSqm = requiredRevenue / projectData.buildableArea;
      const profit = requiredRevenue - (scenario.purchase + totalCost * 1.015);
      const roi = (profit / (scenario.purchase + totalCost)) * 100;
      const profitDiff = profit - baseProfit;
      
      analysis += `#### ${index + 1}. ${scenario.name}\n`;
      analysis += `**üìù Descrizione**: ${scenario.description}\n\n`;
      
      analysis += `**üí∞ Parametri Finanziari:**\n`;
      analysis += `- Prezzo acquisto: ‚Ç¨${scenario.purchase.toLocaleString()}\n`;
      analysis += `- Costo costruzione: ‚Ç¨${scenario.cost.toLocaleString()}/m¬≤\n`;
      analysis += `- Marginalit√† target: ${(scenario.margin * 100).toFixed(1)}%\n`;
      analysis += `- Prezzo vendita: ‚Ç¨${pricePerSqm.toLocaleString()}/m¬≤\n`;
      analysis += `- Profitto totale: ‚Ç¨${profit.toLocaleString()}\n`;
      analysis += `- ROI: ${roi.toFixed(1)}%\n`;
      analysis += `- Differenza vs base: ${profitDiff > 0 ? '+' : ''}‚Ç¨${profitDiff.toLocaleString()}\n\n`;
      
      // Analisi rischio per scenario
      if (roi < 10) {
        analysis += `**‚ö†Ô∏è Rischio Alto**: ROI inferiore al 10%, progetto rischioso\n`;
      } else if (roi < 15) {
        analysis += `**‚ö†Ô∏è Rischio Medio**: ROI 10-15%, progetto accettabile\n`;
      } else if (roi < 20) {
        analysis += `**‚úÖ Rischio Basso**: ROI 15-20%, progetto buono\n`;
      } else {
        analysis += `**üöÄ Rischio Molto Basso**: ROI >20%, progetto eccellente\n`;
      }
      
      analysis += '\n---\n\n';
    });
    
    // üéØ ANALISI PROBABILISTICA
    analysis += '### üìà Analisi Probabilistica\n';
    
    const weightedProfit = scenarios.reduce((sum, scenario, index) => {
      const totalCost = projectData.buildableArea * scenario.cost;
      const requiredRevenue = (scenario.purchase + totalCost * 1.015) / (1 - scenario.margin);
      const profit = requiredRevenue - (scenario.purchase + totalCost * 1.015);
      const probability = [10, 20, 40, 25, 5][index] / 100;
      return sum + (profit * probability);
    }, 0);
    
    const weightedROI = scenarios.reduce((sum, scenario, index) => {
      const totalCost = projectData.buildableArea * scenario.cost;
      const requiredRevenue = (scenario.purchase + totalCost * 1.015) / (1 - scenario.margin);
      const profit = requiredRevenue - (scenario.purchase + totalCost * 1.015);
      const roi = (profit / (scenario.purchase + totalCost)) * 100;
      const probability = [10, 20, 40, 25, 5][index] / 100;
      return sum + (roi * probability);
    }, 0);
    
    analysis += `**üìä Valori Attesi:**\n`;
    analysis += `- Profitto atteso: ‚Ç¨${weightedProfit.toLocaleString()}\n`;
    analysis += `- ROI atteso: ${weightedROI.toFixed(1)}%\n`;
    analysis += `- Probabilit√† di profitto: ${scenarios.filter((_, i) => {
      const totalCost = projectData.buildableArea * scenarios[i].cost;
      const requiredRevenue = (scenarios[i].purchase + totalCost * 1.015) / (1 - scenarios[i].margin);
      const profit = requiredRevenue - (scenarios[i].purchase + totalCost * 1.015);
      return profit > 0;
    }).reduce((sum, _, i) => sum + [10, 20, 40, 25, 5][i], 0)}%\n\n`;
    
    // üéØ RACCOMANDAZIONI STRATEGICHE
    analysis += '### üöÄ Raccomandazioni Strategiche\n';
    
    const bestScenario = scenarios.reduce((best, scenario, index) => {
      const totalCost = projectData.buildableArea * scenario.cost;
      const requiredRevenue = (scenario.purchase + totalCost * 1.015) / (1 - scenario.margin);
      const profit = requiredRevenue - (scenario.purchase + totalCost * 1.015);
      const roi = (profit / (scenario.purchase + totalCost)) * 100;
      const probability = [10, 20, 40, 25, 5][index] / 100;
      const score = roi * probability; // ROI ponderato per probabilit√†
      
      if (score > best.score) {
        return { scenario, score, profit, roi };
      }
      return best;
    }, { scenario: scenarios[0], score: 0, profit: 0, roi: 0 });
    
    analysis += `**üéØ Scenario Consigliato**: ${bestScenario.scenario.name}\n`;
    analysis += `- ROI: ${bestScenario.roi.toFixed(1)}%\n`;
    analysis += `- Profitto: ‚Ç¨${bestScenario.profit.toLocaleString()}\n`;
    analysis += `- Score ponderato: ${bestScenario.score.toFixed(1)}\n\n`;
    
    analysis += `**üìã Strategia Consigliata:**\n`;
    if (bestScenario.scenario.name.includes('Pessimistico')) {
      analysis += `- ‚ö†Ô∏è Scenario ad alto rischio, considera di rivedere il progetto\n`;
      analysis += `- Riduci i costi o aumenta la marginalit√† target\n`;
    } else if (bestScenario.scenario.name.includes('Conservativo')) {
      analysis += `- ‚úÖ Scenario prudente, buon equilibrio rischio/rendimento\n`;
      analysis += `- Mantieni la strategia attuale\n`;
    } else if (bestScenario.scenario.name.includes('Ottimistico')) {
      analysis += `- üöÄ Scenario favorevole, ottima opportunit√†\n`;
      analysis += `- Procedi con fiducia, monitora i costi\n`;
    } else {
      analysis += `- üéØ Scenario ideale, massimizza il profitto\n`;
      analysis += `- Implementa tutte le ottimizzazioni possibili\n`;
    }
    
    return analysis;
  }

  // üéØ ANALISI STRATEGICHE AVANZATE - FASE 3
  private async generateRiskAnalysis(projectData: ProjectData, parameters: Record<string, any>): Promise<string> {
    let analysis = '## ‚ö†Ô∏è Analisi di Rischio Avanzata\n\n';
    
    const baseCost = projectData.buildableArea * projectData.constructionCostPerSqm;
    const baseRevenue = (projectData.purchasePrice + baseCost * 1.015) / (1 - projectData.targetMargin);
    const basePricePerSqm = baseRevenue / projectData.buildableArea;
    const baseProfit = baseRevenue - (projectData.purchasePrice + baseCost * 1.015);
    
    analysis += `**üìä Progetto Analizzato:**\n`;
    analysis += `- Nome: ${projectData.name}\n`;
    analysis += `- Investimento totale: ‚Ç¨${(projectData.purchasePrice + baseCost * 1.015).toLocaleString()}\n`;
    analysis += `- Profitto atteso: ‚Ç¨${baseProfit.toLocaleString()}\n`;
    analysis += `- ROI atteso: ${((baseProfit / (projectData.purchasePrice + baseCost)) * 100).toFixed(1)}%\n\n`;
    
    // üéØ ANALISI RISCHIO DI MERCATO
    analysis += '### üåç Rischio di Mercato\n';
    analysis += '**üìà Fattori di Rischio:**\n';
    
    const marketRisks = [
      { factor: 'Fluttuazioni prezzi immobiliari', probability: 0.3, impact: 'Alto', mitigation: 'Hedging con contratti a prezzo fisso' },
      { factor: 'Cambiamenti demografici', probability: 0.2, impact: 'Medio', mitigation: 'Analisi trend demografici continuativa' },
      { factor: 'Crisi economica', probability: 0.15, impact: 'Alto', mitigation: 'Diversificazione portafoglio' },
      { factor: 'Cambiamenti normativi', probability: 0.25, impact: 'Medio', mitigation: 'Monitoraggio legislativo' },
      { factor: 'Competizione aumentata', probability: 0.4, impact: 'Medio', mitigation: 'Differenziazione prodotto' }
    ];
    
    analysis += '| Fattore di Rischio | Probabilit√† | Impatto | Mitigazione |\n';
    analysis += '|-------------------|-------------|---------|-------------|\n';
    
    marketRisks.forEach(risk => {
      analysis += `| ${risk.factor} | ${(risk.probability * 100).toFixed(0)}% | ${risk.impact} | ${risk.mitigation} |\n`;
    });
    
    // üéØ ANALISI RISCHIO FINANZIARIO
    analysis += '\n### üí∞ Rischio Finanziario\n';
    analysis += '**üí∏ Fattori di Rischio:**\n';
    
    const financialRisks = [
      { factor: 'Aumento tassi interesse', probability: 0.35, impact: 'Alto', mitigation: 'Tasso fisso o copertura' },
      { factor: 'Inflazione costi costruzione', probability: 0.4, impact: 'Alto', mitigation: 'Contratti indicizzati' },
      { factor: 'Difficolt√† accesso credito', probability: 0.2, impact: 'Alto', mitigation: 'Finanziamento diversificato' },
      { factor: 'Svalutazione valuta', probability: 0.15, impact: 'Medio', mitigation: 'Copertura valutaria' },
      { factor: 'Ritardi nei pagamenti', probability: 0.3, impact: 'Medio', mitigation: 'Garanzie bancarie' }
    ];
    
    analysis += '| Fattore di Rischio | Probabilit√† | Impatto | Mitigazione |\n';
    analysis += '|-------------------|-------------|---------|-------------|\n';
    
    financialRisks.forEach(risk => {
      analysis += `| ${risk.factor} | ${(risk.probability * 100).toFixed(0)}% | ${risk.impact} | ${risk.mitigation} |\n`;
    });
    
    // üéØ ANALISI RISCHIO OPERATIVO
    analysis += '\n### ‚öôÔ∏è Rischio Operativo\n';
    analysis += '**üîß Fattori di Rischio:**\n';
    
    const operationalRisks = [
      { factor: 'Ritardi costruzione', probability: 0.4, impact: 'Alto', mitigation: 'Piano B e penalit√† contrattuali' },
      { factor: 'Qualit√† materiali', probability: 0.25, impact: 'Medio', mitigation: 'Controlli qualit√† rigorosi' },
      { factor: 'Problemi fornitori', probability: 0.3, impact: 'Medio', mitigation: 'Fornitori multipli' },
      { factor: 'Errori progettuali', probability: 0.2, impact: 'Alto', mitigation: 'Review tecnico indipendente' },
      { factor: 'Problemi permessi', probability: 0.35, impact: 'Alto', mitigation: 'Supporto legale specializzato' }
    ];
    
    analysis += '| Fattore di Rischio | Probabilit√† | Impatto | Mitigazione |\n';
    analysis += '|-------------------|-------------|---------|-------------|\n';
    
    operationalRisks.forEach(risk => {
      analysis += `| ${risk.factor} | ${(risk.probability * 100).toFixed(0)}% | ${risk.impact} | ${risk.mitigation} |\n`;
    });
    
    // üéØ ANALISI RISCHIO NORMATIVO
    analysis += '\n### üìã Rischio Normativo\n';
    analysis += '**‚öñÔ∏è Fattori di Rischio:**\n';
    
    const regulatoryRisks = [
      { factor: 'Cambiamenti urbanistici', probability: 0.2, impact: 'Alto', mitigation: 'Monitoraggio normativo' },
      { factor: 'Nuove regole ambientali', probability: 0.3, impact: 'Medio', mitigation: 'Progettazione sostenibile' },
      { factor: 'Vincoli paesaggistici', probability: 0.15, impact: 'Alto', mitigation: 'Studio paesaggistico' },
      { factor: 'Norme antisismiche', probability: 0.1, impact: 'Medio', mitigation: 'Progettazione antisismica' },
      { factor: 'Regole energetiche', probability: 0.25, impact: 'Medio', mitigation: 'Certificazione energetica' }
    ];
    
    analysis += '| Fattore di Rischio | Probabilit√† | Impatto | Mitigazione |\n';
    analysis += '|-------------------|-------------|---------|-------------|\n';
    
    regulatoryRisks.forEach(risk => {
      analysis += `| ${risk.factor} | ${(risk.probability * 100).toFixed(0)}% | ${risk.impact} | ${risk.mitigation} |\n`;
    });
    
    // üéØ ANALISI RISCHIO AMBIENTALE
    analysis += '\n### üå± Rischio Ambientale\n';
    analysis += '**üåç Fattori di Rischio:**\n';
    
    const environmentalRisks = [
      { factor: 'Inquinamento terreno', probability: 0.1, impact: 'Alto', mitigation: 'Bonifica preventiva' },
      { factor: 'Alluvioni', probability: 0.15, impact: 'Alto', mitigation: 'Studio idrogeologico' },
      { factor: 'Terremoti', probability: 0.2, impact: 'Alto', mitigation: 'Progettazione antisismica' },
      { factor: 'Cambiamenti climatici', probability: 0.3, impact: 'Medio', mitigation: 'Design resiliente' },
      { factor: 'Rumore traffico', probability: 0.4, impact: 'Basso', mitigation: 'Barriere acustiche' }
    ];
    
    analysis += '| Fattore di Rischio | Probabilit√† | Impatto | Mitigazione |\n';
    analysis += '|-------------------|-------------|---------|-------------|\n';
    
    environmentalRisks.forEach(risk => {
      analysis += `| ${risk.factor} | ${(risk.probability * 100).toFixed(0)}% | ${risk.impact} | ${risk.mitigation} |\n`;
    });
    
    // üéØ SCORING RISCHIO TOTALE
    analysis += '\n### üìä Scoring Rischio Totale\n';
    
    const totalRiskScore = this.calculateTotalRiskScore(marketRisks, financialRisks, operationalRisks, regulatoryRisks, environmentalRisks);
    
    analysis += `**üéØ Punteggio Rischio: ${totalRiskScore.score}/100**\n`;
    analysis += `**üìà Livello Rischio: ${totalRiskScore.level}**\n`;
    analysis += `**üé® Colore Rischio: ${totalRiskScore.color}**\n\n`;
    
    // üéØ RACCOMANDAZIONI STRATEGICHE
    analysis += '### üöÄ Raccomandazioni Strategiche\n';
    
    if (totalRiskScore.score < 30) {
      analysis += '**‚úÖ Rischio Basso - Progetto Raccomandato:**\n';
      analysis += '- Il progetto presenta un profilo di rischio accettabile\n';
      analysis += '- Procedi con fiducia, monitora i fattori critici\n';
      analysis += '- Implementa le mitigazioni consigliate\n';
    } else if (totalRiskScore.score < 60) {
      analysis += '**‚ö†Ô∏è Rischio Medio - Progetto Condizionato:**\n';
      analysis += '- Il progetto presenta rischi moderati\n';
      analysis += '- Implementa tutte le mitigazioni prima di procedere\n';
      analysis += '- Considera assicurazioni specifiche\n';
    } else {
      analysis += '**‚ùå Rischio Alto - Progetto Sconsigliato:**\n';
      analysis += '- Il progetto presenta rischi elevati\n';
      analysis += '- Rivedi completamente la strategia\n';
      analysis += '- Considera alternative o rinvio\n';
    }
    
    analysis += '\n**üìã Piano di Mitigazione Prioritario:**\n';
    analysis += '1. **Immediate (0-3 mesi)**: Implementa mitigazioni ad alto impatto\n';
    analysis += '2. **Breve termine (3-6 mesi)**: Completa analisi di mercato\n';
    analysis += '3. **Medio termine (6-12 mesi)**: Diversifica portafoglio\n';
    analysis += '4. **Lungo termine (12+ mesi)**: Monitoraggio continuo\n';
    
    return analysis;
  }

  private calculateTotalRiskScore(marketRisks: any[], financialRisks: any[], operationalRisks: any[], regulatoryRisks: any[], environmentalRisks: any[]): { score: number; level: string; color: string } {
    const allRisks = [...marketRisks, ...financialRisks, ...operationalRisks, ...regulatoryRisks, ...environmentalRisks];
    
    let totalScore = 0;
    let totalWeight = 0;
    
    allRisks.forEach(risk => {
      const impactWeight = risk.impact === 'Alto' ? 3 : risk.impact === 'Medio' ? 2 : 1;
      const riskScore = risk.probability * impactWeight * 20; // Scala 0-100
      totalScore += riskScore;
      totalWeight += impactWeight;
    });
    
    const finalScore = Math.round(totalScore / totalWeight);
    
    let level, color;
    if (finalScore < 30) {
      level = 'Basso';
      color = 'üü¢ Verde';
    } else if (finalScore < 60) {
      level = 'Medio';
      color = 'üü° Giallo';
    } else {
      level = 'Alto';
      color = 'üî¥ Rosso';
    }
    
    return { score: finalScore, level, color };
  }

  private async generateMarketBenchmark(projectData: ProjectData, parameters: Record<string, any>): Promise<string> {
    let analysis = '## üìä Benchmark di Mercato Avanzato\n\n';
    
    const baseCost = projectData.buildableArea * projectData.constructionCostPerSqm;
    const baseRevenue = (projectData.purchasePrice + baseCost * 1.015) / (1 - projectData.targetMargin);
    const basePricePerSqm = baseRevenue / projectData.buildableArea;
    const baseProfit = baseRevenue - (projectData.purchasePrice + baseCost * 1.015);
    
    analysis += `**üìä Progetto Analizzato:**\n`;
    analysis += `- Nome: ${projectData.name}\n`;
    analysis += `- Tipologia: ${projectData.type || 'residenziale'}\n`;
    analysis += `- Area costruibile: ${projectData.buildableArea} m¬≤\n`;
    analysis += `- Prezzo target: ‚Ç¨${basePricePerSqm.toLocaleString()}/m¬≤\n`;
    analysis += `- Investimento totale: ‚Ç¨${(projectData.purchasePrice + baseCost * 1.015).toLocaleString()}\n\n`;
    
    // üéØ DATI DI MERCATO REAL-TIME
    analysis += '### üåç Dati di Mercato Real-Time\n';
    
    const marketData = await this.getAdvancedMarketData(projectData.type || 'residenziale', parameters.location);
    
    analysis += `**üìà Benchmark Nazionale (${projectData.type || 'residenziale'}):**\n`;
    analysis += `- Prezzo medio: ‚Ç¨${marketData.national.averagePrice.toLocaleString()}/m¬≤\n`;
    analysis += `- Range prezzi: ‚Ç¨${marketData.national.minPrice.toLocaleString()}/m¬≤ - ‚Ç¨${marketData.national.maxPrice.toLocaleString()}/m¬≤\n`;
    analysis += `- Trend ultimi 12 mesi: ${marketData.national.trend}%\n`;
    analysis += `- Volumi vendita: ${marketData.national.salesVolume} unit√†/mese\n`;
    analysis += `- Tempo medio vendita: ${marketData.national.averageTimeToSell} giorni\n\n`;
    
    if (parameters.location) {
      analysis += `**üèòÔ∏è Benchmark Locale (${parameters.location}):**\n`;
      analysis += `- Prezzo medio: ‚Ç¨${marketData.local.averagePrice.toLocaleString()}/m¬≤\n`;
      analysis += `- Range prezzi: ‚Ç¨${marketData.local.minPrice.toLocaleString()}/m¬≤ - ‚Ç¨${marketData.local.maxPrice.toLocaleString()}/m¬≤\n`;
      analysis += `- Trend ultimi 12 mesi: ${marketData.local.trend}%\n`;
      analysis += `- Volumi vendita: ${marketData.local.salesVolume} unit√†/mese\n`;
      analysis += `- Tempo medio vendita: ${marketData.local.averageTimeToSell} giorni\n\n`;
    }
    
    // üéØ ANALISI COMPETITIVA
    analysis += '### üèÜ Analisi Competitiva\n';
    
    const competitiveAnalysis = this.analyzeCompetitivePosition(basePricePerSqm, marketData, projectData);
    
    analysis += `**üéØ Posizionamento Competitivo:**\n`;
    analysis += `- Il tuo prezzo: ‚Ç¨${basePricePerSqm.toLocaleString()}/m¬≤\n`;
    analysis += `- Prezzo medio mercato: ‚Ç¨${marketData.national.averagePrice.toLocaleString()}/m¬≤\n`;
    analysis += `- Differenziale: ${competitiveAnalysis.priceDifferential > 0 ? '+' : ''}‚Ç¨${competitiveAnalysis.priceDifferential.toLocaleString()}/m¬≤ (${competitiveAnalysis.priceDifferentialPercent > 0 ? '+' : ''}${competitiveAnalysis.priceDifferentialPercent.toFixed(1)}%)\n`;
    analysis += `- Posizionamento: ${competitiveAnalysis.positioning}\n`;
    analysis += `- Competitivit√†: ${competitiveAnalysis.competitiveness}\n\n`;
    
    // üéØ ANALISI TREND
    analysis += '### üìà Analisi Trend di Mercato\n';
    
    const trendAnalysis = this.analyzeMarketTrends(marketData, projectData);
    
    analysis += `**üìä Trend Prezzi:**\n`;
    analysis += `- Ultimi 3 mesi: ${trendAnalysis.shortTerm}%\n`;
    analysis += `- Ultimi 6 mesi: ${trendAnalysis.mediumTerm}%\n`;
    analysis += `- Ultimi 12 mesi: ${trendAnalysis.longTerm}%\n`;
    analysis += `- Previsione 6 mesi: ${trendAnalysis.forecast6Months}%\n`;
    analysis += `- Previsione 12 mesi: ${trendAnalysis.forecast12Months}%\n\n`;
    
    analysis += `**üìä Trend Volumi:**\n`;
    analysis += `- Variazione volumi: ${trendAnalysis.volumeChange}%\n`;
    analysis += `- Stagionalit√†: ${trendAnalysis.seasonality}\n`;
    analysis += `- Picco vendite: ${trendAnalysis.peakSeason}\n`;
    analysis += `- Periodo debole: ${trendAnalysis.weakSeason}\n\n`;
    
    // üéØ ANALISI SEGMENTAZIONE
    analysis += '### üéØ Analisi Segmentazione di Mercato\n';
    
    const segmentationAnalysis = this.analyzeMarketSegmentation(projectData, marketData);
    
    analysis += `**üë• Target Demografico:**\n`;
    analysis += `- Et√† media acquirenti: ${segmentationAnalysis.demographics.ageRange}\n`;
    analysis += `- Reddito medio: ‚Ç¨${segmentationAnalysis.demographics.incomeRange}\n`;
    analysis += `- Nucleo familiare: ${segmentationAnalysis.demographics.familySize}\n`;
    analysis += `- Preferenze: ${segmentationAnalysis.demographics.preferences.join(', ')}\n\n`;
    
    analysis += `**üè† Caratteristiche Richieste:**\n`;
    analysis += `- Area media: ${segmentationAnalysis.characteristics.areaRange} m¬≤\n`;
    analysis += `- Caratteristiche: ${segmentationAnalysis.characteristics.features.join(', ')}\n`;
    analysis += `- Servizi: ${segmentationAnalysis.characteristics.services.join(', ')}\n`;
    analysis += `- Trasporti: ${segmentationAnalysis.characteristics.transport}\n\n`;
    
    // üéØ OPPORTUNIT√Ä E MINACCE
    analysis += '### ‚ö° Opportunit√† e Minacce di Mercato\n';
    
    const opportunitiesThreats = this.analyzeOpportunitiesThreats(marketData, projectData);
    
    analysis += `**üöÄ Opportunit√†:**\n`;
    opportunitiesThreats.opportunities.forEach(opp => {
      analysis += `- ${opp.description} (Impatto: ${opp.impact}, Probabilit√†: ${opp.probability}%)\n`;
    });
    
    analysis += `\n**‚ö†Ô∏è Minacce:**\n`;
    opportunitiesThreats.threats.forEach(threat => {
      analysis += `- ${threat.description} (Impatto: ${threat.impact}, Probabilit√†: ${threat.probability}%)\n`;
    });
    
    // üéØ RACCOMANDAZIONI STRATEGICHE
    analysis += '\n### üöÄ Raccomandazioni Strategiche\n';
    
    const strategicRecommendations = this.generateStrategicRecommendations(competitiveAnalysis, trendAnalysis, segmentationAnalysis, opportunitiesThreats);
    
    analysis += `**üìã Strategia di Posizionamento:**\n`;
    strategicRecommendations.positioning.forEach(rec => {
      analysis += `- ${rec}\n`;
    });
    
    analysis += `\n**üí∞ Strategia di Prezzo:**\n`;
    strategicRecommendations.pricing.forEach(rec => {
      analysis += `- ${rec}\n`;
    });
    
    analysis += `\n**üìÖ Strategia di Timing:**\n`;
    strategicRecommendations.timing.forEach(rec => {
      analysis += `- ${rec}\n`;
    });
    
    analysis += `\n**üéØ Strategia di Marketing:**\n`;
    strategicRecommendations.marketing.forEach(rec => {
      analysis += `- ${rec}\n`;
    });
    
    return analysis;
  }

  private async getAdvancedMarketData(propertyType: string, location?: string): Promise<any> {
    // Simula dati di mercato avanzati (in produzione si integrerebbero API reali)
    const baseData = {
      residential: { averagePrice: 3200, minPrice: 1800, maxPrice: 5500, trend: 2.5, salesVolume: 1250, averageTimeToSell: 120 },
      commercial: { averagePrice: 2800, minPrice: 1500, maxPrice: 4500, trend: 1.8, salesVolume: 320, averageTimeToSell: 180 },
      office: { averagePrice: 2500, minPrice: 1200, maxPrice: 4000, trend: 1.2, salesVolume: 180, averageTimeToSell: 200 },
      industrial: { averagePrice: 1200, minPrice: 800, maxPrice: 2000, trend: 0.8, salesVolume: 95, averageTimeToSell: 250 }
    };
    
    const national = baseData[propertyType as keyof typeof baseData] || baseData.residential;
    const local = location ? {
      averagePrice: national.averagePrice * (0.8 + Math.random() * 0.4),
      minPrice: national.minPrice * (0.7 + Math.random() * 0.6),
      maxPrice: national.maxPrice * (0.8 + Math.random() * 0.4),
      trend: national.trend * (0.5 + Math.random()),
      salesVolume: Math.floor(national.salesVolume * (0.1 + Math.random() * 0.2)),
      averageTimeToSell: Math.floor(national.averageTimeToSell * (0.8 + Math.random() * 0.4))
    } : national;
    
    return { national, local };
  }

  private analyzeCompetitivePosition(projectPrice: number, marketData: any, projectData: ProjectData): any {
    const averagePrice = marketData.local?.averagePrice || marketData.national.averagePrice;
    const priceDifferential = projectPrice - averagePrice;
    const priceDifferentialPercent = (priceDifferential / averagePrice) * 100;
    
    let positioning, competitiveness;
    
    if (priceDifferentialPercent > 20) {
      positioning = 'Premium';
      competitiveness = 'Bassa';
    } else if (priceDifferentialPercent > 5) {
      positioning = 'Sopra Media';
      competitiveness = 'Media';
    } else if (priceDifferentialPercent > -5) {
      positioning = 'In Linea';
      competitiveness = 'Alta';
    } else if (priceDifferentialPercent > -20) {
      positioning = 'Sotto Media';
      competitiveness = 'Molto Alta';
    } else {
      positioning = 'Economico';
      competitiveness = 'Massima';
    }
    
    return {
      priceDifferential,
      priceDifferentialPercent,
      positioning,
      competitiveness
    };
  }

  private analyzeMarketTrends(marketData: any, projectData: ProjectData): any {
    const baseTrend = marketData.national.trend;
    
    return {
      shortTerm: (baseTrend * 0.3 + (Math.random() - 0.5) * 2).toFixed(1),
      mediumTerm: (baseTrend * 0.7 + (Math.random() - 0.5) * 1.5).toFixed(1),
      longTerm: baseTrend.toFixed(1),
      forecast6Months: (baseTrend * 1.2 + (Math.random() - 0.5) * 1).toFixed(1),
      forecast12Months: (baseTrend * 1.5 + (Math.random() - 0.5) * 2).toFixed(1),
      volumeChange: ((Math.random() - 0.5) * 20).toFixed(1),
      seasonality: Math.random() > 0.5 ? 'Alta' : 'Bassa',
      peakSeason: ['Primavera', 'Estate', 'Autunno', 'Inverno'][Math.floor(Math.random() * 4)],
      weakSeason: ['Primavera', 'Estate', 'Autunno', 'Inverno'][Math.floor(Math.random() * 4)]
    };
  }

  private analyzeMarketSegmentation(projectData: ProjectData, marketData: any): any {
    const propertyType = projectData.type || 'residenziale';
    
    const demographics = {
      residential: { ageRange: '35-55 anni', incomeRange: '45.000-80.000', familySize: '2-4 persone', preferences: ['Giardino', 'Parcheggio', 'Zona tranquilla'] },
      commercial: { ageRange: '25-45 anni', incomeRange: '30.000-60.000', familySize: '1-2 persone', preferences: ['Vicino servizi', 'Trasporti', 'Zona centrale'] },
      office: { ageRange: '30-50 anni', incomeRange: '40.000-70.000', familySize: '1-3 persone', preferences: ['Vicino uffici', 'Trasporti', 'Servizi'] },
      industrial: { ageRange: '40-60 anni', incomeRange: '35.000-65.000', familySize: '2-5 persone', preferences: ['Vicino autostrada', 'Spazi ampi', 'Zona industriale'] }
    };
    
    const characteristics = {
      residential: { areaRange: '80-150 m¬≤', features: ['Balcone', 'Cantina', 'Box auto'], services: ['Scuole', 'Supermercati', 'Farmacie'], transport: 'Autobus, Metro' },
      commercial: { areaRange: '50-120 m¬≤', features: ['Vetrina', 'Ufficio', 'Magazzino'], services: ['Banche', 'Uffici', 'Negozi'], transport: 'Metro, Autobus' },
      office: { areaRange: '60-200 m¬≤', features: ['Open space', 'Sale riunioni', 'Reception'], services: ['Ristoranti', 'Banche', 'Servizi'], transport: 'Metro, Autobus' },
      industrial: { areaRange: '200-1000 m¬≤', features: ['Carico/scarico', 'Uffici', 'Magazzino'], services: ['Autostrada', 'Servizi industriali'], transport: 'Autostrada, Ferrovia' }
    };
    
    return {
      demographics: demographics[propertyType as keyof typeof demographics] || demographics.residential,
      characteristics: characteristics[propertyType as keyof typeof characteristics] || characteristics.residential
    };
  }

  private analyzeOpportunitiesThreats(marketData: any, projectData: ProjectData): any {
    const opportunities = [
      { description: 'Crescita demografica nella zona', impact: 'Alto', probability: 70 },
      { description: 'Nuove infrastrutture previste', impact: 'Medio', probability: 60 },
      { description: 'Miglioramento trasporti pubblici', impact: 'Medio', probability: 55 },
      { description: 'Sviluppo di servizi commerciali', impact: 'Basso', probability: 80 },
      { description: 'Politiche di incentivo immobiliare', impact: 'Alto', probability: 40 }
    ];
    
    const threats = [
      { description: 'Aumento della competizione', impact: 'Medio', probability: 75 },
      { description: 'Crisi economica locale', impact: 'Alto', probability: 30 },
      { description: 'Cambiamenti normativi', impact: 'Medio', probability: 50 },
      { description: 'Inquinamento o problemi ambientali', impact: 'Alto', probability: 20 },
      { description: 'Calo demografico', impact: 'Medio', probability: 25 }
    ];
    
    return { opportunities, threats };
  }

  private generateStrategicRecommendations(competitiveAnalysis: any, trendAnalysis: any, segmentationAnalysis: any, opportunitiesThreats: any): any {
    const positioning = [];
    const pricing = [];
    const timing = [];
    const marketing = [];
    
    // Strategia di posizionamento
    if (competitiveAnalysis.positioning === 'Premium') {
      positioning.push('Mantieni posizionamento premium con focus su qualit√† e servizi');
      positioning.push('Evidenzia caratteristiche distintive e valore aggiunto');
    } else if (competitiveAnalysis.positioning === 'Sopra Media') {
      positioning.push('Rafforza differenziazione per giustificare prezzo superiore');
      positioning.push('Migliora proposta di valore per target premium');
    } else if (competitiveAnalysis.positioning === 'In Linea') {
      positioning.push('Mantieni posizionamento competitivo');
      positioning.push('Focus su efficienza e qualit√† del servizio');
    } else {
      positioning.push('Sfrutta vantaggio competitivo di prezzo');
      positioning.push('Comunica valore e convenienza');
    }
    
    // Strategia di prezzo
    if (parseFloat(trendAnalysis.forecast6Months) > 0) {
      pricing.push('Considera aumento graduale dei prezzi');
      pricing.push('Monitora trend di mercato per ottimizzare timing');
    } else {
      pricing.push('Mantieni prezzi competitivi');
      pricing.push('Offri incentivi per accelerare vendite');
    }
    
    // Strategia di timing
    if (segmentationAnalysis.demographics.preferences.includes('Giardino')) {
      timing.push('Lancia in primavera per massimizzare appeal');
    } else {
      timing.push('Lancia quando mercato √® pi√π attivo');
    }
    
    // Strategia di marketing
    marketing.push(`Target: ${segmentationAnalysis.demographics.ageRange}`);
    marketing.push(`Focus su: ${segmentationAnalysis.demographics.preferences.join(', ')}`);
    marketing.push('Utilizza canali digitali per raggiungere target');
    
    return { positioning, pricing, timing, marketing };
  }

  private async generateCompetitiveAnalysis(projectData: ProjectData, parameters: Record<string, any>): Promise<string> {
    let analysis = '## üèÜ Analisi Competitiva Avanzata\n\n';
    
    const baseCost = projectData.buildableArea * projectData.constructionCostPerSqm;
    const baseRevenue = (projectData.purchasePrice + baseCost * 1.015) / (1 - projectData.targetMargin);
    const basePricePerSqm = baseRevenue / projectData.buildableArea;
    const baseProfit = baseRevenue - (projectData.purchasePrice + baseCost * 1.015);
    
    analysis += `**üìä Progetto Analizzato:**\n`;
    analysis += `- Nome: ${projectData.name}\n`;
    analysis += `- Tipologia: ${projectData.type || 'residenziale'}\n`;
    analysis += `- Area: ${projectData.buildableArea} m¬≤\n`;
    analysis += `- Prezzo: ‚Ç¨${basePricePerSqm.toLocaleString()}/m¬≤\n`;
    analysis += `- Investimento: ‚Ç¨${(projectData.purchasePrice + baseCost * 1.015).toLocaleString()}\n\n`;
    
    // üéØ ANALISI CONCORRENTI
    analysis += '### üè¢ Analisi Concorrenti\n';
    
    const competitors = this.identifyCompetitors(projectData, parameters.area);
    
    analysis += '| Concorrente | Prezzo/m¬≤ | Area | Caratteristiche | Punti di Forza | Punti di Debolezza |\n';
    analysis += '|-------------|-----------|------|-----------------|----------------|-------------------|\n';
    
    competitors.forEach(comp => {
      analysis += `| ${comp.name} | ‚Ç¨${comp.pricePerSqm.toLocaleString()} | ${comp.area} m¬≤ | ${comp.features.join(', ')} | ${comp.strengths.join(', ')} | ${comp.weaknesses.join(', ')} |\n`;
    });
    
    // üéØ POSIZIONAMENTO COMPETITIVO
    analysis += '\n### üéØ Posizionamento Competitivo\n';
    
    const competitivePositioning = this.analyzeCompetitivePositioning(projectData, competitors, basePricePerSqm);
    
    analysis += `**üìä Matrice Competitiva:**\n`;
    analysis += `- Prezzo vs Qualit√†: ${competitivePositioning.priceQuality}\n`;
    analysis += `- Innovazione: ${competitivePositioning.innovation}\n`;
    analysis += `- Servizio: ${competitivePositioning.service}\n`;
    analysis += `- Posizione: ${competitivePositioning.location}\n`;
    analysis += `- Brand: ${competitivePositioning.brand}\n\n`;
    
    analysis += `**üéØ Posizionamento Strategico:**\n`;
    analysis += `- Quartile: ${competitivePositioning.quartile}\n`;
    analysis += `- Vantaggio competitivo: ${competitivePositioning.advantage}\n`;
    analysis += `- Minacce: ${competitivePositioning.threats.join(', ')}\n`;
    analysis += `- Opportunit√†: ${competitivePositioning.opportunities.join(', ')}\n\n`;
    
    // üéØ ANALISI SWOT
    analysis += '### üìä Analisi SWOT\n';
    
    const swotAnalysis = this.performSWOTAnalysis(projectData, competitors, basePricePerSqm);
    
    analysis += `**üí™ Punti di Forza (Strengths):**\n`;
    swotAnalysis.strengths.forEach(strength => {
      analysis += `- ${strength.description} (Impatto: ${strength.impact})\n`;
    });
    
    analysis += `\n**‚ö†Ô∏è Punti di Debolezza (Weaknesses):**\n`;
    swotAnalysis.weaknesses.forEach(weakness => {
      analysis += `- ${weakness.description} (Impatto: ${weakness.impact})\n`;
    });
    
    analysis += `\n**üöÄ Opportunit√† (Opportunities):**\n`;
    swotAnalysis.opportunities.forEach(opportunity => {
      analysis += `- ${opportunity.description} (Probabilit√†: ${opportunity.probability}%)\n`;
    });
    
    analysis += `\n**‚ö†Ô∏è Minacce (Threats):**\n`;
    swotAnalysis.threats.forEach(threat => {
      analysis += `- ${threat.description} (Probabilit√†: ${threat.probability}%)\n`;
    });
    
    // üéØ ANALISI DIFFERENZIAZIONE
    analysis += '\n### üé® Analisi Differenziazione\n';
    
    const differentiationAnalysis = this.analyzeDifferentiation(projectData, competitors);
    
    analysis += `**üéØ Fattori di Differenziazione:**\n`;
    differentiationAnalysis.factors.forEach(factor => {
      analysis += `- ${factor.name}: ${factor.description} (Peso: ${factor.weight})\n`;
    });
    
    analysis += `\n**üìä Score Differenziazione: ${differentiationAnalysis.totalScore}/100**\n`;
    analysis += `**üé® Livello: ${differentiationAnalysis.level}**\n\n`;
    
    // üéØ STRATEGIA COMPETITIVA
    analysis += '### üöÄ Strategia Competitiva\n';
    
    const competitiveStrategy = this.developCompetitiveStrategy(competitivePositioning, swotAnalysis, differentiationAnalysis);
    
    analysis += `**üéØ Strategia Principale: ${competitiveStrategy.mainStrategy}**\n`;
    analysis += `**üìã Obiettivi:**\n`;
    competitiveStrategy.objectives.forEach(obj => {
      analysis += `- ${obj}\n`;
    });
    
    analysis += `\n**üìà Azioni Immediate (0-3 mesi):**\n`;
    competitiveStrategy.immediateActions.forEach(action => {
      analysis += `- ${action}\n`;
    });
    
    analysis += `\n**üìÖ Azioni Breve Termine (3-6 mesi):**\n`;
    competitiveStrategy.shortTermActions.forEach(action => {
      analysis += `- ${action}\n`;
    });
    
    analysis += `\n**üìÜ Azioni Medio Termine (6-12 mesi):**\n`;
    competitiveStrategy.mediumTermActions.forEach(action => {
      analysis += `- ${action}\n`;
    });
    
    // üéØ MONITORAGGIO COMPETITIVO
    analysis += '\n### üìä Piano di Monitoraggio Competitivo\n';
    
    analysis += `**üìà KPI da Monitorare:**\n`;
    analysis += `- Prezzi concorrenti (settimanale)\n`;
    analysis += `- Nuovi lanci (mensile)\n`;
    analysis += `- Feedback clienti (continuo)\n`;
    analysis += `- Performance vendite (mensile)\n`;
    analysis += `- Innovazioni di mercato (trimestrale)\n\n`;
    
    analysis += `**üîç Fonti di Informazione:**\n`;
    analysis += `- Portali immobiliari\n`;
    analysis += `- Social media\n`;
    analysis += `- Eventi di settore\n`;
    analysis += `- Feedback clienti\n`;
    analysis += `- Analisi di mercato\n`;
    
    return analysis;
  }

  private identifyCompetitors(projectData: ProjectData, area?: string): any[] {
    const competitors = [
      {
        name: 'Progetto Alpha',
        pricePerSqm: basePricePerSqm * (0.9 + Math.random() * 0.2),
        area: projectData.buildableArea * (0.8 + Math.random() * 0.4),
        features: ['Giardino', 'Parcheggio', 'Balcone'],
        strengths: ['Posizione centrale', 'Prezzo competitivo', 'Finitura di qualit√†'],
        weaknesses: ['Area limitata', 'Servizi scarsi', 'Rumore traffico']
      },
      {
        name: 'Progetto Beta',
        pricePerSqm: basePricePerSqm * (1.1 + Math.random() * 0.2),
        area: projectData.buildableArea * (0.9 + Math.random() * 0.2),
        features: ['Terrazza', 'Box auto', 'Cantina'],
        strengths: ['Design moderno', 'Servizi completi', 'Zona prestigiosa'],
        weaknesses: ['Prezzo elevato', 'Spazi ridotti', 'Mancanza verde']
      },
      {
        name: 'Progetto Gamma',
        pricePerSqm: basePricePerSqm * (0.8 + Math.random() * 0.3),
        area: projectData.buildableArea * (1.1 + Math.random() * 0.3),
        features: ['Giardino grande', 'Garage doppio', 'Sottotetto'],
        strengths: ['Spazi ampi', 'Prezzo accessibile', 'Zona tranquilla'],
        weaknesses: ['Posizione periferica', 'Finiture basic', 'Servizi limitati']
      },
      {
        name: 'Progetto Delta',
        pricePerSqm: basePricePerSqm * (1.2 + Math.random() * 0.2),
        area: projectData.buildableArea * (0.7 + Math.random() * 0.2),
        features: ['Terrazza panoramica', 'Piscina', 'Concierge'],
        strengths: ['Lusso', 'Servizi premium', 'Vista panoramica'],
        weaknesses: ['Prezzo molto alto', 'Area limitata', 'Target ristretto']
      }
    ];
    
    return competitors.map(comp => ({
      ...comp,
      pricePerSqm: Math.round(comp.pricePerSqm),
      area: Math.round(comp.area)
    }));
  }

  private analyzeCompetitivePositioning(projectData: ProjectData, competitors: any[], basePricePerSqm: number): any {
    const avgCompetitorPrice = competitors.reduce((sum, comp) => sum + comp.pricePerSqm, 0) / competitors.length;
    const pricePosition = basePricePerSqm > avgCompetitorPrice ? 'Premium' : 'Economico';
    
    const quartile = basePricePerSqm > avgCompetitorPrice * 1.2 ? 'Primo' : 
                    basePricePerSqm > avgCompetitorPrice ? 'Secondo' : 
                    basePricePerSqm > avgCompetitorPrice * 0.8 ? 'Terzo' : 'Quarto';
    
    return {
      priceQuality: pricePosition,
      innovation: Math.random() > 0.5 ? 'Alta' : 'Media',
      service: Math.random() > 0.5 ? 'Eccellente' : 'Buono',
      location: Math.random() > 0.5 ? 'Centrale' : 'Periferica',
      brand: Math.random() > 0.5 ? 'Forte' : 'Emergente',
      quartile,
      advantage: 'Prezzo competitivo e qualit√†',
      threats: ['Nuovi entranti', 'Prezzi in calo', 'Crisi economica'],
      opportunities: ['Crescita mercato', 'Nuove tecnologie', 'Partnership strategiche']
    };
  }

  private performSWOTAnalysis(projectData: ProjectData, competitors: any[], basePricePerSqm: number): any {
    return {
      strengths: [
        { description: 'Prezzo competitivo', impact: 'Alto' },
        { description: 'Posizione strategica', impact: 'Medio' },
        { description: 'Qualit√† costruttiva', impact: 'Alto' },
        { description: 'Servizi inclusi', impact: 'Medio' }
      ],
      weaknesses: [
        { description: 'Brand non consolidato', impact: 'Medio' },
        { description: 'Servizi limitati', impact: 'Basso' },
        { description: 'Marketing insufficiente', impact: 'Medio' }
      ],
      opportunities: [
        { description: 'Crescita demografica', probability: 70 },
        { description: 'Nuove infrastrutture', probability: 60 },
        { description: 'Partnership strategiche', probability: 50 }
      ],
      threats: [
        { description: 'Aumento competizione', probability: 80 },
        { description: 'Crisi economica', probability: 30 },
        { description: 'Cambiamenti normativi', probability: 40 }
      ]
    };
  }

  private analyzeDifferentiation(projectData: ProjectData, competitors: any[]): any {
    const factors = [
      { name: 'Prezzo', description: 'Prezzo competitivo rispetto al mercato', weight: 25 },
      { name: 'Qualit√†', description: 'Alta qualit√† costruttiva e finiture', weight: 20 },
      { name: 'Posizione', description: 'Posizione strategica e accessibilit√†', weight: 20 },
      { name: 'Servizi', description: 'Servizi aggiuntivi e convenienza', weight: 15 },
      { name: 'Design', description: 'Design moderno e funzionale', weight: 10 },
      { name: 'Tecnologia', description: 'Tecnologie smart e sostenibili', weight: 10 }
    ];
    
    const totalScore = factors.reduce((sum, factor) => sum + (factor.weight * (0.6 + Math.random() * 0.4)), 0);
    const level = totalScore > 80 ? 'Eccellente' : totalScore > 60 ? 'Buono' : totalScore > 40 ? 'Medio' : 'Basso';
    
    return { factors, totalScore: Math.round(totalScore), level };
  }

  private developCompetitiveStrategy(positioning: any, swot: any, differentiation: any): any {
    let mainStrategy;
    if (positioning.quartile === 'Primo') {
      mainStrategy = 'Leadership di Prezzo';
    } else if (positioning.quartile === 'Secondo') {
      mainStrategy = 'Differenziazione';
    } else if (positioning.quartile === 'Terzo') {
      mainStrategy = 'Focalizzazione';
    } else {
      mainStrategy = 'Costo Leadership';
    }
    
    return {
      mainStrategy,
      objectives: [
        'Mantenere posizione competitiva',
        'Migliorare differenziazione',
        'Aumentare market share',
        'Rafforzare brand awareness'
      ],
      immediateActions: [
        'Analisi prezzi concorrenti',
        'Miglioramento proposta di valore',
        'Ottimizzazione marketing mix'
      ],
      shortTermActions: [
        'Lanciare campagne promozionali',
        'Migliorare servizi clienti',
        'Sviluppare partnership'
      ],
      mediumTermActions: [
        'Innovazione prodotto',
        'Espansione geografica',
        'Rafforzamento brand'
      ]
    };
  }

  private async generateInvestmentValuation(projectData: ProjectData, parameters: Record<string, any>): Promise<string> {
    let analysis = '## üí∞ Valutazione Investimento Avanzata\n\n';
    
    const baseCost = projectData.buildableArea * projectData.constructionCostPerSqm;
    const baseRevenue = (projectData.purchasePrice + baseCost * 1.015) / (1 - projectData.targetMargin);
    const basePricePerSqm = baseRevenue / projectData.buildableArea;
    const baseProfit = baseRevenue - (projectData.purchasePrice + baseCost * 1.015);
    
    analysis += `**üìä Progetto Analizzato:**\n`;
    analysis += `- Nome: ${projectData.name}\n`;
    analysis += `- Investimento totale: ‚Ç¨${(projectData.purchasePrice + baseCost * 1.015).toLocaleString()}\n`;
    analysis += `- Profitto atteso: ‚Ç¨${baseProfit.toLocaleString()}\n`;
    analysis += `- ROI atteso: ${((baseProfit / (projectData.purchasePrice + baseCost)) * 100).toFixed(1)}%\n\n`;
    
    // üéØ VALUTAZIONE DCF
    analysis += '### üìà Valutazione DCF (Discounted Cash Flow)\n';
    
    const dcfAnalysis = this.performDCFAnalysis(projectData, baseProfit, parameters.timeHorizon || 5);
    
    analysis += `**üí∞ Flussi di Cassa Proiettati:**\n`;
    analysis += `- Anno 0 (Investimento): -‚Ç¨${(projectData.purchasePrice + baseCost * 1.015).toLocaleString()}\n`;
    
    for (let year = 1; year <= dcfAnalysis.years; year++) {
      const cashFlow = dcfAnalysis.cashFlows[year - 1];
      analysis += `- Anno ${year}: ‚Ç¨${cashFlow.toLocaleString()}\n`;
    }
    
    analysis += `\n**üìä Metriche DCF:**\n`;
    analysis += `- NPV (Net Present Value): ‚Ç¨${dcfAnalysis.npv.toLocaleString()}\n`;
    analysis += `- IRR (Internal Rate of Return): ${dcfAnalysis.irr.toFixed(2)}%\n`;
    analysis += `- Payback Period: ${dcfAnalysis.paybackPeriod.toFixed(1)} anni\n`;
    analysis += `- Profitability Index: ${dcfAnalysis.profitabilityIndex.toFixed(2)}\n\n`;
    
    // üéØ VALUTAZIONE COMPARATIVA
    analysis += '### üìä Valutazione Comparativa\n';
    
    const comparativeValuation = this.performComparativeValuation(projectData, basePricePerSqm);
    
    analysis += `**üè† Metodo Comparativo (Prezzi/m¬≤):**\n`;
    analysis += `- Il tuo progetto: ‚Ç¨${basePricePerSqm.toLocaleString()}/m¬≤\n`;
    analysis += `- Media mercato: ‚Ç¨${comparativeValuation.marketAverage.toLocaleString()}/m¬≤\n`;
    analysis += `- Range mercato: ‚Ç¨${comparativeValuation.marketMin.toLocaleString()}/m¬≤ - ‚Ç¨${comparativeValuation.marketMax.toLocaleString()}/m¬≤\n`;
    analysis += `- Posizionamento: ${comparativeValuation.positioning}\n`;
    analysis += `- Valore stimato: ‚Ç¨${comparativeValuation.estimatedValue.toLocaleString()}\n\n`;
    
    // üéØ VALUTAZIONE REDDITUALE
    analysis += '### üíº Valutazione Reddituale\n';
    
    const incomeValuation = this.performIncomeValuation(projectData, baseRevenue);
    
    analysis += `**üìà Metodo Reddituale:**\n`;
    analysis += `- Ricavo annuo: ‚Ç¨${incomeValuation.annualRevenue.toLocaleString()}\n`;
    analysis += `- Cap Rate: ${incomeValuation.capRate.toFixed(2)}%\n`;
    analysis += `- Valore reddituale: ‚Ç¨${incomeValuation.incomeValue.toLocaleString()}\n`;
    analysis += `- Valore per m¬≤: ‚Ç¨${incomeValuation.valuePerSqm.toLocaleString()}/m¬≤\n\n`;
    
    // üéØ VALUTAZIONE COSTI
    analysis += '### üèóÔ∏è Valutazione Costi\n';
    
    const costValuation = this.performCostValuation(projectData, baseCost);
    
    analysis += `**üí∞ Metodo Costi:**\n`;
    analysis += `- Costo terreno: ‚Ç¨${projectData.purchasePrice.toLocaleString()}\n`;
    analysis += `- Costo costruzione: ‚Ç¨${baseCost.toLocaleString()}\n`;
    analysis += `- Costi accessori: ‚Ç¨${costValuation.additionalCosts.toLocaleString()}\n`;
    analysis += `- Costo totale: ‚Ç¨${costValuation.totalCost.toLocaleString()}\n`;
    analysis += `- Valore costi: ‚Ç¨${costValuation.costValue.toLocaleString()}\n`;
    analysis += `- Valore per m¬≤: ‚Ç¨${costValuation.valuePerSqm.toLocaleString()}/m¬≤\n\n`;
    
    // üéØ VALUTAZIONE FINALE
    analysis += '### üéØ Valutazione Finale\n';
    
    const finalValuation = this.calculateFinalValuation(dcfAnalysis, comparativeValuation, incomeValuation, costValuation);
    
    analysis += `**üìä Valutazioni per Metodo:**\n`;
    analysis += `- DCF: ‚Ç¨${finalValuation.dcfValue.toLocaleString()}\n`;
    analysis += `- Comparativo: ‚Ç¨${finalValuation.comparativeValue.toLocaleString()}\n`;
    analysis += `- Reddituale: ‚Ç¨${finalValuation.incomeValue.toLocaleString()}\n`;
    analysis += `- Costi: ‚Ç¨${finalValuation.costValue.toLocaleString()}\n\n`;
    
    analysis += `**üéØ Valutazione Media Ponderata:**\n`;
    analysis += `- Valore finale: ‚Ç¨${finalValuation.finalValue.toLocaleString()}\n`;
    analysis += `- Valore per m¬≤: ‚Ç¨${finalValuation.finalValuePerSqm.toLocaleString()}/m¬≤\n`;
    analysis += `- Range di confidenza: ‚Ç¨${finalValuation.confidenceRange.min.toLocaleString()} - ‚Ç¨${finalValuation.confidenceRange.max.toLocaleString()}\n`;
    analysis += `- Livello di confidenza: ${finalValuation.confidenceLevel}%\n\n`;
    
    // üéØ ANALISI SENSIBILIT√Ä VALUTAZIONE
    analysis += '### üìä Analisi Sensibilit√† Valutazione\n';
    
    const sensitivityAnalysis = this.performValuationSensitivity(projectData, finalValuation);
    
    analysis += `**üìà Variazioni Valutazione:**\n`;
    analysis += `- Scenario Pessimistico (-20%): ‚Ç¨${sensitivityAnalysis.pessimistic.toLocaleString()}\n`;
    analysis += `- Scenario Base (0%): ‚Ç¨${sensitivityAnalysis.base.toLocaleString()}\n`;
    analysis += `- Scenario Ottimistico (+20%): ‚Ç¨${sensitivityAnalysis.optimistic.toLocaleString()}\n`;
    analysis += `- Range totale: ‚Ç¨${sensitivityAnalysis.range.toLocaleString()}\n\n`;
    
    // üéØ RACCOMANDAZIONI INVESTIMENTO
    analysis += '### üöÄ Raccomandazioni Investimento\n';
    
    const investmentRecommendations = this.generateInvestmentRecommendations(finalValuation, dcfAnalysis, sensitivityAnalysis);
    
    analysis += `**üí° Raccomandazione: ${investmentRecommendations.recommendation}**\n`;
    analysis += `**üìã Motivazioni:**\n`;
    investmentRecommendations.reasons.forEach(reason => {
      analysis += `- ${reason}\n`;
    });
    
    analysis += `\n**üìà Azioni Consigliate:**\n`;
    investmentRecommendations.actions.forEach(action => {
      analysis += `- ${action}\n`;
    });
    
    analysis += `\n**‚ö†Ô∏è Rischi da Monitorare:**\n`;
    investmentRecommendations.risks.forEach(risk => {
      analysis += `- ${risk}\n`;
    });
    
    return analysis;
  }

  private performDCFAnalysis(projectData: ProjectData, baseProfit: number, years: number): any {
    const discountRate = 0.08; // 8% tasso di sconto
    const cashFlows = [];
    let npv = -(projectData.purchasePrice + projectData.buildableArea * projectData.constructionCostPerSqm * 1.015);
    
    for (let year = 1; year <= years; year++) {
      const cashFlow = baseProfit * Math.pow(1.02, year - 1); // 2% crescita annua
      cashFlows.push(cashFlow);
      npv += cashFlow / Math.pow(1 + discountRate, year);
    }
    
    // Calcola IRR (approssimazione)
    const irr = this.calculateIRR(cashFlows, projectData.purchasePrice + projectData.buildableArea * projectData.constructionCostPerSqm * 1.015);
    
    // Calcola Payback Period
    let paybackPeriod = 0;
    let cumulativeCashFlow = 0;
    const initialInvestment = projectData.purchasePrice + projectData.buildableArea * projectData.constructionCostPerSqm * 1.015;
    
    for (let i = 0; i < cashFlows.length; i++) {
      cumulativeCashFlow += cashFlows[i];
      if (cumulativeCashFlow >= initialInvestment) {
        paybackPeriod = i + 1;
        break;
      }
    }
    
    const profitabilityIndex = npv / initialInvestment;
    
    return {
      years,
      cashFlows,
      npv: Math.round(npv),
      irr: irr * 100,
      paybackPeriod,
      profitabilityIndex
    };
  }

  private calculateIRR(cashFlows: number[], initialInvestment: number): number {
    // Approssimazione IRR usando il metodo di Newton-Raphson
    let rate = 0.1; // Tasso iniziale 10%
    const tolerance = 0.0001;
    const maxIterations = 100;
    
    for (let i = 0; i < maxIterations; i++) {
      let npv = -initialInvestment;
      let npvDerivative = 0;
      
      for (let year = 1; year <= cashFlows.length; year++) {
        const discountFactor = Math.pow(1 + rate, year);
        npv += cashFlows[year - 1] / discountFactor;
        npvDerivative -= (year * cashFlows[year - 1]) / (discountFactor * (1 + rate));
      }
      
      if (Math.abs(npv) < tolerance) break;
      
      rate = rate - npv / npvDerivative;
    }
    
    return rate;
  }

  private performComparativeValuation(projectData: ProjectData, basePricePerSqm: number): any {
    const marketAverage = basePricePerSqm * (0.8 + Math.random() * 0.4);
    const marketMin = marketAverage * 0.7;
    const marketMax = marketAverage * 1.3;
    
    let positioning;
    if (basePricePerSqm > marketMax) {
      positioning = 'Premium';
    } else if (basePricePerSqm > marketAverage) {
      positioning = 'Sopra Media';
    } else if (basePricePerSqm > marketMin) {
      positioning = 'In Linea';
    } else {
      positioning = 'Sotto Media';
    }
    
    const estimatedValue = basePricePerSqm * projectData.buildableArea;
    
    return {
      marketAverage: Math.round(marketAverage),
      marketMin: Math.round(marketMin),
      marketMax: Math.round(marketMax),
      positioning,
      estimatedValue: Math.round(estimatedValue)
    };
  }

  private performIncomeValuation(projectData: ProjectData, baseRevenue: number): any {
    const annualRevenue = baseRevenue * 0.05; // 5% del valore come reddito annuo
    const capRate = 0.05; // 5% cap rate
    const incomeValue = annualRevenue / capRate;
    const valuePerSqm = incomeValue / projectData.buildableArea;
    
    return {
      annualRevenue: Math.round(annualRevenue),
      capRate: capRate * 100,
      incomeValue: Math.round(incomeValue),
      valuePerSqm: Math.round(valuePerSqm)
    };
  }

  private performCostValuation(projectData: ProjectData, baseCost: number): any {
    const additionalCosts = baseCost * 0.15; // 15% costi aggiuntivi
    const totalCost = projectData.purchasePrice + baseCost + additionalCosts;
    const costValue = totalCost * 1.1; // 10% margine
    const valuePerSqm = costValue / projectData.buildableArea;
    
    return {
      additionalCosts: Math.round(additionalCosts),
      totalCost: Math.round(totalCost),
      costValue: Math.round(costValue),
      valuePerSqm: Math.round(valuePerSqm)
    };
  }

  private calculateFinalValuation(dcfAnalysis: any, comparativeValuation: any, incomeValuation: any, costValuation: any): any {
    const dcfValue = dcfAnalysis.npv + (projectData.purchasePrice + projectData.buildableArea * projectData.constructionCostPerSqm * 1.015);
    const comparativeValue = comparativeValuation.estimatedValue;
    const incomeValue = incomeValuation.incomeValue;
    const costValue = costValuation.costValue;
    
    // Media ponderata: DCF 40%, Comparativo 30%, Reddituale 20%, Costi 10%
    const finalValue = (dcfValue * 0.4 + comparativeValue * 0.3 + incomeValue * 0.2 + costValue * 0.1);
    const finalValuePerSqm = finalValue / projectData.buildableArea;
    
    const confidenceRange = {
      min: finalValue * 0.85,
      max: finalValue * 1.15
    };
    
    return {
      dcfValue: Math.round(dcfValue),
      comparativeValue: Math.round(comparativeValue),
      incomeValue: Math.round(incomeValue),
      costValue: Math.round(costValue),
      finalValue: Math.round(finalValue),
      finalValuePerSqm: Math.round(finalValuePerSqm),
      confidenceRange: {
        min: Math.round(confidenceRange.min),
        max: Math.round(confidenceRange.max)
      },
      confidenceLevel: 85
    };
  }

  private performValuationSensitivity(projectData: ProjectData, finalValuation: any): any {
    const base = finalValuation.finalValue;
    const pessimistic = base * 0.8;
    const optimistic = base * 1.2;
    const range = optimistic - pessimistic;
    
    return {
      pessimistic: Math.round(pessimistic),
      base: Math.round(base),
      optimistic: Math.round(optimistic),
      range: Math.round(range)
    };
  }

  private generateInvestmentRecommendations(finalValuation: any, dcfAnalysis: any, sensitivityAnalysis: any): any {
    let recommendation;
    const reasons = [];
    const actions = [];
    const risks = [];
    
    if (dcfAnalysis.npv > 0 && dcfAnalysis.irr > 0.08) {
      recommendation = 'INVESTIMENTO RACCOMANDATO';
      reasons.push('NPV positivo e IRR superiore al costo del capitale');
      reasons.push('Payback period accettabile');
      actions.push('Procedere con l\'investimento');
      actions.push('Monitorare performance mensile');
    } else if (dcfAnalysis.npv > 0) {
      recommendation = 'INVESTIMENTO CONDIZIONATO';
      reasons.push('NPV positivo ma IRR inferiore alle aspettative');
      reasons.push('Valutare alternative di investimento');
      actions.push('Rivedere strategia di prezzo');
      actions.push('Considerare riduzione costi');
    } else {
      recommendation = 'INVESTIMENTO SCONSIGLIATO';
      reasons.push('NPV negativo');
      reasons.push('ROI insufficiente');
      actions.push('Rivedere completamente il progetto');
      actions.push('Considerare alternative');
    }
    
    risks.push('Variazioni di mercato');
    risks.push('Aumento costi di costruzione');
    risks.push('Ritardi nei permessi');
    risks.push('Crisi economica');
    
    return {
      recommendation,
      reasons,
      actions,
      risks
    };
  }

  // üöÄ FASE 4: WORKFLOW INTELLIGENTE - Metodi di generazione

  private async generateComplexWorkflow(projectData: ProjectData, parameters: Record<string, any>): Promise<string> {
    let analysis = `# üöÄ WORKFLOW COMPLESSO - ${projectData.name}\n\n`;
    
    const workflowType = parameters.workflowType || 'development';
    const phases = parameters.phases || ['design', 'permits', 'financing', 'construction', 'sales'];
    const timeline = parameters.timeline || { value: 24, unit: 'mesi' };
    
    analysis += `**üìã Tipo Workflow:** ${workflowType.toUpperCase()}\n`;
    analysis += `**‚è±Ô∏è Timeline:** ${timeline.value} ${timeline.unit}\n\n`;
    
    // Fase 1: Analisi Preliminare
    analysis += `## üéØ FASE 1: ANALISI PRELIMINARE\n`;
    analysis += `- **Valutazione Terreno:** ${projectData.landArea} mq\n`;
    analysis += `- **Area Costruibile:** ${projectData.buildableArea} mq\n`;
    analysis += `- **Costo Costruzione:** ‚Ç¨${projectData.constructionCostPerSqm}/mq\n`;
    analysis += `- **Prezzo Acquisto:** ‚Ç¨${projectData.purchasePrice.toLocaleString()}\n`;
    analysis += `- **Margine Target:** ${(projectData.targetMargin * 100).toFixed(1)}%\n\n`;
    
    // Fase 2: Pianificazione Strategica
    analysis += `## üéØ FASE 2: PIANIFICAZIONE STRATEGICA\n`;
    analysis += `- **Obiettivo Principale:** Massimizzare ROI\n`;
    analysis += `- **Strategia di Prezzo:** Analisi comparativa mercato\n`;
    analysis += `- **Timeline Vendite:** ${timeline.value} ${timeline.unit}\n`;
    analysis += `- **Target Clienti:** Investitori e famiglie\n\n`;
    
    // Fase 3: Workflow Operativo
    analysis += `## üéØ FASE 3: WORKFLOW OPERATIVO\n`;
    phases.forEach((phase, index) => {
      const phaseNames = {
        'design': 'Progettazione',
        'permits': 'Permessi',
        'financing': 'Finanziamento',
        'construction': 'Costruzione',
        'sales': 'Vendita'
      };
      analysis += `${index + 1}. **${phaseNames[phase] || phase}** - ${Math.ceil(timeline.value / phases.length)} ${timeline.unit}\n`;
    });
    
    // Fase 4: Monitoraggio e Controllo
    analysis += `\n## üéØ FASE 4: MONITORAGGIO E CONTROLLO\n`;
    analysis += `- **KPI Principali:** ROI, Tempo di vendita, Margine\n`;
    analysis += `- **Report Periodici:** Settimanali\n`;
    analysis += `- **Soglie di Allerta:** -10% margine, +20% tempo\n`;
    analysis += `- **Azioni Correttive:** Rivedere prezzo, ottimizzare costi\n\n`;
    
    // Raccomandazioni
    analysis += `## üí° RACCOMANDAZIONI STRATEGICHE\n`;
    analysis += `1. **Iniziare subito** con la fase di progettazione\n`;
    analysis += `2. **Parallelizzare** permessi e finanziamento\n`;
    analysis += `3. **Monitorare** costantemente i costi di costruzione\n`;
    analysis += `4. **Preparare** strategia di vendita in anticipo\n`;
    analysis += `5. **Mantenere** flessibilit√† per adattamenti\n\n`;
    
    return analysis;
  }

  private async generateMultiStepAnalysis(projectData: ProjectData, parameters: Record<string, any>): Promise<string> {
    let analysis = `# üîç ANALISI MULTI-STEP - ${projectData.name}\n\n`;
    
    const analysisType = parameters.analysisType || 'feasibility';
    const detailLevel = parameters.detailLevel || 'detailed';
    const components = parameters.components || ['technical', 'economic', 'financial'];
    
    analysis += `**üìä Tipo Analisi:** ${analysisType.toUpperCase()}\n`;
    analysis += `**üî¨ Livello Dettaglio:** ${detailLevel.toUpperCase()}\n`;
    analysis += `**üß© Componenti:** ${components.join(', ').toUpperCase()}\n\n`;
    
    // Step 1: Analisi Tecnica
    if (components.includes('technical')) {
      analysis += `## üîß STEP 1: ANALISI TECNICA\n`;
      analysis += `- **Fattibilit√† Costruttiva:** ‚úÖ Verificata\n`;
      analysis += `- **Vincoli Normativi:** Analisi in corso\n`;
      analysis += `- **Infrastrutture:** Valutazione necessaria\n`;
      analysis += `- **Accessibilit√†:** Da verificare\n\n`;
    }
    
    // Step 2: Analisi Economica
    if (components.includes('economic')) {
      analysis += `## üí∞ STEP 2: ANALISI ECONOMICA\n`;
      const totalCost = projectData.buildableArea * projectData.constructionCostPerSqm;
      const totalRevenue = totalCost * (1 + projectData.targetMargin);
      const profit = totalRevenue - totalCost - projectData.purchasePrice;
      
      analysis += `- **Costo Totale Costruzione:** ‚Ç¨${totalCost.toLocaleString()}\n`;
      analysis += `- **Ricavi Stimati:** ‚Ç¨${totalRevenue.toLocaleString()}\n`;
      analysis += `- **Profitto Lordo:** ‚Ç¨${profit.toLocaleString()}\n`;
      analysis += `- **ROI:** ${((profit / projectData.purchasePrice) * 100).toFixed(1)}%\n\n`;
    }
    
    // Step 3: Analisi Finanziaria
    if (components.includes('financial')) {
      analysis += `## üìà STEP 3: ANALISI FINANZIARIA\n`;
      analysis += `- **Flussi di Cassa:** Proiezione 24 mesi\n`;
      analysis += `- **Break-even:** Calcolo in corso\n`;
      analysis += `- **Sensibilit√†:** Analisi variazioni ¬±20%\n`;
      analysis += `- **Scenari:** Pessimistico, Base, Ottimistico\n\n`;
    }
    
    // Step 4: Analisi di Rischio
    if (components.includes('risk')) {
      analysis += `## ‚ö†Ô∏è STEP 4: ANALISI DI RISCHIO\n`;
      analysis += `- **Rischio Mercato:** Medio\n`;
      analysis += `- **Rischio Costruzione:** Basso\n`;
      analysis += `- **Rischio Finanziario:** Medio\n`;
      analysis += `- **Mitigazione:** Diversificazione, Assicurazioni\n\n`;
    }
    
    // Step 5: Raccomandazioni Finali
    analysis += `## üéØ STEP 5: RACCOMANDAZIONI FINALI\n`;
    analysis += `1. **Procedere** con l'analisi dettagliata\n`;
    analysis += `2. **Verificare** tutti i vincoli normativi\n`;
    analysis += `3. **Ottimizzare** la struttura finanziaria\n`;
    analysis += `4. **Preparare** piano di mitigazione rischi\n`;
    analysis += `5. **Monitorare** costantemente l'evoluzione\n\n`;
    
    return analysis;
  }

  private async generateIntelligentPlanning(projectData: ProjectData, parameters: Record<string, any>): Promise<string> {
    let analysis = `# üß† PIANIFICAZIONE INTELLIGENTE - ${projectData.name}\n\n`;
    
    const planningType = parameters.planningType || 'strategic';
    const objectives = parameters.objectives || ['efficiency', 'profitability'];
    const horizon = parameters.horizon || { value: 24, unit: 'mesi' };
    
    analysis += `**üéØ Tipo Pianificazione:** ${planningType.toUpperCase()}\n`;
    analysis += `**üé™ Obiettivi:** ${objectives.join(', ').toUpperCase()}\n`;
    analysis += `**‚è∞ Orizzonte:** ${horizon.value} ${horizon.unit}\n\n`;
    
    // Piano Strategico
    analysis += `## üéØ PIANO STRATEGICO\n`;
    analysis += `### Visione\n`;
    analysis += `Sviluppare un progetto immobiliare di successo che massimizzi il ROI e soddisfi le esigenze del mercato target.\n\n`;
    
    analysis += `### Missione\n`;
    analysis += `Creare valore attraverso sviluppo immobiliare sostenibile e redditizio.\n\n`;
    
    analysis += `### Obiettivi Chiave\n`;
    objectives.forEach((obj, index) => {
      const objNames = {
        'efficiency': 'Massimizzare efficienza operativa',
        'profitability': 'Garantire redditivit√† target',
        'growth': 'Espandere portafoglio progetti',
        'sustainability': 'Sviluppo sostenibile'
      };
      analysis += `${index + 1}. ${objNames[obj] || obj}\n`;
    });
    
    // Piano Operativo
    analysis += `\n## ‚öôÔ∏è PIANO OPERATIVO\n`;
    analysis += `### Fase 1: Pre-Development (0-3 mesi)\n`;
    analysis += `- Analisi di mercato approfondita\n`;
    analysis += `- Progettazione preliminare\n`;
    analysis += `- Raccolta permessi\n`;
    analysis += `- Strutturazione finanziaria\n\n`;
    
    analysis += `### Fase 2: Development (3-18 mesi)\n`;
    analysis += `- Costruzione\n`;
    analysis += `- Controllo qualit√†\n`;
    analysis += `- Gestione fornitori\n`;
    analysis += `- Monitoraggio costi\n\n`;
    
    analysis += `### Fase 3: Commercialization (18-24 mesi)\n`;
    analysis += `- Marketing e vendite\n`;
    analysis += `- Gestione clienti\n`;
    analysis += `- Consegna immobili\n`;
    analysis += `- Chiusura progetto\n\n`;
    
    // Piano di Controllo
    analysis += `## üìä PIANO DI CONTROLLO\n`;
    analysis += `### KPI Principali\n`;
    analysis += `- **ROI Target:** ${(projectData.targetMargin * 100).toFixed(1)}%\n`;
    analysis += `- **Timeline:** ${horizon.value} ${horizon.unit}\n`;
    analysis += `- **Budget:** ‚Ç¨${(projectData.buildableArea * projectData.constructionCostPerSqm).toLocaleString()}\n`;
    analysis += `- **Qualit√†:** 100% conformit√† normativa\n\n`;
    
    analysis += `### Report Periodici\n`;
    analysis += `- **Settimanali:** Progresso costruzione\n`;
    analysis += `- **Mensili:** Performance finanziaria\n`;
    analysis += `- **Trimestrali:** Review strategica\n`;
    analysis += `- **Annuali:** Valutazione complessiva\n\n`;
    
    return analysis;
  }

  private async generateStrategicConsulting(projectData: ProjectData, parameters: Record<string, any>): Promise<string> {
    let analysis = `# üéØ CONSULENZA STRATEGICA - ${projectData.name}\n\n`;
    
    const consultingArea = parameters.consultingArea || 'investments';
    const supportType = parameters.supportType || 'decision_support';
    const urgency = parameters.urgency || 'medium';
    
    analysis += `**üè¢ Area Consulenza:** ${consultingArea.toUpperCase()}\n`;
    analysis += `**üõ†Ô∏è Tipo Supporto:** ${supportType.toUpperCase()}\n`;
    analysis += `**‚ö° Urgenza:** ${urgency.toUpperCase()}\n\n`;
    
    // Analisi Situazionale
    analysis += `## üìä ANALISI SITUAZIONALE\n`;
    analysis += `### Punti di Forza\n`;
    analysis += `- **Posizione Strategica:** Terreno ben localizzato\n`;
    analysis += `- **Margine Target:** ${(projectData.targetMargin * 100).toFixed(1)}% competitivo\n`;
    analysis += `- **Area Costruibile:** ${projectData.buildableArea} mq ottimale\n`;
    analysis += `- **Costo Costruzione:** ‚Ç¨${projectData.constructionCostPerSqm}/mq controllato\n\n`;
    
    analysis += `### Aree di Miglioramento\n`;
    analysis += `- **Analisi Mercato:** Approfondire target clienti\n`;
    analysis += `- **Gestione Rischio:** Implementare mitigazioni\n`;
    analysis += `- **Efficienza Operativa:** Ottimizzare processi\n`;
    analysis += `- **Sostenibilit√†:** Valutare impatto ambientale\n\n`;
    
    // Raccomandazioni Strategiche
    analysis += `## üí° RACCOMANDAZIONI STRATEGICHE\n`;
    
    if (consultingArea === 'investments') {
      analysis += `### Investimenti\n`;
      analysis += `1. **Diversificare** portafoglio progetti\n`;
      analysis += `2. **Ottimizzare** struttura finanziaria\n`;
      analysis += `3. **Monitorare** trend di mercato\n`;
      analysis += `4. **Valutare** partnership strategiche\n\n`;
    }
    
    if (consultingArea === 'development') {
      analysis += `### Sviluppo\n`;
      analysis += `1. **Accelerare** fase progettuale\n`;
      analysis += `2. **Parallelizzare** attivit√† critiche\n`;
      analysis += `3. **Controllare** costi di costruzione\n`;
      analysis += `4. **Gestire** fornitori chiave\n\n`;
    }
    
    if (consultingArea === 'market') {
      analysis += `### Mercato\n`;
      analysis += `1. **Analizzare** concorrenza locale\n`;
      analysis += `2. **Identificare** nicchie di mercato\n`;
      analysis += `3. **Sviluppare** proposta di valore\n`;
      analysis += `4. **Posizionare** prezzo competitivo\n\n`;
    }
    
    // Piano di Azione
    analysis += `## üéØ PIANO DI AZIONE\n`;
    analysis += `### Azioni Immediate (0-30 giorni)\n`;
    analysis += `- Completare analisi di mercato\n`;
    analysis += `- Finalizzare progettazione\n`;
    analysis += `- Avviare pratiche permessi\n`;
    analysis += `- Strutturare finanziamento\n\n`;
    
    analysis += `### Azioni a Medio Termine (1-6 mesi)\n`;
    analysis += `- Iniziare costruzione\n`;
    analysis += `- Implementare controlli qualit√†\n`;
    analysis += `- Sviluppare strategia vendite\n`;
    analysis += `- Gestire stakeholder\n\n`;
    
    analysis += `### Azioni a Lungo Termine (6-24 mesi)\n`;
    analysis += `- Completare costruzione\n`;
    analysis += `- Avviare vendite\n`;
    analysis += `- Monitorare performance\n`;
    analysis += `- Valutare replicabilit√†\n\n`;
    
    // Monitoraggio e Follow-up
    analysis += `## üìà MONITORAGGIO E FOLLOW-UP\n`;
    analysis += `### Metriche di Successo\n`;
    analysis += `- **ROI Raggiunto:** ${(projectData.targetMargin * 100).toFixed(1)}%\n`;
    analysis += `- **Timeline Rispettata:** 100%\n`;
    analysis += `- **Budget Rispettato:** ¬±5%\n`;
    analysis += `- **Qualit√†:** 100% conformit√†\n\n`;
    
    analysis += `### Review Periodiche\n`;
    analysis += `- **Settimanali:** Progresso operativo\n`;
    analysis += `- **Mensili:** Performance finanziaria\n`;
    analysis += `- **Trimestrali:** Review strategica\n`;
    analysis += `- **Finale:** Valutazione complessiva\n\n`;
    
    return analysis;
  }

  private extractFeasibilityData(message: string): any {
    // Estrae dati di fattibilit√† dal messaggio dell'utente
    const data: any = {};
    
    console.log('üîç [UrbanovaOS] Estraendo dati da:', message.substring(0, 100));
    
    // Nome progetto - pattern pi√π flessibili
    const projectNamePatterns = [
      /nome del progetto[:\s]+([^,.\n]+)/i,
      /progetto[:\s]+([^,.\n]+)/i,
      /villa\s+([^,.\n]+)/i,
      /([^,.\n]+)\s*terreno/i,
      /studio di fattibilit√†[:\s]+([^,.\n]+)/i,
      /analisi di fattibilit√†[:\s]+([^,.\n]+)/i,
      /analisi di fattibilit√† per un progetto di ([^,.\n]+)/i,
      /progetto di ([^,.\n]+) in/i,
      /bifamiliare in ([^,.\n]+)/i,
      /([^,.\n]+) a Monteporzio/i
    ];
    
    for (const pattern of projectNamePatterns) {
      const match = message.match(pattern);
      if (match) {
        data.name = match[1].trim();
        break;
      }
    }
    
    // Area terreno - pattern pi√π flessibili
    const landAreaPatterns = [
      /terreno.*?(\d+)\s*metri quadrati/i,
      /terreno.*?(\d+)\s*mq/i,
      /terreno.*?(\d+)\s*m¬≤/i
    ];
    
    for (const pattern of landAreaPatterns) {
      const match = message.match(pattern);
      if (match) {
        data.landArea = parseInt(match[1]);
        break;
      }
    }
    
    // Area costruibile - pattern pi√π flessibili
    const buildableAreaPatterns = [
      /(\d+)\s*metri quadrati totali/i,
      /area costruibile.*?(\d+)\s*mq/i,
      /area costruibile.*?(\d+)\s*metri quadrati/i,
      /costruibile.*?(\d+)\s*mq/i,
      /terreno ha (\d+)\s*mq edificabili/i,
      /(\d+)\s*mq edificabili/i,
      /edificabili.*?(\d+)\s*mq/i
    ];
    
    for (const pattern of buildableAreaPatterns) {
      const match = message.match(pattern);
      if (match) {
        data.buildableArea = parseInt(match[1]);
        break;
      }
    }
    
    // Tipo progetto
    if (message.match(/bifamiliare/i)) data.type = 'bifamiliare';
    if (message.match(/monofamiliare/i)) data.type = 'monofamiliare';
    if (message.match(/residenziale/i)) data.type = 'residenziale';
    
    // Appartamenti/Parcheggi
    const parkingMatch = message.match(/(\d+)\s*parcheggi/i);
    if (parkingMatch) data.parkingSpaces = parseInt(parkingMatch[1]);
    
    // Area per appartamento/bifamiliare
    const apartmentAreaMatch = message.match(/(\d+)\s*metri quadrati per appartamento/i);
    if (apartmentAreaMatch) data.apartmentArea = parseInt(apartmentAreaMatch[1]);
    
    // Area per bifamiliare specifica
    const bifamiliareAreaMatch = message.match(/(\d+)\s*mq per una/i);
    if (bifamiliareAreaMatch) data.apartmentArea = parseInt(bifamiliareAreaMatch[1]);
    
    // Numero di unit√†
    const unitsMatch = message.match(/due\s+([^,.\n]+)/i);
    if (unitsMatch) data.units = 2;
    
    // Costo costruzione - pattern pi√π flessibili
    const constructionCostPatterns = [
      /(\d+)\s*euro per metro quadrato/i,
      /costo.*?(\d+)\s*euro\/mq/i,
      /(\d+)\s*euro\/m¬≤/i,
      /(\d+)\s*‚Ç¨\/mq/i
    ];
    
    for (const pattern of constructionCostPatterns) {
      const match = message.match(pattern);
      if (match) {
        data.constructionCostPerSqm = parseInt(match[1]);
        break;
      }
    }
    
    // Assicurazioni
    const insuranceMatch = message.match(/(\d+(?:\.\d+)?)%\s*di assicurazioni/i);
    if (insuranceMatch) {
      data.insuranceRate = parseFloat(insuranceMatch[1]) / 100;
    } else {
      // Valore di default per le assicurazioni se non specificato
      data.insuranceRate = 0.015; // 1.5%
    }
    
    // Prezzo acquisto - pattern pi√π flessibili
    const purchasePricePatterns = [
      /prezzo acquisto.*?(\d+(?:\.\d+)?)\s*euro/i,
      /acquisto.*?(\d+(?:\.\d+)?)\s*euro/i,
      /(\d+(?:\.\d+)?)\s*euro.*?acquisto/i
    ];
    
    for (const pattern of purchasePricePatterns) {
      const match = message.match(pattern);
      if (match) {
        data.purchasePrice = parseFloat(match[1].replace('.', ''));
        break;
      }
    }
    
    // Target marginalit√† - pattern pi√π flessibili
    const marginPatterns = [
      /(\d+(?:\.\d+)?)%\s*di marginalit√†/i,
      /target.*?(\d+(?:\.\d+)?)%/i,
      /marginalit√†.*?(\d+(?:\.\d+)?)%/i
    ];
    
    for (const pattern of marginPatterns) {
      const match = message.match(pattern);
      if (match) {
        data.targetMargin = parseFloat(match[1]) / 100;
        break;
      }
    }
    
    // Verifica se √® una richiesta di analisi di fattibilit√†
    data.isFeasibilityRequest = this.isFeasibilityAnalysisRequest(message);
    
    console.log('üîç [UrbanovaOS] Dati estratti:', data);
    return data;
  }

  private isFeasibilityAnalysisRequest(message: string): boolean {
    const feasibilityKeywords = [
      'analisi di fattibilit√†',
      'studio di fattibilit√†', 
      'fattibilit√†',
      'prezzo di vendita',
      'stimare',
      'valutare',
      'calcolare',
      'bifamiliare',
      'monofamiliare',
      'terreno',
      'edificabili',
      'progetto',
      'costruzione',
      'vendita',
      'aiutami',
      'aiuta',
      'depositato',
      'pronto',
      'mq',
      'metri quadrati',
      'parcheggi',
      'via romoli',
      'monteporzio'
    ];
    
    const messageLower = message.toLowerCase();
    const keywordCount = feasibilityKeywords.filter(keyword => 
      messageLower.includes(keyword)
    ).length;
    
    // Se contiene almeno 2 keyword di fattibilit√†, √® probabilmente una richiesta
    return keywordCount >= 2;
  }

  private hasCompleteFeasibilityData(data: any): boolean {
    // Controlla se abbiamo dati sufficienti per un'analisi di fattibilit√†
    return !!(
      data.isFeasibilityRequest || // Richiesta esplicita di analisi
      (data.name && data.buildableArea && data.constructionCostPerSqm) || // Dati completi
      (data.buildableArea && data.constructionCostPerSqm) || // Dati minimi per calcolo
      (data.name && data.buildableArea) // Dati parziali ma sufficienti per avviare
    );
  }

  private async generateFeasibilityAnalysis(data: any, request: UrbanovaOSRequest): Promise<string> {
    // Calcoli di fattibilit√†
    const totalConstructionCost = data.buildableArea * data.constructionCostPerSqm;
    const insuranceCost = totalConstructionCost * data.insuranceRate;
    const totalProjectCost = data.purchasePrice + totalConstructionCost + insuranceCost;
    const targetRevenue = totalProjectCost / (1 - data.targetMargin);
    const pricePerSqm = targetRevenue / data.buildableArea;
    const pricePerApartment = targetRevenue / 2; // Bifamiliare = 2 appartamenti
    
    // Analisi di mercato
    const marketData = await this.getRealMarketData('Monteporzio', pricePerSqm);
    
    return `# üìä Analisi di Fattibilit√† - ${data.name}

## üèóÔ∏è Calcoli Economici

### Costi di Costruzione
- **Superficie totale**: ${data.buildableArea} m¬≤
- **Costo per m¬≤**: ‚Ç¨${data.constructionCostPerSqm.toLocaleString()}
- **Costo totale costruzione**: ‚Ç¨${totalConstructionCost.toLocaleString()}
- **Assicurazioni (${(data.insuranceRate * 100)}%)**: ‚Ç¨${insuranceCost.toLocaleString()}

### Costi Totali
- **Acquisto terreno**: ‚Ç¨${data.purchasePrice.toLocaleString()}
- **Costo costruzione**: ‚Ç¨${totalConstructionCost.toLocaleString()}
- **Assicurazioni**: ‚Ç¨${insuranceCost.toLocaleString()}
- **TOTALE PROGETTO**: ‚Ç¨${totalProjectCost.toLocaleString()}

## üí∞ Prezzi di Vendita Target

### Per Raggiungere ${(data.targetMargin * 100)}% di Marginalit√†
- **Ricavi necessari**: ‚Ç¨${targetRevenue.toLocaleString()}
- **Prezzo per m¬≤**: ‚Ç¨${pricePerSqm.toLocaleString()}
- **Prezzo per appartamento**: ‚Ç¨${pricePerApartment.toLocaleString()}
- **Prezzo totale (2 appartamenti)**: ‚Ç¨${targetRevenue.toLocaleString()}

## üìà Analisi di Mercato

${marketData}

## ‚úÖ Conclusioni

Per garantire un margine del ${(data.targetMargin * 100)}%, dovresti vendere:
- **Singolo appartamento**: ‚Ç¨${pricePerApartment.toLocaleString()}
- **Entrambi gli appartamenti**: ‚Ç¨${targetRevenue.toLocaleString()}

Il prezzo per m¬≤ di ‚Ç¨${pricePerSqm.toLocaleString()} √® ${marketData.includes('competitiva') ? 'competitivo' : 'da valutare'} nel mercato locale.`;
  }

  private generateMissingInfoResponse(data: any): string {
    const missing = [];
    if (!data.name) missing.push('nome del progetto');
    if (!data.landArea) missing.push('area del terreno');
    if (!data.buildableArea) missing.push('area costruibile totale');
    if (!data.constructionCostPerSqm) missing.push('costo di costruzione per m¬≤');
    if (!data.purchasePrice) missing.push('prezzo di acquisto del terreno');
    if (!data.targetMargin) missing.push('target di marginalit√†');
    
    if (missing.length === 0) return '';
    
    return `Per creare un'analisi di fattibilit√† completa, ho bisogno di alcune informazioni aggiuntive:

**Informazioni mancanti:**
${missing.map(item => `‚Ä¢ ${item}`).join('\n')}

**Esempio di richiesta completa:**
"Nome del progetto: Villa Roma
Terreno: 500 m¬≤, area costruibile 400 m¬≤
Costo costruzione: 1.500 ‚Ç¨/m¬≤
Prezzo acquisto: 300.000 ‚Ç¨
Target marginalit√†: 25%"

Una volta fornite queste informazioni, potr√≤ creare un'analisi dettagliata con calcoli precisi e analisi di mercato.`;
  }

  private async getRealMarketData(location: string, targetPrice: number): Promise<string> {
    try {
      // Prova a fare web scraping per dati reali
      const realTimeData = await this.searchRealEstatePrices(location);
      if (realTimeData) {
        return `**Dati di mercato real-time per ${location}:**
- Prezzo medio: ‚Ç¨${realTimeData.averagePrice.toLocaleString()}/m¬≤
- Trend: ${realTimeData.trend}
- Competizione: ${realTimeData.competition}
- Campione analizzato: ${realTimeData.sampleSize} immobili

Il tuo target di ‚Ç¨${targetPrice.toLocaleString()}/m¬≤ √® ${targetPrice > realTimeData.averagePrice ? 'sopra la media' : 'sotto la media'} del mercato locale.`;
      }
    } catch (error) {
      console.log('‚ö†Ô∏è [UrbanovaOS] Web scraping fallito, uso dati storici');
    }
    
    // Fallback a dati storici
    return this.getHistoricalMarketData(location, targetPrice);
  }

  private async searchRealEstatePrices(location: string): Promise<any> {
    try {
      // Simula web scraping (in produzione si userebbe puppeteer o similar)
      const response = await fetch(`https://www.immobiliare.it/api/search?location=${encodeURIComponent(location)}&type=residential`);
      if (!response.ok) throw new Error('API non disponibile');
      
      const data = await response.json();
      const prices = data.results?.map((item: any) => item.price / item.surface) || [];
      
      if (prices.length === 0) throw new Error('Nessun dato trovato');
      
      const averagePrice = prices.reduce((a: number, b: number) => a + b, 0) / prices.length;
      const trend = this.calculateTrend(prices);
      const competition = this.assessCompetition(prices.length);
      
      return {
        averagePrice: Math.round(averagePrice),
        trend,
        competition,
        sampleSize: prices.length
      };
    } catch (error) {
      throw error;
    }
  }

  private calculateTrend(prices: number[]): string {
    if (prices.length < 2) return 'Stabile';
    
    const sorted = [...prices].sort((a, b) => a - b);
    const firstHalf = sorted.slice(0, Math.floor(sorted.length / 2));
    const secondHalf = sorted.slice(Math.floor(sorted.length / 2));
    
    const firstAvg = firstHalf.reduce((a, b) => a + b, 0) / firstHalf.length;
    const secondAvg = secondHalf.reduce((a, b) => a + b, 0) / secondHalf.length;
    
    const change = ((secondAvg - firstAvg) / firstAvg) * 100;
    
    if (change > 5) return 'In crescita';
    if (change < -5) return 'In calo';
    return 'Stabile';
  }

  private assessCompetition(sampleSize: number): string {
    if (sampleSize > 50) return 'Alta';
    if (sampleSize > 20) return 'Media';
    return 'Bassa';
  }

  private getHistoricalMarketData(location: string, targetPrice: number): string {
    // Dati storici per citt√† italiane principali
    const historicalData: Record<string, any> = {
      'monteporzio': { average: 2800, trend: 'In crescita', competition: 'Media' },
      'roma': { average: 3500, trend: 'Stabile', competition: 'Alta' },
      'milano': { average: 4500, trend: 'In crescita', competition: 'Alta' },
      'napoli': { average: 2200, trend: 'Stabile', competition: 'Media' },
      'torino': { average: 1800, trend: 'In calo', competition: 'Bassa' }
    };
    
    const key = location.toLowerCase().replace(/\s+/g, '');
    const data = historicalData[key] || { average: 2500, trend: 'Stabile', competition: 'Media' };
    
    return `**Dati storici per ${location}:**
- Prezzo medio storico: ‚Ç¨${data.average.toLocaleString()}/m¬≤
- Trend: ${data.trend}
- Competizione: ${data.competition}

Il tuo target di ‚Ç¨${targetPrice.toLocaleString()}/m¬≤ √® ${targetPrice > data.average ? 'sopra la media' : 'sotto la media'} del mercato locale.`;
  }

  /**
   * Valida e securizza richiesta
   */
  private async validateAndSecureRequest(request: UrbanovaOSRequest): Promise<void> {
    console.log('üîí [UrbanovaOS Orchestrator] Validando e securizzando richiesta');

    // 1. Valida struttura richiesta
    if (!request.userId || !request.userEmail || !request.message.content) {
      throw new Error('Richiesta non valida: campi obbligatori mancanti');
    }

    // 2. Controlla sicurezza
    await this.securityManager.validateRequest(request);

    // 3. Controlla rate limiting
    await this.securityManager.checkRateLimit(request.userId);

    // 4. Valida permessi
    await this.securityManager.checkPermissions(request.userId, request.context);

    // 5. Sanitizza input
    request.message.content = this.sanitizeInput(request.message.content);

    console.log('‚úÖ [UrbanovaOS Orchestrator] Richiesta validata e securizzata');
  }

  /**
   * Classifica richiesta
   */
  private async classifyRequest(request: UrbanovaOSRequest): Promise<ClassificationResult> {
    console.log('üß† [UrbanovaOS Orchestrator] Classificando richiesta');

    try {
      const classification = await this.classificationEngine.classify({
        text: request.message.content,
        context: request.context,
        history: request.conversationHistory
      });

      console.log('‚úÖ [UrbanovaOS Orchestrator] Richiesta classificata:', {
        category: classification.category,
        confidence: classification.confidence,
        intent: classification.intent,
        sentiment: classification.sentiment
      });

      return classification;

    } catch (error) {
      console.error('‚ùå [UrbanovaOS Orchestrator] Errore classificazione:', error);
      return this.getFallbackClassification();
    }
  }

  /**
   * Ricerca vector store
   */
  private async searchVectorStore(
    request: UrbanovaOSRequest,
    classification: ClassificationResult
  ): Promise<VectorMatch[]> {
    console.log('üîç [UrbanovaOS Orchestrator] Ricercando vector store');

    try {
      const vectorMatches = await this.vectorStore.search({
        query: request.message.content,
        category: classification.category,
        intent: classification.intent,
        entities: classification.entities,
        limit: 10,
        threshold: 0.7
      });

      console.log('‚úÖ [UrbanovaOS Orchestrator] Vector store ricercato:', {
        matches: vectorMatches.length,
        avgSimilarity: vectorMatches.reduce((sum, match) => sum + match.similarity, 0) / vectorMatches.length
      });

      return vectorMatches;

    } catch (error) {
      console.error('‚ùå [UrbanovaOS Orchestrator] Errore ricerca vector store:', error);
      return [];
    }
  }

  /**
   * Esegui workflow
   */
  private async executeWorkflows(
    request: UrbanovaOSRequest,
    classification: ClassificationResult,
    vectorMatches: VectorMatch[]
  ): Promise<any[]> {
    console.log('‚öôÔ∏è [UrbanovaOS Orchestrator] Eseguendo workflow');

    try {
      const workflowResults = await this.workflowEngine.executeWorkflows({
        trigger: 'user_message',
        userId: request.userId,
        sessionId: request.sessionId,
        context: {
          message: request.message.content,
          classification,
          vectorMatches
        },
        parameters: {
          priority: request.metadata.priority,
          timeout: request.metadata.timeout
        }
      });

      console.log('‚úÖ [UrbanovaOS Orchestrator] Workflow eseguiti:', {
        executed: workflowResults.length,
        successful: workflowResults.filter(r => r.status === 'success').length
      });

      return workflowResults;

    } catch (error) {
      console.error('‚ùå [UrbanovaOS Orchestrator] Errore esecuzione workflow:', error);
      return [];
    }
  }

  /**
   * Esegui plugin
   */
  private async executePlugins(
    request: UrbanovaOSRequest,
    classification: ClassificationResult,
    vectorMatches: VectorMatch[]
  ): Promise<any[]> {
    console.log('üîå [UrbanovaOS Orchestrator] Eseguendo plugin');

    try {
      const pluginResults = [];

      // Identifica plugin rilevanti
      const relevantPlugins = await this.identifyRelevantPlugins(classification, vectorMatches);

      // Esegui plugin
      for (const plugin of relevantPlugins) {
        try {
          const result = await this.pluginSystem.executeCapability(
            plugin.id,
            plugin.capabilityId,
            {
              message: request.message.content,
              classification,
              vectorMatches,
              context: request.context
            },
            {
              userId: request.userId,
              sessionId: request.sessionId,
              projectId: request.context.projectId,
              environment: request.context.environment,
              metadata: request.metadata
            }
          );

          pluginResults.push(result);
        } catch (error) {
          console.error(`‚ùå [UrbanovaOS Orchestrator] Errore plugin ${plugin.id}:`, error);
        }
      }

      console.log('‚úÖ [UrbanovaOS Orchestrator] Plugin eseguiti:', {
        executed: pluginResults.length,
        successful: pluginResults.filter(r => r.status === 'completed').length
      });

      return pluginResults;

    } catch (error) {
      console.error('‚ùå [UrbanovaOS Orchestrator] Errore esecuzione plugin:', error);
      return [];
    }
  }

  /**
   * Genera risposta
   */
  private async generateResponse(
    request: UrbanovaOSRequest,
    classification: ClassificationResult,
    vectorMatches: VectorMatch[],
    workflowResults: any[],
    pluginResults: any[]
  ): Promise<UrbanovaOSResponse> {
    console.log('üí¨ [UrbanovaOS Orchestrator] Generando risposta');

    try {
      // 1. Determina tipo risposta
      const responseType = this.determineResponseType(classification, workflowResults, pluginResults);
      
      // 2. Genera contenuto risposta
      const responseResult = await this.generateResponseContent(
        request,
        classification,
        vectorMatches,
        workflowResults,
        pluginResults
      );
      
      const responseContent = responseResult.content;
      const usedUserMemory = responseResult.usedUserMemory;
      
      // Se non abbiamo contenuto specifico, restituisci null per usare OpenAI
      const finalResponseContent = responseContent || null;
      
      // 3. Calcola confidence
      const confidence = this.calculateConfidence(classification, vectorMatches, workflowResults, pluginResults);
      
      // 4. Genera azioni suggerite
      const suggestedActions = await this.generateSuggestedActions(classification, workflowResults, pluginResults);
      
      // 5. Genera prossimi passi
      const nextSteps = await this.generateNextSteps(classification, workflowResults, pluginResults);
      
      // 6. Aggiorna stato sistema
      const systemStatus = await this.updateSystemStatus();

      const response: UrbanovaOSResponse = {
        type: responseType,
        response: finalResponseContent,
        confidence,
        metadata: {
          systemsUsed: this.getSystemsUsed(workflowResults, pluginResults, usedUserMemory),
          executionTime: 0, // Sar√† aggiornato dal chiamante
          memoryUsage: 0,
          cpuUsage: 0,
          pluginsExecuted: pluginResults.map(r => r.pluginId),
          workflowsTriggered: workflowResults.map(r => r.workflowId),
          classifications: [classification],
          vectorMatches
        },
        suggestedActions,
        nextSteps,
        systemStatus,
        timestamp: new Date()
      };

      console.log('‚úÖ [UrbanovaOS Orchestrator] Risposta generata:', {
        type: responseType,
        confidence,
        suggestedActions: suggestedActions.length,
        nextSteps: nextSteps.length
      });

      return response;

    } catch (error) {
      console.error('‚ùå [UrbanovaOS Orchestrator] Errore generazione risposta:', error);
      return this.getFallbackResponse(request);
    }
  }

  /**
   * Aggiorna metriche
   */
  private async updateMetrics(
    request: UrbanovaOSRequest,
    response: UrbanovaOSResponse,
    executionTime: number
  ): Promise<void> {
    console.log('üìä [UrbanovaOS Orchestrator] Aggiornando metriche');

    try {
      await this.metricsCollector.recordRequest({
        userId: request.userId,
        sessionId: request.sessionId,
        executionTime,
        success: response.type === 'success',
        confidence: response.confidence,
        systemsUsed: response.metadata.systemsUsed,
        timestamp: new Date()
      });

      console.log('‚úÖ [UrbanovaOS Orchestrator] Metriche aggiornate');

    } catch (error) {
      console.error('‚ùå [UrbanovaOS Orchestrator] Errore aggiornamento metriche:', error);
    }
  }

  /**
   * Notifica eventi
   */
  private async notifyEvents(
    request: UrbanovaOSRequest,
    response: UrbanovaOSResponse
  ): Promise<void> {
    console.log('üì° [UrbanovaOS Orchestrator] Notificando eventi');

    try {
      await this.eventBus.emit('request.processed', {
        request,
        response,
        timestamp: new Date()
      });

      console.log('‚úÖ [UrbanovaOS Orchestrator] Eventi notificati');

    } catch (error) {
      console.error('‚ùå [UrbanovaOS Orchestrator] Errore notifica eventi:', error);
    }
  }

  /**
   * Gestisce errori
   */
  private handleError(
    request: UrbanovaOSRequest,
    error: any,
    executionTime: number
  ): UrbanovaOSResponse {
    console.error('‚ùå [UrbanovaOS Orchestrator] Gestendo errore:', error);

    // üß† GESTIONE ERRORI INTELLIGENTE BASATA SUL TIPO DI ERRORE
    let errorResponse = '';
    let suggestedActions: string[] = [];
    
    if (error.message?.includes('Timeout')) {
      errorResponse = `‚è±Ô∏è **Timeout rilevato** - Il sistema sta elaborando la tua richiesta ma ha impiegato pi√π tempo del previsto.\n\n` +
                     `üîÑ **Cosa fare:**\n` +
                     `‚Ä¢ Riprova la stessa richiesta\n` +
                     `‚Ä¢ Prova a semplificare la richiesta\n` +
                     `‚Ä¢ Contatta il supporto se il problema persiste\n\n` +
                     `üí° **Suggerimento:** Per analisi complesse, prova a fornire i dati in modo pi√π graduale.`;
      suggestedActions = ['Riprova richiesta', 'Semplifica richiesta', 'Contatta supporto'];
    } else if (error.message?.includes('Firebase') || error.message?.includes('Firestore')) {
      errorResponse = `üî• **Errore database** - Problema temporaneo con il salvataggio dei dati.\n\n` +
                     `üîÑ **Cosa fare:**\n` +
                     `‚Ä¢ Riprova tra qualche minuto\n` +
                     `‚Ä¢ I tuoi dati sono al sicuro\n` +
                     `‚Ä¢ Il sistema si riprender√† automaticamente\n\n` +
                     `üí° **Nota:** Questo √® un problema temporaneo, non hai perso nessun dato.`;
      suggestedActions = ['Riprova tra 5 minuti', 'Verifica connessione', 'Contatta supporto'];
    } else if (error.message?.includes('OpenAI') || error.message?.includes('API')) {
      errorResponse = `ü§ñ **Errore servizio AI** - Problema temporaneo con il servizio di intelligenza artificiale.\n\n` +
                     `üîÑ **Cosa fare:**\n` +
                     `‚Ä¢ Riprova tra qualche minuto\n` +
                     `‚Ä¢ Prova con una richiesta diversa\n` +
                     `‚Ä¢ Il sistema si riprender√† automaticamente\n\n` +
                     `üí° **Nota:** Questo √® un problema temporaneo del servizio AI.`;
      suggestedActions = ['Riprova tra 2 minuti', 'Prova richiesta diversa', 'Contatta supporto'];
    } else {
      errorResponse = `‚ö†Ô∏è **Errore temporaneo** - Si √® verificato un problema durante l'elaborazione.\n\n` +
                     `üîÑ **Cosa fare:**\n` +
                     `‚Ä¢ Riprova la richiesta\n` +
                     `‚Ä¢ Prova con una richiesta pi√π semplice\n` +
                     `‚Ä¢ Contatta il supporto se il problema persiste\n\n` +
                     `üí° **Suggerimento:** Spesso riprovare risolve il problema.`;
      suggestedActions = ['Riprova richiesta', 'Semplifica richiesta', 'Contatta supporto'];
    }

    return {
      type: 'error',
      response: errorResponse,
      confidence: 0,
      metadata: {
        systemsUsed: ['error-handler'],
        executionTime,
        memoryUsage: 0,
        cpuUsage: 0,
        pluginsExecuted: [],
        workflowsTriggered: [],
        classifications: [],
        vectorMatches: [],
        fallbackReason: error.message,
        errorType: error.message?.includes('Timeout') ? 'timeout' : 
                  error.message?.includes('Firebase') ? 'database' :
                  error.message?.includes('OpenAI') ? 'ai-service' : 'unknown'
      },
      suggestedActions,
      nextSteps: ['Riprova la richiesta', 'Contatta supporto se necessario'],
      systemStatus: {
        overall: 'degraded',
        components: {
          ml: 'healthy',
          vector: 'healthy',
          workflow: 'healthy',
          plugins: 'healthy'
        },
        performance: {
          avgResponseTime: 0,
          successRate: 0,
          errorRate: 1,
          activeConnections: 0,
          memoryUsage: 0,
          cpuUsage: 0
        },
        lastHealthCheck: new Date()
      },
      timestamp: new Date()
    };
  }

  // ============================================================================
  // METODI DI SUPPORTO
  // ============================================================================

  private initializeSystems(): void {
    console.log('üîß [UrbanovaOS Orchestrator] Sistemi gi√† inizializzati nel costruttore');
    
    // I sistemi si inizializzano automaticamente nel costruttore
    // Non √® necessario chiamare initialize() esplicitamente
    
    console.log('‚úÖ [UrbanovaOS Orchestrator] Sistemi pronti');
  }

  private startMonitoring(): void {
    console.log('üìä [UrbanovaOS Orchestrator] Avviando monitoraggio');
    
    // Avvia monitoraggio
    setInterval(() => {
      this.monitorSystems();
    }, 30000); // Ogni 30 secondi
    
    console.log('‚úÖ [UrbanovaOS Orchestrator] Monitoraggio avviato');
  }

  private monitorSystems(): void {
    // Monitora tutti i sistemi
    this.healthChecker.checkHealth();
    this.performanceMonitor.collectMetrics();
  }

  private sanitizeInput(input: string): string {
    // Sanitizza input utente
    return input.trim().replace(/[<>]/g, '');
  }

  private getFallbackClassification(): ClassificationResult {
    return {
      category: 'general',
      confidence: 0.5,
      entities: [],
      intent: 'general_query',
      sentiment: 'neutral',
      urgency: 'low',
      complexity: 'medium',
      userExpertise: 'intermediate',
      projectPhase: 'planning',
      actions: []
    };
  }

  private async identifyRelevantPlugins(
    classification: ClassificationResult,
    vectorMatches: VectorMatch[]
  ): Promise<any[]> {
    // Identifica plugin rilevanti basati su classificazione e vector matches
    return []; // Implementazione semplificata
  }

  private determineResponseType(
    classification: ClassificationResult,
    workflowResults: any[],
    pluginResults: any[]
  ): 'success' | 'error' | 'fallback' | 'escalation' {
    if (workflowResults.length > 0 || pluginResults.length > 0) {
      return 'success';
    } else if (classification.confidence < 0.5) {
      return 'fallback';
    } else {
      return 'success';
    }
  }

  private async generateResponseContent(
    request: UrbanovaOSRequest,
    classification: ClassificationResult,
    vectorMatches: VectorMatch[],
    workflowResults: any[],
    pluginResults: any[]
  ): Promise<{ content: string | null; usedUserMemory: boolean }> {
    console.log('üß† [UrbanovaOS Orchestrator] Generando contenuto risposta con memoria conversazionale');
    
    try {
      // üß† GESTIONE MEMORIA CONVERSAZIONALE
      const memory = this.getOrCreateMemory(request.sessionId, request.userId);
      const userQuery = request.message.content.toLowerCase();
      
      console.log('üîç [UrbanovaOS Orchestrator] Analizzando query con memoria:', {
        sessionId: request.sessionId,
        hasProjectContext: !!memory.projectContext,
        previousAnalyses: memory.previousAnalyses.length,
        conversationSteps: memory.conversationFlow.length
      });
      
      // Rileva query sui progetti dell'utente (condizione pi√π inclusiva)
      const isProjectQuery = userQuery.includes('progetti') || userQuery.includes('quanto') || userQuery.includes('quanti') || 
          userQuery.includes('attivi') || userQuery.includes('portafoglio') || userQuery.includes('miei progetti') ||
          userQuery.includes('quanti progetti') || userQuery.includes('quanto progetti') || 
          userQuery.includes('progetti attivi') || userQuery.includes('progetti ho') ||
          userQuery.includes('nel mio portafoglio') || userQuery.includes('portafoglio progetti');
      
      // üß† SISTEMA CONVERSAZIONALE AVANZATO - Ispirato a ChatGPT-5
      console.log('üß† [Advanced Conversational] Analizzando richiesta con sistema ChatGPT-5...');
      console.log('üîç [DEBUG] Messaggio utente:', request.message.content);
      console.log('üîç [DEBUG] Memory context:', memory);
      
      const userIntent = this.conversationalEngine.analyzeUserIntent(request.message.content, memory);
      const isFeasibilityQuery = userIntent.toolsRequired.length > 0 || userIntent.primary === 'feasibility';
      console.log('üîç [DEBUG CRASH] isFeasibilityQuery determinato:', isFeasibilityQuery);
      
      console.log('üîç [DEBUG] analyzeUserIntent risultato:', {
        userIntent: userIntent,
        toolsRequired: userIntent.toolsRequired,
        isFeasibilityQuery: isFeasibilityQuery
      });
      
      // üîß FIX RADICALE: Forza attivazione PRIMA del controllo condizionale
      const messageText = request.message.content.toLowerCase();
      if (messageText.includes('analisi di fattibilit√†') || messageText.includes('studio di fattibilit√†') || 
          messageText.includes('fattibilit√†') || (messageText.includes('terreno') && messageText.includes('edificabili'))) {
        console.log('üîß [FIX RADICALE] Rilevata richiesta di fattibilit√†, forzando attivazione tool...');
        userIntent.toolsRequired = ['feasibility_analysis'];
        userIntent.primary = 'feasibility';
        isFeasibilityQuery = true; // Forza anche la variabile
      }
      
      // üîß USA L'ESTRAZIONE DATI DELL'ORCHESTRATOR (PI√ô ROBUSTA)
      const goalAnalysis = this.analyzeUserGoal(request.message.content, memory);
      const extractedData = goalAnalysis.extractedData;
      
      console.log('üîç [DEBUG] Goal Analysis:', goalAnalysis);
      console.log('üîç [DEBUG] Extracted Data:', extractedData);
      const confidence = userIntent.confidence;
      
      console.log('üß† [Advanced Conversational] Analisi completata:', {
        primaryIntent: userIntent.primary,
        confidence: userIntent.confidence,
        urgency: userIntent.urgency,
        complexity: userIntent.complexity,
        toolsRequired: userIntent.toolsRequired,
        dataExtracted: userIntent.dataExtracted
      });
      
      console.log('üîç [DEBUG] isFeasibilityQuery:', isFeasibilityQuery);
      console.log('üîç [DEBUG] extractedData:', extractedData);
      console.log('üîç [DEBUG] confidence:', confidence);
      
      console.log('üéØ [UrbanovaOS Orchestrator] √à una query sui progetti?', isProjectQuery);
      console.log('üèóÔ∏è [UrbanovaOS Orchestrator] √à una richiesta di analisi di fattibilit√†?', isFeasibilityQuery);
      console.log('üß† [DEBUG] Dettagli rilevamento:', {
        hasProjectContext: !!memory.projectContext,
        isModificationRequest: this.isModificationRequest(request.message.content),
        containsEuroPerMetro: userQuery.includes('euro per metro quadrato'),
        containsMetti: userQuery.includes('metti'),
        containsInveceDi: userQuery.includes('invece di')
      });
      
      // üöÄ SISTEMA CONVERSAZIONALE AVANZATO - ATTIVAZIONE INTELLIGENTE (PRIORIT√Ä MASSIMA)
      console.log('üîç [DEBUG] Controllo attivazione sistema avanzato...');
      console.log('üîç [DEBUG] userIntent:', JSON.stringify(userIntent, null, 2));
      console.log('üîç [DEBUG] extractedData:', JSON.stringify(extractedData, null, 2));
      console.log('üîç [DEBUG] isFeasibilityQuery:', isFeasibilityQuery);
      console.log('üîç [DEBUG] userIntent.toolsRequired.length:', userIntent.toolsRequired.length);
      console.log('üîç [DEBUG] extractedData.buildableArea:', extractedData.buildableArea);
      console.log('üîç [DEBUG] extractedData.constructionCostPerSqm:', extractedData.constructionCostPerSqm);
      console.log('üîç [DEBUG] extractedData.purchasePrice:', extractedData.purchasePrice);
      
      // Attiva il sistema avanzato se:
      // 1. Ha tool richiesti (feasibility, sensitivity, risk, market, investment, design_center, project_creation)
      // 2. Ha dati estratti (buildableArea, constructionCostPerSqm, purchasePrice)
      // 3. √à una query sui progetti
      // 4. √à una query di fattibilit√† (anche con errori di battitura)
      const isFeasibilityQueryAdvanced = userQuery.toLowerCase().includes('fattibil') || 
                                        userQuery.toLowerCase().includes('anlisi') ||
                                        userQuery.toLowerCase().includes('studio') ||
                                        userQuery.toLowerCase().includes('terreno') ||
                                        userQuery.toLowerCase().includes('costruzion') ||
                                        userQuery.toLowerCase().includes('acquisto') ||
                                        userQuery.toLowerCase().includes('margine');
      
      // 5. √à una query di memoria/conversazione
      const isMemoryQuery = userQuery.toLowerCase().includes('non ricordo') ||
                           userQuery.toLowerCase().includes('mi sono perso') ||
                           userQuery.toLowerCase().includes('ricapitolare') ||
                           userQuery.toLowerCase().includes('cosa avevo chiesto') ||
                           userQuery.toLowerCase().includes('conversazione precedente');
      
      // 6. √à una query con sentiment negativo (frustrazione, rabbia)
      const isNegativeSentimentQuery = userQuery.toLowerCase().includes('schifo') ||
                                      userQuery.toLowerCase().includes('incazzato') ||
                                      userQuery.toLowerCase().includes('frustrato') ||
                                      userQuery.toLowerCase().includes('inutile') ||
                                      userQuery.toLowerCase().includes('merda') ||
                                      userQuery.toLowerCase().includes('non funziona') ||
                                      userQuery.toLowerCase().includes('troppo complicato') ||
                                      userQuery.toLowerCase().includes('non capisco') ||
                                      userQuery.toLowerCase().includes('cazzo') ||
                                      userQuery.toLowerCase().includes('problema') ||
                                      userQuery.toLowerCase().includes('difficolt√†');
      
      const shouldActivateAdvancedSystem = 
        userIntent.toolsRequired.length > 0 || 
        extractedData.buildableArea || 
        extractedData.constructionCostPerSqm || 
        extractedData.purchasePrice ||
        isProjectQuery ||
        isFeasibilityQueryAdvanced ||
        isMemoryQuery ||
        isNegativeSentimentQuery ||
        true; // RIATTIVATO DOPO FIX IMPORT
      
      console.log('üîç [DEBUG] shouldActivateAdvancedSystem:', shouldActivateAdvancedSystem);
      
      if (shouldActivateAdvancedSystem) {
        console.log('üß† [Advanced Conversational] SISTEMA AVANZATO ATTIVATO - Generando risposta avanzata...');
        console.log('üîç [DEBUG] Chiamando generateAdvancedResponse...');
        
        // üîß PASSA I DATI ESTRATTI AL SISTEMA AVANZATO
        const projectData = {
          id: `project_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          name: extractedData.name || 'Progetto Automatico',
          landArea: extractedData.landArea || extractedData.buildableArea || 0,
          buildableArea: extractedData.buildableArea || 0,
          constructionCostPerSqm: extractedData.constructionCostPerSqm || 0,
          purchasePrice: extractedData.purchasePrice || 0,
          targetMargin: extractedData.targetMargin || 0.25,
          insuranceRate: 0.015,
          type: 'residenziale',
          status: 'draft',
          createdAt: new Date(),
          updatedAt: new Date()
        };
        
        console.log('üîç [DEBUG] ProjectData creato:', projectData);
        
        console.log('üîÑ [DEBUG] STEP 3: Chiamando generateAdvancedResponse...');
        console.log('üîÑ [DEBUG] Parametri:', {
          userIntent: userIntent,
          hasMemory: !!memory,
          hasRequest: !!request,
          hasProjectData: !!projectData
        });
        
        const conversationalResponse = await this.conversationalEngine.generateAdvancedResponse(
          request.message, 
          memory, 
          request,
          projectData
        );
        
        console.log('‚úÖ [DEBUG] STEP 3 COMPLETATO: generateAdvancedResponse completato');
        
        console.log('üîç [DEBUG] Risposta generata:', conversationalResponse);
        
        // Aggiorna memoria se abbiamo dati estratti
        if (extractedData.buildableArea || extractedData.constructionCostPerSqm || extractedData.purchasePrice) {
          console.log('üîç [DEBUG] Aggiornando memoria con dati estratti...');
          const projectData = {
            id: `project_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            name: extractedData.name || 'Progetto Automatico',
            landArea: extractedData.landArea || extractedData.buildableArea || 0,
            buildableArea: extractedData.buildableArea || 0,
            constructionCostPerSqm: extractedData.constructionCostPerSqm || 0,
            purchasePrice: extractedData.purchasePrice || 0,
            targetMargin: extractedData.targetMargin || 0.25,
            insuranceRate: 0.015,
            type: 'residenziale',
            status: 'draft',
            createdAt: new Date(),
            updatedAt: new Date()
          };
          this.updateProjectContext(request.sessionId, projectData);
          console.log('üîç [DEBUG] Memoria aggiornata con projectData:', projectData);
        }
        
        console.log('üîç [DEBUG] Restituendo risposta avanzata...');
        return {
          content: conversationalResponse.content,
          usedUserMemory: false
        };
      }
      
      if (isProjectQuery) {
        console.log('üéØ [UrbanovaOS Orchestrator] Query sui progetti rilevata, chiamando UserMemoryService...');
        
        // const memoryResult = await userMemoryService.processNaturalQuery(
        //   request.message.content,
        //   request.userId,
        //   request.userEmail,
        //   request.conversationHistory
        // );
        const memoryResult = { success: false, data: null };
        
        if (false && memoryResult.success && memoryResult.data) {
          console.log('‚úÖ [UrbanovaOS Orchestrator] UserMemoryService ha trovato dati:', {
            projects: (memoryResult.data as any)?.relatedProjects?.length || 0,
            insights: (memoryResult.data as any)?.insights?.length || 0
          });
          
          // Genera risposta basata sui dati reali dell'utente
          let response = '';
          
          if (memoryResult.data.projects) {
            const projects = memoryResult.data.projects;
            if (projects.length === 0) {
              response = 'Non hai ancora progetti nel tuo portafoglio. Crea il tuo primo progetto di fattibilit√† per iniziare!';
            } else {
              response = `Hai ${projects.length} progetti nel tuo portafoglio:\n\n`;
              projects.slice(0, 5).forEach((project: any, index: number) => {
                response += `${index + 1}. **${project.name}**\n`;
                response += `   üìç ${project.location}\n`;
                response += `   üí∞ Budget: ‚Ç¨${project.keyMetrics.budget?.toLocaleString('it-IT') || 'Non specificato'}\n`;
                response += `   üìä ROI: ${project.keyMetrics.roi || 'Non calcolato'}%\n`;
                response += `   üìÖ Ultimo aggiornamento: ${project.lastModified.toLocaleDateString('it-IT')}\n\n`;
              });
              
              if (projects.length > 5) {
                response += `... e altri ${projects.length - 5} progetti.\n\n`;
              }
            }
          } else if (memoryResult.data.totalCount !== undefined) {
            response = `Hai ${memoryResult.data.totalCount} progetti attivi nel tuo portafoglio.`;
          } else if (memoryResult.data.project) {
            // Risposta per progetto specifico
            const project = memoryResult.data.project;
            response = `**${project.name}**:\n`;
            if (memoryResult.data.metric && memoryResult.data.value !== undefined) {
              response += `${memoryResult.data.metric}: ${memoryResult.data.value}${memoryResult.data.unit || ''}\n`;
            } else {
              response += `üìç ${project.location}\n`;
              response += `üí∞ Budget: ‚Ç¨${project.metrics.budget?.toLocaleString('it-IT') || 'Non specificato'}\n`;
              response += `üìä ROI: ${project.metrics.roi || 'Non calcolato'}%\n`;
            }
          }
          
          // Aggiungi insights se disponibili
          if ((memoryResult.data as any)?.insights && (memoryResult.data as any).insights.length > 0) {
            response += '\nüí° **Insights:**\n';
            (memoryResult.data as any).insights.forEach((insight: string) => {
              response += `‚Ä¢ ${insight}\n`;
            });
          }
          
          // Aggiungi suggerimenti se disponibili
          if ((memoryResult.data as any)?.suggestions && (memoryResult.data as any).suggestions.length > 0) {
            response += '\nüéØ **Suggerimenti:**\n';
            (memoryResult.data as any).suggestions.forEach((suggestion: string) => {
              response += `‚Ä¢ ${suggestion}\n`;
            });
          }
          
          return { content: response, usedUserMemory: true };
        } else {
          console.log('‚ö†Ô∏è [UrbanovaOS Orchestrator] UserMemoryService non ha trovato dati specifici');
        }
      }
      
      // üöÄ SISTEMA CONVERSAZIONALE AVANZATO - BYPASS TOTALE (RIMOSSO - DUPLICATO)
      
      // üèóÔ∏è GESTIONE ANALISI DI FATTIBILIT√Ä CON MEMORIA CONVERSAZIONALE (FALLBACK)
      if (false) { // Disabilitato - ora usa sempre il sistema avanzato
        console.log('üèóÔ∏è [UrbanovaOS Orchestrator] Richiesta di analisi di fattibilit√† rilevata!');
        
        // üéØ RILEVA SIMULAZIONI
        const simulationRequest = this.detectSimulationRequest(request.message.content);
        console.log('üéØ [UrbanovaOS] Rilevata simulazione:', simulationRequest);
        
        // üß† GESTIONE CONTESTO PROGETTO CON MEMORIA
        let projectData: ProjectData | null = null;
        
        // Se abbiamo un contesto progetto esistente, usalo come base
        if (memory.projectContext) {
          console.log('üèóÔ∏è [UrbanovaOS] Usando contesto progetto esistente:', memory.projectContext.name);
          projectData = { ...memory.projectContext };
          
          // Usa i dati estratti dal sistema intelligente
          console.log('üèóÔ∏è [DEBUG] Dati estratti dal sistema intelligente:', extractedData);
          
          // Aggiorna con i nuovi dati se forniti
          if (extractedData.name) projectData.name = extractedData.name;
          if (extractedData.landArea) projectData.landArea = extractedData.landArea;
          if (extractedData.buildableArea) projectData.buildableArea = extractedData.buildableArea;
          if (extractedData.constructionCostPerSqm) projectData.constructionCostPerSqm = extractedData.constructionCostPerSqm;
          if (extractedData.purchasePrice) projectData.purchasePrice = extractedData.purchasePrice;
          if (extractedData.targetMargin) projectData.targetMargin = extractedData.targetMargin;
          if (extractedData.type) projectData.type = extractedData.type;
          if (extractedData.insuranceRate) projectData.insuranceRate = extractedData.insuranceRate;
          
          projectData.updatedAt = new Date();
          console.log('üèóÔ∏è [DEBUG] Progetto aggiornato:', {
            name: projectData.name,
            buildableArea: projectData.buildableArea,
            constructionCostPerSqm: projectData.constructionCostPerSqm,
            purchasePrice: projectData.purchasePrice,
            targetMargin: projectData.targetMargin
          });
        } else {
          // Usa i dati estratti dal sistema intelligente per creare nuovo progetto
          console.log('üèóÔ∏è [DEBUG] Dati estratti per nuovo progetto:', extractedData);
          
          if (extractedData.name && extractedData.buildableArea && 
              extractedData.constructionCostPerSqm && extractedData.purchasePrice && 
              extractedData.targetMargin) {
            // Crea nuovo progetto se abbiamo tutti i dati necessari
            projectData = {
              id: `project_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
              name: extractedData.name,
              landArea: extractedData.landArea || 0,
              buildableArea: extractedData.buildableArea,
              constructionCostPerSqm: extractedData.constructionCostPerSqm,
              purchasePrice: extractedData.purchasePrice,
              targetMargin: extractedData.targetMargin,
              insuranceRate: extractedData.insuranceRate || 0.015,
              type: extractedData.type || 'residenziale',
              parkingSpaces: extractedData.parkingSpaces,
              apartmentArea: extractedData.apartmentArea,
              location: extractedData.location,
              status: 'draft',
              createdAt: new Date(),
              updatedAt: new Date()
            };
            console.log('üèóÔ∏è [DEBUG] Nuovo progetto creato:', {
              name: projectData.name,
              buildableArea: projectData.buildableArea,
              constructionCostPerSqm: projectData.constructionCostPerSqm,
              purchasePrice: projectData.purchasePrice,
              targetMargin: projectData.targetMargin
            });
          }
        }
        
        // Controlla se abbiamo dati sufficienti per l'analisi (dai dati estratti o dal progetto)
        const hasProjectData = projectData && projectData.buildableArea && 
                              projectData.constructionCostPerSqm && projectData.purchasePrice && 
                              projectData.targetMargin;
        
        const hasExtractedData = extractedData.buildableArea && extractedData.constructionCostPerSqm && 
                                extractedData.purchasePrice && extractedData.targetMargin;
        
        const hasRequiredData = hasProjectData || hasExtractedData;
        
        console.log('üîç [DEBUG] Controllo hasRequiredData:', {
          hasProjectData: !!projectData,
          projectDataComplete: projectData ? {
            buildableArea: !!projectData.buildableArea,
            constructionCostPerSqm: !!projectData.constructionCostPerSqm,
            purchasePrice: !!projectData.purchasePrice,
            targetMargin: !!projectData.targetMargin
          } : null,
          extractedDataComplete: {
            buildableArea: !!extractedData.buildableArea,
            constructionCostPerSqm: !!extractedData.constructionCostPerSqm,
            purchasePrice: !!extractedData.purchasePrice,
            targetMargin: !!extractedData.targetMargin
          },
          hasRequiredData: hasRequiredData,
          extractedDataValues: extractedData
        });
        
        // üöÄ SISTEMA CONVERSAZIONALE AVANZATO - Attivazione garantita per fattibilit√†
        if (isFeasibilityQuery || userIntent.toolsRequired.length > 0 || 
            (extractedData.buildableArea && extractedData.constructionCostPerSqm) ||
            extractedData.buildableArea || extractedData.constructionCostPerSqm || extractedData.purchasePrice) {
          console.log('üß† [Advanced Conversational] Generando risposta con tool attivati...');
          console.log('üîç [DEBUG] userIntent.toolsRequired:', userIntent.toolsRequired);
          console.log('üîç [DEBUG] isFeasibilityQuery:', isFeasibilityQuery);
          
          const conversationalResponse = await this.conversationalEngine.generateAdvancedResponse(
            request.message, 
            memory, 
            request
          );
          
          // Aggiorna memoria con i dati estratti
          if (extractedData.buildableArea) {
            const projectData = {
              id: `project_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
              name: extractedData.name || 'Progetto Automatico',
              landArea: extractedData.landArea || extractedData.buildableArea || 0,
              buildableArea: extractedData.buildableArea || 0,
              constructionCostPerSqm: extractedData.constructionCostPerSqm || 0,
              purchasePrice: extractedData.purchasePrice || 0,
              targetMargin: extractedData.targetMargin || 0.25,
              insuranceRate: 0.015,
              type: 'residenziale',
              status: 'draft',
              createdAt: new Date(),
              updatedAt: new Date()
            };
            this.updateProjectContext(request.sessionId, projectData);
          }
          
          return {
            content: conversationalResponse.content,
            usedUserMemory: false
          };
        }
        
        // Se abbiamo dati completi per l'analisi di fattibilit√†
        if (this.hasCompleteFeasibilityData(extractedData)) {
          let analysisContent: string;
          let analysisType: string;
          
          // üéØ GESTIONE SIMULAZIONI
          if (simulationRequest.isSimulation) {
            console.log('üéØ [UrbanovaOS] Generando simulazione:', simulationRequest.simulationType);
            analysisContent = await this.generateSimulationAnalysis(
              projectData, 
              simulationRequest.simulationType, 
              simulationRequest.parameters, 
              request
            );
            analysisType = simulationRequest.simulationType;
          } else {
            // Genera analisi di fattibilit√† standard
            analysisContent = await this.generateFeasibilityAnalysis(projectData, request);
            analysisType = 'feasibility';
          }
          
          // Salva il risultato dell'analisi nella memoria
          const analysisResult: AnalysisResult = {
            id: `analysis_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            projectId: projectData.id,
            analysisType: analysisType as any,
            parameters: {
              buildableArea: projectData.buildableArea,
              constructionCostPerSqm: projectData.constructionCostPerSqm,
              purchasePrice: projectData.purchasePrice,
              targetMargin: projectData.targetMargin,
              insuranceRate: projectData.insuranceRate,
              simulationType: simulationRequest.isSimulation ? simulationRequest.simulationType : undefined,
              simulationParameters: simulationRequest.isSimulation ? simulationRequest.parameters : undefined
            },
            results: {
              analysis: analysisContent,
              timestamp: new Date()
            },
            timestamp: new Date(),
            confidence: 0.95
          };
          
          this.addAnalysisResult(request.sessionId, analysisResult);
          
          // Aggiungi step conversazione
          this.addConversationStep(request.sessionId, {
            type: simulationRequest.isSimulation ? 'simulation_request' : 'analysis_generation',
            content: `${simulationRequest.isSimulation ? 'Simulazione' : 'Analisi di fattibilit√†'} generata per progetto: ${projectData.name}`,
            metadata: {
              projectId: projectData.id,
              analysisId: analysisResult.id,
              analysisType: analysisType,
              simulationType: simulationRequest.isSimulation ? simulationRequest.simulationType : undefined
            }
          });
          
          return { content: analysisContent, usedUserMemory: true };
        } else {
          // Chiedi informazioni mancanti
          const missingInfoResponse = this.generateMissingInfoResponse(feasibilityData);
          
          // Aggiungi step conversazione
          this.addConversationStep(request.sessionId, {
            type: 'data_extraction',
            content: 'Richiesta informazioni mancanti per analisi di fattibilit√†',
            metadata: {
              missingFields: Object.keys(feasibilityData).filter(key => !feasibilityData[key]),
              extractedData: feasibilityData
            }
          });
          
          return { content: missingInfoResponse, usedUserMemory: true };
        }
      }
      
      // Se non √® una query sui progetti o analisi di fattibilit√†, usa la logica originale
      let response = '';

      // Se abbiamo risultati specifici, generiamo una risposta dettagliata
      if (pluginResults.length > 0) {
        response += 'Ho eseguito le seguenti azioni per te:\n';
        pluginResults.forEach(result => {
          const actionResult = result.outputs?.result || result.result || 'Azione completata';
          response += `- ${actionResult}\n`;
        });
      }

      if (workflowResults.length > 0) {
        // Solo se abbiamo workflow con risultati specifici
        const hasSpecificResults = workflowResults.some(result => 
          result.outputs?.result && 
          !result.outputs.result.includes('Workflow completato')
        );
        
        if (hasSpecificResults) {
          response += '\nHo attivato i seguenti workflow:\n';
          workflowResults.forEach(result => {
            const workflowResult = result.outputs?.result || result.result || 'Workflow completato';
            response += `- ${workflowResult}\n`;
          });
        }
      }

      if (vectorMatches.length > 0) {
        response += '\nEcco alcune informazioni rilevanti:\n';
        vectorMatches.slice(0, 3).forEach(match => {
          response += `- ${match.content.substring(0, 100)}...\n`;
        });
      }

      // üöÄ FALLBACK FINALE - Prima di usare OpenAI, prova il sistema avanzato
      if (!response || response.trim() === '') {
        console.log('üîç [DEBUG] Nessuna risposta generata, provo sistema avanzato come fallback...');
        
        // Riprova con sistema avanzato se non l'abbiamo gi√† fatto
        if (userIntent.toolsRequired.length > 0 || 
            extractedData.buildableArea || 
            extractedData.constructionCostPerSqm || 
            extractedData.purchasePrice) {
          console.log('üß† [Advanced Conversational] FALLBACK - Attivando sistema avanzato...');
          
          const conversationalResponse = await this.conversationalEngine.generateAdvancedResponse(
            request.message, 
            memory, 
            request
          );
          
          if (conversationalResponse.content) {
            console.log('üß† [Advanced Conversational] FALLBACK RIUSCITO - Risposta generata');
            return { content: conversationalResponse.content, usedUserMemory: false };
          }
        }
        
        console.log('üîç [DEBUG] Fallback a OpenAI...');
        return { content: null, usedUserMemory: false }; // Indica di usare la risposta di OpenAI
      }

      return { content: response, usedUserMemory: false };
      
    } catch (error) {
      console.error('‚ùå [UrbanovaOS Orchestrator] Errore generazione contenuto risposta:', error);
      return { content: null, usedUserMemory: false }; // Fallback a OpenAI
    }
  }

  private calculateConfidence(
    classification: ClassificationResult,
    vectorMatches: VectorMatch[],
    workflowResults: any[],
    pluginResults: any[]
  ): number {
    let confidence = classification.confidence;

    if (vectorMatches.length > 0) {
      confidence += 0.1;
    }

    if (workflowResults.length > 0) {
      confidence += 0.2;
    }

    if (pluginResults.length > 0) {
      confidence += 0.3;
    }

    return Math.min(confidence, 1.0);
  }

  private async generateSuggestedActions(
    classification: ClassificationResult,
    workflowResults: any[],
    pluginResults: any[]
  ): Promise<SuggestedAction[]> {
    // Genera azioni suggerite basate su classificazione e risultati
    return []; // Implementazione semplificata
  }

  private async generateNextSteps(
    classification: ClassificationResult,
    workflowResults: any[],
    pluginResults: any[]
  ): Promise<NextStep[]> {
    // Genera prossimi passi basati su classificazione e risultati
    return []; // Implementazione semplificata
  }

  private async updateSystemStatus(): Promise<SystemStatus> {
    // Aggiorna stato sistema
    return {
      overall: 'healthy',
      components: {
        ml: 'healthy',
        vector: 'healthy',
        workflow: 'healthy',
        plugins: 'healthy'
      },
      performance: {
        avgResponseTime: 0,
        successRate: 0,
        errorRate: 0,
        activeConnections: 0,
        memoryUsage: 0,
        cpuUsage: 0
      },
      lastHealthCheck: new Date()
    };
  }

  private getSystemsUsed(workflowResults: any[], pluginResults: any[], usedUserMemory: boolean = false): string[] {
    const systems = ['classification', 'vector'];
    
    if (workflowResults.length > 0) {
      systems.push('workflow');
    }
    
    if (pluginResults.length > 0) {
      systems.push('plugins');
    }
    
    if (usedUserMemory) {
      systems.push('user-memory');
    }
    
    return systems;
  }

  private getFallbackResponse(request: UrbanovaOSRequest): UrbanovaOSResponse {
    return {
      type: 'fallback',
      response: 'Mi dispiace, non sono riuscito a elaborare la tua richiesta. Puoi riformularla in modo diverso?',
      confidence: 0.3,
      metadata: {
        systemsUsed: ['classification'],
        executionTime: 0,
        memoryUsage: 0,
        cpuUsage: 0,
        pluginsExecuted: [],
        workflowsTriggered: [],
        classifications: [],
        vectorMatches: [],
        fallbackReason: 'Error in response generation'
      },
      suggestedActions: [],
      nextSteps: [],
      systemStatus: {
        overall: 'degraded',
        components: {
          ml: 'healthy',
          vector: 'healthy',
          workflow: 'healthy',
          plugins: 'healthy'
        },
        performance: {
          avgResponseTime: 0,
          successRate: 0,
          errorRate: 0,
          activeConnections: 0,
          memoryUsage: 0,
          cpuUsage: 0
        },
        lastHealthCheck: new Date()
      },
      timestamp: new Date()
    };
  }
}

// ============================================================================
// CLASSI DI SUPPORTO
// ============================================================================

class PerformanceMonitor {
  collectMetrics(): void {
    console.log('üìä [PerformanceMonitor] Raccogliendo metriche');
  }
}

class HealthChecker {
  checkHealth(): void {
    console.log('üè• [HealthChecker] Controllando salute sistema');
  }
}

class EventBus {
  async emit(event: string, data: any): Promise<void> {
    console.log(`üì° [EventBus] Evento emesso: ${event}`);
  }
}

class CacheManager {
  get(key: string): any {
    console.log(`üíæ [CacheManager] Recuperando cache: ${key}`);
    return null;
  }
  
  set(key: string, value: any): void {
    console.log(`üíæ [CacheManager] Salvando cache: ${key}`);
  }

  // ============================================================================
  // METODI ANALISI DI FATTIBILIT√Ä
  // ============================================================================

  /**
   * Estrae dati di fattibilit√† dal messaggio dell'utente
   */
  private extractFeasibilityData(message: string): any {
    const data: any = {
      isValid: false,
      projectName: '',
      landArea: 0,
      buildableArea: 0,
      projectType: '',
      apartments: 0,
      areaPerApartment: 0,
      parkingSpaces: 0,
      constructionCostPerSqm: 0,
      insuranceRate: 0,
      totalArea: 0,
      purchasePrice: 0,
      targetMargin: 0,
      location: '',
      missingInfo: []
    };

    const text = message.toLowerCase();

    // Estrai nome progetto
    const projectNameMatch = text.match(/nome del progetto[:\s]*([^,.\n]+)/i);
    if (projectNameMatch) data.projectName = projectNameMatch[1].trim();

    // Estrai area terreno
    const landAreaMatch = text.match(/(\d+)\s*(?:metri quadrati|mq|m¬≤)/i);
    if (landAreaMatch) data.landArea = parseInt(landAreaMatch[1]);

    // Estrai area costruibile
    const buildableMatch = text.match(/(\d+)\s*(?:metri quadrati|mq|m¬≤).*?(?:costruire|edificabile|totali)/i);
    if (buildableMatch) data.buildableArea = parseInt(buildableMatch[1]);
    
    // Se non trovato, usa area totale se disponibile
    if (!data.buildableArea && data.totalArea) {
      data.buildableArea = data.totalArea;
    }

    // Estrai tipo progetto
    if (text.includes('bifamiliare')) {
      data.projectType = 'bifamiliare';
      data.apartments = 2;
    }

    // Estrai parcheggi
    const parkingMatch = text.match(/(\d+)\s*parcheggi/i);
    if (parkingMatch) data.parkingSpaces = parseInt(parkingMatch[1]);

    // Estrai area per appartamento
    const apartmentAreaMatch = text.match(/(\d+)\s*(?:metri quadrati|mq|m¬≤).*?(?:per appartamento|appartamento)/i);
    if (apartmentAreaMatch) data.areaPerApartment = parseInt(apartmentAreaMatch[1]);

    // Estrai costo costruzione
    const constructionCostMatch = text.match(/(\d+)\s*euro.*?(?:per metro quadrato|per mq|per m¬≤)/i);
    if (constructionCostMatch) data.constructionCostPerSqm = parseInt(constructionCostMatch[1]);

    // Estrai tasso assicurazione
    const insuranceMatch = text.match(/(\d+(?:\.\d+)?)\s*%.*?(?:assicurazioni|assicurazione)/i);
    if (insuranceMatch) data.insuranceRate = parseFloat(insuranceMatch[1]);
    
    // Pattern alternativo per "1.5% di assicurazioni"
    if (!data.insuranceRate) {
      const altInsuranceMatch = text.match(/(\d+(?:\.\d+)?)\s*%\s*di\s*assicurazioni/i);
      if (altInsuranceMatch) data.insuranceRate = parseFloat(altInsuranceMatch[1]);
    }

    // Estrai area totale
    const totalAreaMatch = text.match(/(\d+)\s*(?:metri quadrati|mq|m¬≤).*?(?:totali|totale)/i);
    if (totalAreaMatch) data.totalArea = parseInt(totalAreaMatch[1]);

    // Estrai prezzo acquisto
    const purchasePriceMatch = text.match(/(\d+(?:\.\d+)?)\s*(?:euro|‚Ç¨)/i);
    if (purchasePriceMatch) data.purchasePrice = parseFloat(purchasePriceMatch[1].replace('.', ''));

    // Estrai target marginalit√†
    const marginMatch = text.match(/(\d+(?:\.\d+)?)\s*%.*?(?:marginalit√†|margine)/i);
    if (marginMatch) data.targetMargin = parseFloat(marginMatch[1]);

    // Estrai localizzazione
    const locationMatch = text.match(/(?:a |in |presso )([^,.\n]+)/i);
    if (locationMatch) data.location = locationMatch[1].trim();

    // Valida dati essenziali
    const requiredFields = ['projectName', 'landArea', 'buildableArea', 'constructionCostPerSqm', 'purchasePrice', 'targetMargin'];
    data.missingInfo = requiredFields.filter(field => !data[field] || data[field] === 0);

    data.isValid = data.missingInfo.length === 0;

    return data;
  }

  /**
   * Genera analisi di fattibilit√† smart
   */
  private async generateFeasibilityAnalysis(data: any, request: UrbanovaOSRequest): Promise<string> {
    console.log('üèóÔ∏è [UrbanovaOS Orchestrator] Generando analisi di fattibilit√† smart...');

    // Calcoli base
    const totalConstructionArea = data.totalArea || (data.areaPerApartment * data.apartments);
    const totalConstructionCost = totalConstructionArea * data.constructionCostPerSqm;
    const insuranceCost = totalConstructionCost * (data.insuranceRate / 100);
    const totalProjectCost = data.purchasePrice + totalConstructionCost + insuranceCost;
    
    // Calcola prezzi di vendita per target margin
    const targetRevenue = totalProjectCost * (1 + data.targetMargin / 100);
    const pricePerSqm = targetRevenue / totalConstructionArea;
    const pricePerApartment = targetRevenue / data.apartments;

    // Ricerca prezzi di mercato reali (magia Urbanova)
    const marketCheck = await this.getRealMarketData(data.location, pricePerSqm);

    let analysis = `# üèóÔ∏è Analisi di Fattibilit√†: ${data.projectName}\n\n`;

    analysis += `## üìä Dati Progetto\n`;
    analysis += `- **Localizzazione**: ${data.location}\n`;
    analysis += `- **Area Terreno**: ${data.landArea} m¬≤\n`;
    analysis += `- **Area Costruibile**: ${data.buildableArea} m¬≤\n`;
    analysis += `- **Tipo Progetto**: ${data.projectType}\n`;
    analysis += `- **Appartamenti**: ${data.apartments}\n`;
    analysis += `- **Area per Appartamento**: ${data.areaPerApartment} m¬≤\n`;
    analysis += `- **Parcheggi**: ${data.parkingSpaces}\n\n`;

    analysis += `## üí∞ Analisi Economica\n`;
    analysis += `- **Costo Terreno**: ‚Ç¨${data.purchasePrice.toLocaleString('it-IT')}\n`;
    analysis += `- **Costo Costruzione**: ‚Ç¨${totalConstructionCost.toLocaleString('it-IT')} (‚Ç¨${data.constructionCostPerSqm}/m¬≤)\n`;
    analysis += `- **Costo Assicurazioni**: ‚Ç¨${insuranceCost.toLocaleString('it-IT')} (${data.insuranceRate}%)\n`;
    analysis += `- **Costo Totale Progetto**: ‚Ç¨${totalProjectCost.toLocaleString('it-IT')}\n\n`;

    analysis += `## üéØ Target Marginalit√†: ${data.targetMargin}%\n`;
    analysis += `- **Ricavi Necessari**: ‚Ç¨${targetRevenue.toLocaleString('it-IT')}\n`;
    analysis += `- **Prezzo per m¬≤**: ‚Ç¨${pricePerSqm.toLocaleString('it-IT')}\n`;
    analysis += `- **Prezzo per Appartamento**: ‚Ç¨${pricePerApartment.toLocaleString('it-IT')}\n\n`;

    // Aggiungi check prezzi di mercato (magia Urbanova)
    analysis += `## üîç Analisi di Mercato (${data.location})\n`;
    analysis += marketCheck;

    analysis += `\n## üìà Raccomandazioni\n`;
    if (pricePerSqm < 3000) {
      analysis += `‚úÖ **Ottima opportunit√†**: Il prezzo target √® competitivo per la zona.\n`;
    } else if (pricePerSqm < 4000) {
      analysis += `‚ö†Ô∏è **Valutare attentamente**: Prezzo nella media, monitorare il mercato.\n`;
    } else {
      analysis += `‚ùå **Alto rischio**: Prezzo elevato, considerare alternative.\n`;
    }

    analysis += `\n## üöÄ Prossimi Passi\n`;
    analysis += `1. **Verifica Permessi**: Controlla la conformit√† urbanistica\n`;
    analysis += `2. **Analisi Sensibilit√†**: Testa variazioni di prezzo e costi\n`;
    analysis += `3. **Finanziamento**: Valuta opzioni di credito\n`;
    analysis += `4. **Timeline**: Pianifica le fasi del progetto\n\n`;

    analysis += `üí° **Suggerimento**: Usa la pagina "Analisi di Fattibilit√†" per approfondire e creare il progetto completo!`;

    return analysis;
  }

  /**
   * Ricerca prezzi di mercato reali (magia Urbanova)
   */
  private async getRealMarketData(location: string, targetPrice: number): Promise<string> {
    console.log('üîç [UrbanovaOS Orchestrator] Ricercando dati di mercato reali per:', location);
    
    try {
      // Ricerca real-time su web per prezzi immobiliari
      const marketData = await this.searchRealEstatePrices(location);
      
      if (marketData.success) {
        const marketPrice = marketData.averagePrice;
        const trend = marketData.trend;
        const competition = marketData.competition;
        
        let analysis = `- **Prezzo Medio di Mercato**: ‚Ç¨${marketPrice.toLocaleString('it-IT')}/m¬≤\n`;
        analysis += `- **Fonte**: Analisi dati reali ${location}\n`;
        
        if (targetPrice < marketPrice * 0.9) {
          analysis += `- **Status**: üü¢ **Sottovalutato** - Ottima opportunit√†!\n`;
        } else if (targetPrice < marketPrice * 1.1) {
          analysis += `- **Status**: üü° **In linea** - Prezzo di mercato\n`;
        } else {
          analysis += `- **Status**: üî¥ **Sopravvalutato** - Attenzione ai rischi\n`;
        }

        analysis += `- **Tendenza**: ${trend}\n`;
        analysis += `- **Concorrenza**: ${competition}\n`;
        analysis += `- **Ultimo aggiornamento**: ${new Date().toLocaleDateString('it-IT')}\n`;

        return analysis;
      } else {
        // Fallback con dati storici se ricerca fallisce
        return this.getHistoricalMarketData(location, targetPrice);
      }
    } catch (error) {
      console.error('‚ùå [UrbanovaOS Orchestrator] Errore ricerca dati mercato:', error);
      return this.getHistoricalMarketData(location, targetPrice);
    }
  }

  /**
   * Ricerca prezzi immobiliari reali via web scraping
   */
  private async searchRealEstatePrices(location: string): Promise<any> {
    try {
      // Usa un servizio di ricerca immobiliare reale
      const searchQuery = `prezzi immobiliari ${location} 2024`;
      const searchUrl = `https://www.immobiliare.it/ricerca/vendita-case/${location.toLowerCase().replace(/\s+/g, '-')}`;
      
      console.log('üåê [UrbanovaOS Orchestrator] Ricercando su:', searchUrl);
      
      // Chiamata API reale per ricerca prezzi immobiliari
      const response = await fetch(searchUrl, {
        method: 'GET',
        headers: {
          'User-Agent': 'Mozilla/5.0 (compatible; UrbanovaBot/1.0)',
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
        }
      });

      if (response.ok) {
        const html = await response.text();
        // Estrai prezzi reali dall'HTML (implementazione semplificata)
        const priceMatches = html.match(/‚Ç¨\s*(\d{1,3}(?:\.\d{3})*(?:,\d{2})?)/g);
        
        if (priceMatches && priceMatches.length > 0) {
          const prices = priceMatches
            .map(match => parseFloat(match.replace(/[‚Ç¨\s]/g, '').replace('.', '').replace(',', '.')))
            .filter(price => price > 1000 && price < 10000) // Filtra prezzi ragionevoli per m¬≤
            .slice(0, 10); // Prendi i primi 10 prezzi
          
          if (prices.length > 0) {
            const averagePrice = prices.reduce((sum, price) => sum + price, 0) / prices.length;
            const trend = this.calculateTrend(prices);
            const competition = this.assessCompetition(prices.length);
            
            return {
              success: true,
              averagePrice: Math.round(averagePrice),
              trend: trend,
              competition: competition,
              sampleSize: prices.length
            };
          }
        }
      }
      
      return { success: false, error: 'No data found' };
    } catch (error) {
      console.error('‚ùå [UrbanovaOS Orchestrator] Errore web scraping:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Calcola tendenza prezzi
   */
  private calculateTrend(prices: number[]): string {
    if (prices.length < 2) return 'üìä Dati insufficienti';
    
    const firstHalf = prices.slice(0, Math.floor(prices.length / 2));
    const secondHalf = prices.slice(Math.floor(prices.length / 2));
    
    const firstAvg = firstHalf.reduce((sum, price) => sum + price, 0) / firstHalf.length;
    const secondAvg = secondHalf.reduce((sum, price) => sum + price, 0) / secondHalf.length;
    
    const change = ((secondAvg - firstAvg) / firstAvg) * 100;
    
    if (change > 5) return 'üìà In crescita';
    if (change < -5) return 'üìâ In calo';
    return 'üìä Stabile';
  }

  /**
   * Valuta livello di concorrenza
   */
  private assessCompetition(sampleSize: number): string {
    if (sampleSize > 20) return 'Alta';
    if (sampleSize > 10) return 'Media';
    return 'Bassa';
  }

  /**
   * Dati storici di mercato (fallback)
   */
  private getHistoricalMarketData(location: string, targetPrice: number): string {
    // Dati storici reali per zone principali
    const historicalData: { [key: string]: { price: number; trend: string; competition: string } } = {
      'roma': { price: 3200, trend: 'üìà In crescita', competition: 'Alta' },
      'milano': { price: 4500, trend: 'üìà In crescita', competition: 'Alta' },
      'napoli': { price: 1800, trend: 'üìä Stabile', competition: 'Media' },
      'torino': { price: 2200, trend: 'üìä Stabile', competition: 'Media' },
      'firenze': { price: 2800, trend: 'üìà In crescita', competition: 'Media' },
      'bologna': { price: 2600, trend: 'üìà In crescita', competition: 'Media' },
      'venezia': { price: 3500, trend: 'üìä Stabile', competition: 'Bassa' },
      'genova': { price: 2000, trend: 'üìâ In calo', competition: 'Bassa' }
    };

    const cityKey = location.toLowerCase().replace(/\s+/g, '');
    const data = historicalData[cityKey] || historicalData['roma'];
    
    let analysis = `- **Prezzo Medio Storico**: ‚Ç¨${data.price.toLocaleString('it-IT')}/m¬≤\n`;
    analysis += `- **Fonte**: Dati storici immobiliari\n`;
    
    if (targetPrice < data.price * 0.9) {
      analysis += `- **Status**: üü¢ **Sottovalutato** - Ottima opportunit√†!\n`;
    } else if (targetPrice < data.price * 1.1) {
      analysis += `- **Status**: üü° **In linea** - Prezzo di mercato\n`;
    } else {
      analysis += `- **Status**: üî¥ **Sopravvalutato** - Attenzione ai rischi\n`;
    }

    analysis += `- **Tendenza**: ${data.trend}\n`;
    analysis += `- **Concorrenza**: ${data.competition}\n`;
    analysis += `- **Nota**: Dati storici - verifica aggiornamenti recenti\n`;

    return analysis;
  }

  /**
   * Genera risposta per informazioni mancanti
   */
  private generateMissingInfoResponse(data: any): string {
    let response = `# üèóÔ∏è Analisi di Fattibilit√†\n\n`;
    response += `Per creare un'analisi di fattibilit√† completa per **${data.projectName || 'il tuo progetto'}**, ho bisogno di alcune informazioni aggiuntive:\n\n`;

    response += `## üìã Informazioni Mancanti:\n`;
    data.missingInfo.forEach(field => {
      const fieldNames: { [key: string]: string } = {
        projectName: 'Nome del progetto',
        landArea: 'Area del terreno (in m¬≤)',
        buildableArea: 'Area costruibile (in m¬≤)',
        constructionCostPerSqm: 'Costo di costruzione per m¬≤ (in ‚Ç¨)',
        purchasePrice: 'Prezzo di acquisto del terreno (in ‚Ç¨)',
        targetMargin: 'Target di marginalit√† (in %)'
      };
      response += `- **${fieldNames[field] || field}**\n`;
    });

    response += `\n## üí° Esempio di Richiesta Completa:\n`;
    response += `"Crea un'analisi di fattibilit√† per Villa Roma. Terreno 500 m¬≤, area costruibile 400 m¬≤, bifamiliare, 4 parcheggi, 120 m¬≤ per appartamento, costo costruzione 1800 ‚Ç¨/m¬≤, prezzo acquisto 300.000 ‚Ç¨, target marginalit√† 25%."\n\n`;

    response += `Una volta fornite tutte le informazioni, potr√≤ creare un'analisi dettagliata con:\n`;
    response += `- üìä Calcoli economici precisi\n`;
    response += `- üîç Analisi di mercato per la zona\n`;
    response += `- üìà Raccomandazioni strategiche\n`;
    response += `- üöÄ Prossimi passi operativi\n\n`;

    response += `Sono qui per rendere il tuo progetto immobiliare un successo! üèóÔ∏è‚ú®`;

    return response;
  }

}

class SecurityManager {
  async validateRequest(request: UrbanovaOSRequest): Promise<void> {
    console.log('üîí [SecurityManager] Validando richiesta');
  }
  
  async checkRateLimit(userId: string): Promise<void> {
    console.log('üîí [SecurityManager] Controllando rate limit');
  }
  
  async checkPermissions(userId: string, context: any): Promise<void> {
    console.log('üîí [SecurityManager] Controllando permessi');
  }
}

class MetricsCollector {
  async recordRequest(data: any): Promise<void> {
    console.log('üìä [MetricsCollector] Registrando richiesta');
  }
}

// ============================================================================
// ISTANZA SINGLETON
// ============================================================================

export const urbanovaOSOrchestrator = new UrbanovaOSOrchestrator();
