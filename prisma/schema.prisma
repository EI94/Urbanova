// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// MODELLI UTENTE E AUTENTICAZIONE
// ========================================

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  emailVerified     DateTime?
  displayName       String?
  firstName         String?
  lastName          String?
  avatar            String?
  role              UserRole @default(USER)
  status            UserStatus @default(ACTIVE)
  timezone          String   @default("Europe/Rome")
  language          String   @default("it")
  dateFormat        String   @default("DD/MM/YYYY")
  currency          String   @default("EUR")
  twoFactorEnabled  Boolean  @default(false)
  twoFactorSecret   String?
  lastLoginAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relazioni
  profile           UserProfile?
  notifications     Notification[]
  notificationPreferences NotificationPreferences?
  projects         ProjectMember[]
  loginHistory     LoginHistory[]
  apiKeys          ApiKey[]
  auditLogs        AuditLog[]
  teamMemberships  TeamMember[]
  favorites        Favorite[]
  comments         Comment[]
  votes            Vote[]
  documents        Document[]
  workflows        Workflow[]
  knowledgeBase    KnowledgeArticle[]
  analytics        UserAnalytics[]
  pushSubscriptions PushSubscription[]
  scheduledNotifications ScheduledNotification[]
  pushNotificationDeliveries PushNotificationDelivery[]

  @@map("users")
}

model UserProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  phone           String?
  company         String?
  position        String?
  bio             String?
  website         String?
  linkedin        String?
  github          String?
  location        String?
  skills          String[]
  interests       String[]
  preferences     Json?
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relazioni
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model LoginHistory {
  id          String   @id @default(cuid())
  userId      String
  ipAddress   String?
  userAgent   String?
  location    String?
  success     Boolean
  timestamp   DateTime @default(now())
  metadata    Json?

  // Relazioni
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_history")
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  key         String   @unique
  permissions String[]
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)

  // Relazioni
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// ========================================
// SISTEMA NOTIFICHE AVANZATO
// ========================================

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  priority    NotificationPriority
  title       String
  message     String
  data        Json?
  isRead      Boolean          @default(false)
  isDismissed Boolean          @default(false)
  snoozedUntil DateTime?
  expiresAt   DateTime?
  readAt      DateTime?
  dismissedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relazioni
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  actions     NotificationAction[]

  @@map("notifications")
}

model NotificationAction {
  id             String   @id @default(cuid())
  notificationId String
  type           String
  label          String
  url            String?
  data           Json?
  clickedAt      DateTime?
  createdAt      DateTime @default(now())

  // Relazioni
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@map("notification_actions")
}

model NotificationPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailEnabled          Boolean  @default(true)
  pushEnabled           Boolean  @default(true)
  smsEnabled            Boolean  @default(false)
  inAppEnabled          Boolean  @default(true)
  quietHoursEnabled     Boolean  @default(false)
  quietHoursStart       String   @default("22:00")
  quietHoursEnd         String   @default("08:00")
  timezone              String   @default("Europe/Rome")
  preferences           Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relazioni
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

// ========================================
// NOTIFICHE PUSH E SOTTOSCRIZIONI
// ========================================

model PushSubscription {
  id          String   @id @default(cuid())
  userId      String
  endpoint    String
  p256dh      String
  auth        String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  lastUsedAt  DateTime @default(now())

  // Relazioni
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@map("push_subscriptions")
}

model ScheduledNotification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  message     String
  data        Json?
  scheduledFor DateTime
  status      ScheduledNotificationStatus @default(PENDING)
  sentAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relazioni
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("scheduled_notifications")
}

model PushNotificationDelivery {
  id                String   @id @default(cuid())
  userId            String
  title             String
  message           String
  subscriptionCount Int
  deliveredAt       DateTime @default(now())
  status            DeliveryStatus @default(SENT)
  metadata          Json?
  createdAt         DateTime @default(now())

  // Relazioni
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_notification_deliveries")
}

// ========================================
// PROGETTI E GESTIONE
// ========================================

model Project {
  id              String        @id @default(cuid())
  name            String
  description     String?
  status          ProjectStatus @default(DRAFT)
  type            ProjectType
  category        String?
  location        String?
  coordinates     Json?
  budget          Decimal?
  currency        String        @default("EUR")
  startDate       DateTime?
  endDate         DateTime?
  tags            String[]
  metadata        Json?
  isPublic        Boolean       @default(false)
  isArchived      Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  createdBy       String

  // Relazioni
  members         ProjectMember[]
  documents       Document[]
  workflows       Workflow[]
  tasks           Task[]
  milestones      Milestone[]
  comments        Comment[]
  favorites       Favorite[]
  analytics       ProjectAnalytics[]
  creator         User          @relation(fields: [createdBy], references: [id])

  @@map("projects")
}

model ProjectMember {
  id        String        @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole   @default(MEMBER)
  permissions String[]
  joinedAt  DateTime      @default(now())
  leftAt    DateTime?
  isActive  Boolean       @default(true)

  // Relazioni
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Task {
  id          String      @id @default(cuid())
  projectId   String
  title       String
  description String?
  status      TaskStatus  @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  assigneeId  String?
  dueDate     DateTime?
  estimatedHours Float?
  actualHours   Float?
  tags        String[]
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relazioni
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?       @relation(fields: [assigneeId], references: [id])
  subtasks    Subtask[]
  comments    Comment[]
  timeEntries TimeEntry[]

  @@map("tasks")
}

model Subtask {
  id          String      @id @default(cuid())
  taskId      String
  title       String
  description String?
  status      TaskStatus  @default(TODO)
  isCompleted Boolean     @default(false)
  completedAt DateTime?
  order       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relazioni
  task        Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model Milestone {
  id          String      @id @default(cuid())
  projectId   String
  title       String
  description String?
  status      MilestoneStatus @default(PENDING)
  dueDate     DateTime?
  completedAt DateTime?
  order       Int
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relazioni
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("milestones")
}

// ========================================
// DOCUMENTI E GESTIONE FILE
// ========================================

model Document {
  id          String        @id @default(cuid())
  projectId   String?
  userId      String
  name        String
  description String?
  type        DocumentType
  mimeType    String?
  size        Int?
  url         String
  thumbnail   String?
  tags        String[]
  metadata    Json?
  isPublic    Boolean       @default(false)
  isArchived  Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relazioni
  project     Project?      @relation(fields: [projectId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions    DocumentVersion[]
  comments    Comment[]

  @@map("documents")
}

model DocumentVersion {
  id          String   @id @default(cuid())
  documentId  String
  version     Int
  url         String
  size        Int?
  checksum    String?
  metadata    Json?
  createdAt   DateTime @default(now())

  // Relazioni
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, version])
  @@map("document_versions")
}

// ========================================
// COLLABORAZIONE E TEAM
// ========================================

model Team {
  id          String      @id @default(cuid())
  name        String
  description String?
  avatar      String?
  isPublic    Boolean     @default(false)
  isArchived  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String

  // Relazioni
  members     TeamMember[]
  projects    Project[]
  creator     User        @relation(fields: [createdBy], references: [id])

  @@map("teams")
}

model TeamMember {
  id       String      @id @default(cuid())
  teamId   String
  userId   String
  role     TeamRole    @default(MEMBER)
  joinedAt DateTime    @default(now())
  leftAt   DateTime?
  isActive Boolean     @default(true)

  // Relazioni
  team     Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model Comment {
  id          String   @id @default(cuid())
  userId      String
  projectId   String?
  taskId      String?
  documentId  String?
  content     String
  isEdited    Boolean  @default(false)
  editedAt    DateTime?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relazioni
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project? @relation(fields: [projectId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id])
  document    Document? @relation(fields: [documentId], references: [id])
  votes       Vote[]
  replies     CommentReply[]

  @@map("comments")
}

model CommentReply {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  content   String
  isEdited  Boolean  @default(false)
  editedAt  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relazioni
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comment_replies")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  type      VoteType
  createdAt DateTime @default(now())

  // Relazioni
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("votes")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  projectId String?
  type      String
  metadata  Json?
  createdAt DateTime @default(now())

  // Relazioni
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId, type])
  @@map("favorites")
}

// ========================================
// WORKFLOW E AUTOMAZIONE
// ========================================

model Workflow {
  id          String        @id @default(cuid())
  projectId   String?
  userId      String
  name        String
  description String?
  type        WorkflowType
  status      WorkflowStatus @default(ACTIVE)
  steps       Json?
  triggers    Json?
  conditions  Json?
  actions     Json?
  metadata    Json?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relazioni
  project     Project?      @relation(fields: [projectId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions  WorkflowExecution[]

  @@map("workflows")
}

model WorkflowExecution {
  id          String   @id @default(cuid())
  workflowId  String
  status      WorkflowExecutionStatus
  input       Json?
  output      Json?
  startedAt   DateTime @default(now())
  completedAt DateTime?
  error       String?
  metadata    Json?

  // Relazioni
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_executions")
}

// ========================================
// ANALYTICS E TRACKING
// ========================================

model UserAnalytics {
  id          String   @id @default(cuid())
  userId      String
  event       String
  category    String?
  action      String?
  label       String?
  value       Float?
  metadata    Json?
  timestamp   DateTime @default(now())
  sessionId   String?
  ipAddress   String?
  userAgent   String?

  // Relazioni
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_analytics")
}

model ProjectAnalytics {
  id          String   @id @default(cuid())
  projectId   String
  metric      String
  value       Float
  period      String
  date        DateTime
  metadata    Json?

  // Relazioni
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_analytics")
}

// ========================================
// KNOWLEDGE BASE E AI
// ========================================

model KnowledgeArticle {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String
  summary     String?
  tags        String[]
  category    String?
  status      KnowledgeStatus @default(DRAFT)
  views       Int      @default(0)
  rating      Float    @default(0)
  metadata    Json?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relazioni
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("knowledge_articles")
}

// ========================================
// AUDIT E SICUREZZA
// ========================================

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  resource    String?
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())

  // Relazioni
  user        User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model TimeEntry {
  id          String   @id @default(cuid())
  taskId      String
  userId      String
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Float?
  isBillable  Boolean  @default(false)
  rate        Float?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relazioni
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

// ========================================
// ENUMERAZIONI
// ========================================

enum UserRole {
  ADMIN
  MANAGER
  USER
  GUEST
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  SYSTEM
  PROJECT
  TASK
  COMMENT
  MENTION
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectStatus {
  DRAFT
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum ProjectType {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  INFRASTRUCTURE
  LAND_DEVELOPMENT
  RENOVATION
  MAINTENANCE
}

enum ProjectRole {
  OWNER
  MANAGER
  MEMBER
  VIEWER
  CONTRIBUTOR
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  TESTING
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
  CANCELLED
}

enum DocumentType {
  IMAGE
  PDF
  DOCUMENT
  SPREADSHEET
  PRESENTATION
  VIDEO
  AUDIO
  ARCHIVE
  OTHER
}

enum TeamRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
  VIEWER
}

enum VoteType {
  UP
  DOWN
}

enum WorkflowType {
  APPROVAL
  REVIEW
  NOTIFICATION
  AUTOMATION
  INTEGRATION
}

enum WorkflowStatus {
  ACTIVE
  INACTIVE
  DRAFT
  ARCHIVED
}

enum WorkflowExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum KnowledgeStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  REVIEW
}

// ========================================
// ENUMERAZIONI AGGIUNTIVE
// ========================================

enum ScheduledNotificationStatus {
  PENDING
  SENT
  CANCELLED
  FAILED
}

enum DeliveryStatus {
  SENT
  DELIVERED
  FAILED
  BOUNCED
}
