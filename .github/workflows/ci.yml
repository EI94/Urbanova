name: CI Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  ci:
    name: CI Pipeline
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build essential packages for Next.js module resolution
        run: |
          # Build only essential packages needed for Next.js build
          echo "🚀 Building essential packages for Next.js module resolution..."
          
          # Build types package
          echo "📦 Building @urbanova/types..."
          cd packages/types
          ls -la
          cat package.json | grep -A 5 -B 5 "build"
          pnpm build
          echo "✅ Types build completed"
          ls -la dist/ || echo "No dist folder found"
          cd ../..
          
          # Build infra package
          echo "📦 Building @urbanova/infra..."
          cd packages/infra
          ls -la
          cat package.json | grep -A 5 -B 5 "build"
          pnpm build
          echo "✅ Infra build completed"
          ls -la dist/ || echo "No dist folder found"
          cd ../..
          
          # Build data package (needed by some components)
          echo "📦 Building @urbanova/data..."
          cd packages/data
          ls -la
          cat package.json | grep -A 5 -B 5 "build"
          pnpm build
          echo "✅ Data build completed"
          ls -la dist/ || echo "No dist folder found"
          cd ../..
          
          # Build os package (needed by some API routes)
          echo "📦 Building @urbanova/os..."
          cd packages/os
          ls -la
          cat package.json | grep -A 5 -B 5 "build"
          pnpm build
          echo "✅ OS build completed"
          ls -la dist/ || echo "No dist folder found"
          cd ../..
          
          echo "🎉 Essential packages build completed"

      - name: Build application
        run: pnpm build
        continue-on-error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results/
            junit.xml
          retention-days: 30

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: build-artifacts
          path: |
            .next/
            dist/
            build/
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: ci
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Check for known vulnerabilities
        run: pnpm audit --audit-level high
        continue-on-error: false

  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build with bundle analysis
        run: |
          pnpm build
          pnpm analyze || true

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-analysis
          path: |
            .next/analyze/
            bundle-analyzer-report.html
          retention-days: 7

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Start application
        run: |
          pnpm start &
          sleep 30

      - name: Run Lighthouse CI
        run: |
          npx @lhci/cli@0.12.x autorun
        continue-on-error: true

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: |
            .next/analyze/
            bundle-analyzer-report.html
          retention-days: 7

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [ci, security, bundle-analysis, performance]
    if: always()
    
    steps:
      - name: CI Summary
        run: |
          echo "## 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CI Pipeline | ${{ needs.ci.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Bundle Analysis | ${{ needs.bundle-analysis.result == 'success' && '✅ Success' || '⏭️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance.result == 'success' && '✅ Success' || '⏭️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
          echo "- Test Results & Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Bundle Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "- Lighthouse Performance Results" >> $GITHUB_STEP_SUMMARY
