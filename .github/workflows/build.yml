name: Build & Deploy

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build internal packages
        run: |
          # Build packages in dependency order
          echo "Building @urbanova/types..."
          cd packages/types && pnpm build
          
          echo "Building @urbanova/infra..."
          cd ../infra && pnpm build
          
          echo "Building @urbanova/data..."
          cd ../data && pnpm build
          
          echo "Building @urbanova/toolos..."
          cd ../toolos && pnpm build
          
          echo "Building @urbanova/os..."
          cd ../os && pnpm build
          
          echo "Building @urbanova/agents..."
          cd ../agents && pnpm build
          
          echo "Building @urbanova/pdf..."
          cd ../pdf && pnpm build
          
          echo "Building @urbanova/tools..."
          cd ../tools && pnpm build
          
          echo "Building remaining packages..."
          cd ../compliance && pnpm build
          cd ../interactive && pnpm build
          cd ../leads && pnpm build
          cd ../messaging && pnpm build
          cd ../projects && pnpm build
          cd ../storage && pnpm build
          cd ../billing && pnpm build

      - name: TypeScript type check
        run: pnpm typecheck
        continue-on-error: false

      - name: ESLint check
        run: pnpm lint
        continue-on-error: false

      - name: Run tests
        run: pnpm test -- --ci --coverage --watchAll=false
        continue-on-error: false

      - name: Build application
        run: pnpm build
        continue-on-error: false

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: build-artifacts
          path: |
            .next/
            dist/
            build/
          retention-days: 7

  firestore-validate:
    name: Firestore Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Install Firebase CLI
        run: pnpm add -g firebase-tools
        
      - name: Validate Firestore rules
        run: firebase firestore:rules:validate
        
      - name: Validate Firestore indexes
        run: firebase firestore:indexes:validate
        
      - name: Run migration validation
        run: pnpm run migrate:validate
        
      - name: Success
        run: |
          echo "ðŸŽ‰ Firestore validation completata con successo!"
          echo "âœ… Regole validate"
          echo "âœ… Indici validati"
          echo "âœ… Migrazione validata"
